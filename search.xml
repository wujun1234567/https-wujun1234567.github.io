<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>最后一篇博客</title>
    <url>/2021/ckpf35kvz00bljov40jzfe66y/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">新的挑战以开始</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
新的挑战以开始，我准备好了
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>最后一篇博客</strong>
</div>

<p>最近找工作的事情也差不多结束了。聊一聊最近的求职经历吧。</p>
<p>
    来深圳跑了三家公司，第一家是一个外包公司，自己笔试题都没有过。
这一家在福田区我本来也没打算过得，听大佬们说外包公司出去以后不好找工作。
这一家我是想了解一下面试的过程是什么样子的。
</p>

<p>
    第二家在宝塔区，她给我的题我自己感觉是属于中高级程序员做的题目了。
能力实在有限，就写出来2道。要我周三来上机笔试一下，通过就是6k,没有通过就是
2个月的2k培训期，这个我肯定不干的。
</p>

<p>
    当天下午还有一家，我直接没去了，自己回家看点面试题就好了。

<p>第三家在南山区，是一个朋友内推过去的。终于让我看到一个正常一点，简单一点面试题了，面试的时候很顺利。<br>公司当天就确定下来了。</p>
</p>

<p>
    不过有一道题让我有点扎心了，问一个字符串的对象方法有哪一些？
substring  length  charAt  toupperCase 
我觉得这不是字符串都有的吗。 回来的时候查了一下资料，没错啊。
然后就发现问题了，方法不是要用括号调用的吗。 
length是不需要方法调用的。总是粗心看题造成的。
</p>

<p>
    我完成了自己自学前端找工作的约定了，这也只是人生的第一步。
最近自己一直跑公司找工作，让我明白，每个人都得适应人生的每一个阶段。
自己也在不知不觉中慢慢适应了。
</p>

<p>
    大学阶段就得好好学习，找到自己感兴趣的东西。
毕业就得慢慢适应工作，在工作中好好学习，不能上班摸鱼。
</p>

<p>
    这个博客以后不会更了。
阿里的域名越到后面越贵，每个写个博客也很麻烦。
我以后就用CSDN上的博客了。
</p>


<p>以后有能力的话，自己做一个博客，专门记录生活的吧。</p>
<p>人生总是充满挑战，目前才是完成了第一个，我希望后面的挑战越来越有趣。</p>
</div>




</div>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>不会更新博客了</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的面试题判断数据类型的三种方式</title>
    <url>/2021/ckpf35kmr003hjov4c2qegca2/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JS里的面试题箭头函数和普通函数的区别</title>
    <url>/2021/ckpf35knk0047jov4abr32ino/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JS里的面试题把字符串的字母取反</title>
    <url>/2021/ckpf35kn0003sjov4cgcg36wr/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JS里的算法题洗牌算法</title>
    <url>/2021/ckpf35km1002yjov4cpcigmf1/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的算法题洗牌算法</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
洗牌算法应该是接触的第一个算法，算法真的是一个神奇的东西
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的算法题洗牌算法</strong>
</div>



<ul>
<li>洗牌算法  用来求一个随机数组的<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var arr &#x3D; [1, 9, 3];<br>function fn(arr) &#123;<br>&#x2F;&#x2F; 克隆数组<br>  var crr &#x3D; arr.concat();<br>  var len &#x3D; crr.length<br>  for (var i &#x3D; 0; i &lt; len; i++) &#123;<br>    &#x2F;&#x2F; 获取 0 -2 <br>    var index &#x3D; Math.floor(Math.random() * crr.length);<br>    console.log(index);<br>    var temp &#x3D; crr[index]<br>    crr[index] &#x3D; crr[i]<br>    crr[i] &#x3D; temp<br>  &#125;<br>  return crr;<br>&#125;<br>for (var i &#x3D; 0; i &lt; 10; i++) &#123;<br>  console.log(fn(arr));<br>&#125;<br></code></pre></td></tr></table></figure>


</li>
</ul>
<img src="/image/JSsuanfa/01.png">
<img src="/image/JSsuanfa/02.png">


</div>




</div>
]]></content>
      <categories>
        <category>JS算法</category>
      </categories>
      <tags>
        <tag>JS里的算法题洗牌算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的面试题随机排序</title>
    <url>/2021/ckpf35kno004fjov450vj7zf3/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的面试题随机排序</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的面试题随机排序
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的面试题随机排序</strong>
</div>


<ol>
<li>自带的sort() 方法<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var arr &#x3D; [1, 9, 3, 8, 5, 6, 7]<br><br>function fn(arr) &#123;<br>  var arr1 &#x3D; arr.concat()<br><br>  arr1.sort(function (n1, n2) &#123;<br>    return Math.random() - 0.5<br>  &#125;)<br>  return arr1<br>&#125;<br><br>for (var i &#x3D; 0; i &lt; 10; i++) &#123;<br>  console.log(fn(arr));<br>&#125;<br></code></pre></td></tr></table></figure>
<ol start="2">
<li>递归的方法<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var arr &#x3D; [1, 9, 3, 8, 5, 6, 7];<br>function fn(arr) &#123;<br>  var ret &#x3D; [];<br>  var crr &#x3D; arr.concat();<br>  (function () &#123;<br>    if (!crr.length) &#123;<br>      return<br>    &#125;<br>    &#x2F;&#x2F; 获取 0 -6 <br>    var index &#x3D; Math.floor(Math.random() * crr.length);<br>    ret &#x3D; ret.concat(crr.splice(index, 1));<br>    arguments.callee();  &#x2F;&#x2F; 调用自动执行函数<br>  &#125;)()<br>  return ret;<br>&#125;<br>for (var i &#x3D; 0; i &lt; 10; i++) &#123;<br>  console.log(fn(arr));<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
</li>
<li>迭代的方式<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var arr &#x3D; [1, 9, 3, 8, 5, 6, 7];<br><br>function fn(arr) &#123;<br>  var ret &#x3D; [];<br>  var crr &#x3D; arr.concat();<br>  var len &#x3D; crr.length<br>  for (var i &#x3D; 0; i &lt; len; i++) &#123;<br>    &#x2F;&#x2F; 获取 0 -6 <br>    var index &#x3D; Math.floor(Math.random() * crr.length);<br>    ret &#x3D; ret.concat(crr.splice(index, 1));<br>  &#125;<br>  return ret;<br>&#125;<br>for (var i &#x3D; 0; i &lt; 10; i++) &#123;<br>  console.log(fn(arr));<br>&#125;<br></code></pre></td></tr></table></figure>
<ol start="4">
<li>洗牌算法<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var arr &#x3D; [1, 9, 3];<br><br>function fn(arr) &#123;<br>  var crr &#x3D; arr.concat();<br>  var len &#x3D; crr.length<br>  for (var i &#x3D; 0; i &lt; len; i++) &#123;<br>    &#x2F;&#x2F; 获取 0 -6 <br>    var index &#x3D; Math.floor(Math.random() * crr.length);<br>    console.log(index);<br>    var temp &#x3D; crr[index]<br>    crr[index] &#x3D; crr[i]<br>    crr[i] &#x3D; temp<br>  &#125;<br>  return crr;<br>&#125;<br>for (var i &#x3D; 0; i &lt; 10; i++) &#123;<br>  console.log(fn(arr));<br>&#125;<br></code></pre></td></tr></table></figure>




</li>
</ol>
</li>
</ol>
</div>




</div>]]></content>
      <categories>
        <category>JS面试题</category>
      </categories>
      <tags>
        <tag>JS里的面试题随机排序</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的面试题逻辑与逻辑或运算</title>
    <url>/2021/ckpf35knm0049jov44a0khygl/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JS里的面试题深拷贝和浅拷贝</title>
    <url>/2021/ckpf35kn3003vjov435cn8730/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JS里的面试题千分符</title>
    <url>/2021/ckpf35kmp003ejov43pne0fc2/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的面试题千分符</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的面试题千分符
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的面试题千分符</strong>
</div>


<ul>
<li>千分符去重<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var number &#x3D; &#39;1245341231578&#39;<br>var result &#x3D; &#39;&#39;<br>var step &#x3D; 0<br><br>function fn(num) &#123;<br>  for (var i &#x3D; num.length - 1; i &gt;&#x3D; 0; i--) &#123;<br>    result &#x3D; num[i] + result<br>    step++<br>    if (step &#x3D;&#x3D; 3 &amp;&amp; i !&#x3D; 0) &#123;<br>      result &#x3D; &#39;,&#39; + result<br>      step &#x3D; 0<br>    &#125;<br>  &#125;<br>  return result<br>&#125;<br>console.log(fn(number));<br></code></pre></td></tr></table></figure>




</li>
</ul>
</div>




</div>]]></content>
      <categories>
        <category>JS面试题</category>
      </categories>
      <tags>
        <tag>JS里的面试题千分符</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的面试题数组去重</title>
    <url>/2021/ckpf35kn5003yjov48qlbdklc/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JS里的面试题Promise的使用</title>
    <url>/2021/ckpf35kmm003cjov4e1l7gxzh/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JS里的面试题继承</title>
    <url>/2021/ckpf35kne0043jov4eeqtbpvl/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的面试题继承</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的面试题继承
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的面试题继承</strong>
</div>




<img src="/image/JSmianshi/27.png">




</div>




</div>]]></content>
      <categories>
        <category>JS面试题</category>
      </categories>
      <tags>
        <tag>JS里的面试题继承</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的面试题解析url参数</title>
    <url>/2021/ckpf35knh0045jov43blhebms/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的面试题解析url参数</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的面试题解析url参数
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的面试题解析url参数</strong>
</div>


<p><strong>使用split把字符串转换成数组类型的</strong></p>
<img src="/image/JSmianshi/26.png">




</div>




</div>]]></content>
      <categories>
        <category>JS面试题</category>
      </categories>
      <tags>
        <tag>JS里的面试题解析url参数</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS里的demo实现滑动单选框</title>
    <url>/2021/ckpf35kjm000ijov41hurc2gl/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">CSS里的demo实现滑动单选框</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
CSS里的demo实现滑动单选框
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>CSS里的demo实现滑动单选框</strong>
</div>

<p>效果图展示</p>
<img src="/image/CSSdemo/01.gif">


<p>介绍代码之前复习一下 <code>label</code>的使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">第一种：我们点击了span 里面的 按钮 两个字 input 的单选框会被选中<br> &lt;label&gt;  <br>     &lt;input type&#x3D;&quot;checkbox&quot;  &gt;  <br>     &lt;span&gt;按钮&lt;&#x2F;span&gt;<br>   &lt;&#x2F;label&gt;<br><br>第二种 : 我们点击了span 里面的 按钮 两个字 input 的单选框会被选中 <br>label 里面的 for属性的值等于  input id属性里面的值<br> &lt;label for&#x3D;&#39;input_id&#39;&gt;&lt;span&gt;按钮&lt;&#x2F;span&gt;&lt;&#x2F;label&gt;<br> &lt;input id&#x3D;&#39;input_id&#39; type&#x3D;&quot;checkbox&quot;  &gt;<br></code></pre></td></tr></table></figure>

<p>代码展示<br><img src="/image/CSSdemo/01.png"></p>
</div>




</div>]]></content>
      <categories>
        <category>CSSdemo</category>
      </categories>
      <tags>
        <tag>CSS里的demo实现滑动单选框</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的面试题冒泡排序</title>
    <url>/2021/ckpf35kmd0036jov42px2dczr/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的面试题冒泡排序</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的面试题冒泡排序
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的面试题冒泡排序</strong>
</div>


<img src="/image/JSmianshi/24.png">

<img src="/image/JSmianshi/25.png">


</div>




</div>]]></content>
      <categories>
        <category>JS面试题</category>
      </categories>
      <tags>
        <tag>JS里的面试题冒泡排序</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的面试题交换两个变量的值</title>
    <url>/2021/ckpf35kmh0039jov4ffyqahud/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JS里的面试题数组和对象API</title>
    <url>/2021/ckpf35kn90041jov4d3xr4s62/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的面试题数组和对象API</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的面试题数组和对象API
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的面试题数组和对象API</strong>
</div>


<p><strong>数组API</strong></p>
<ul>
<li>forEach 遍历所有元素</li>
</ul>
<img src="/image/JSmianshi/17.png">


<ul>
<li>every 判断所有元素是否都符合条件</li>
</ul>
<img src="/image/JSmianshi/18.png">


<ul>
<li>some 判断是否有至少一个元素符合条件</li>
</ul>
<img src="/image/JSmianshi/19.png">


<ul>
<li>sort 排序</li>
</ul>
<img src="/image/JSmianshi/20.png">

<p>return a-b //升序<br>return b-a //降序</p>
<ul>
<li>map 对元素重新组装，生成新的数组</li>
</ul>
<img src="/image/JSmianshi/21.png">


<ul>
<li>filter 过滤符合条件的元素</li>
</ul>
<img src="/image/JSmianshi/22.png">


<p><strong>对象API</strong></p>
<p>for(var k in obj)</p>
<img src="/image/JSmianshi/23.png">

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">if(obj.hasOwnproperty(key))  &#x2F;&#x2F; 判断 obj是否有 key这个属性<br></code></pre></td></tr></table></figure>




</div>




</div>]]></content>
      <categories>
        <category>JS面试题</category>
      </categories>
      <tags>
        <tag>JS里的面试题数组和对象API</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的面试题作用域和闭包</title>
    <url>/2021/ckpf35kms003jjov4aruyd193/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的面试题作用域和闭包</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的面试题作用域和闭包
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的面试题作用域和闭包</strong>
</div>

<p>执行上下文</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">console.log(a)  &#x2F;&#x2F; undefined<br>var a &#x3D; 100<br><br>fn(&#39;zhangsan&#39;)<br>function fn (name) &#123;<br>	age &#x3D; 20<br>	console.log(name,age)<br>	var age<br>&#125;<br></code></pre></td></tr></table></figure>


<p><strong>this 的使用</strong><br>this 需要在执行时，才能确认值，定义的时候是无法确认的</p>
<ul>
<li>作为构造函数执行</li>
<li>作为对象属性执行</li>
<li>作为普通函数执行</li>
<li>call apply bind</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var a &#x3D; &#123;<br>	name: &#39;A&#39;,<br>	fn: function ()&#123;<br>		console.log(this.name)<br>	&#125;<br>&#125;<br>a.fn()  &#x2F;&#x2F; this &#x3D;&#x3D;&#x3D; a<br>a.fn.call(&#123;name:&#39;B&#39;&#125;) &#x2F;&#x2F; this &#x3D;&#x3D;&#x3D; &#123;name:&#39;B&#39;&#125;<br>var fn1 &#x3D; a.fn<br>fn1() &#x2F;&#x2F; this &#x3D;&#x3D;&#x3D; window<br></code></pre></td></tr></table></figure>

<p><strong>闭包</strong></p>
<p>1.函数作为返回值<br>2.函数作为参数来传递</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">function F1()&#123;<br>	var a &#x3D; 100<br>	return function()&#123;<br>		console.log(a) &#x2F;&#x2F; 自由变量，父作用域寻找<br>	&#125;<br>&#125;<br><br>var f1 &#x3D; F1()<br><br>function F2(fn)&#123;<br>	var a &#x3D; 200<br>	fn()  &#x2F;&#x2F; 打印 100<br>&#125;<br>F2(f1)<br></code></pre></td></tr></table></figure>

<p>创建 10 个 <code>&lt;a&gt;</code>标签，点击的时候弹出来对应的序号</p>
<img src="/image/JSmianshi/07.png">


<p>面试题</p>
<img src="/image/JSmianshi/08.png">


<p>面试题</p>
<img src="/image/JSmianshi/09.png">


<p>面试题</p>
<img src="/image/JSmianshi/10.png">


<p>面试题</p>
<img src="/image/JSmianshi/11.png">

<p>注意的是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"> function bar() &#123;<br>        if (!foo) &#123;<br>          var foo &#x3D; 10;<br>        &#125;<br>        console.log(foo); <br>      &#125;<br>看做以下，先把判断条件给忽略,存在变量提升，foo是 undefined ；！undefined  &#x3D; true <br> function bar() &#123;<br>       <br>          var foo &#x3D; 10;<br><br>        console.log(foo); <br>      &#125;<br></code></pre></td></tr></table></figure>

<p>面试题</p>
<img src="/image/JSmianshi/12.png">


<p>面试题</p>
<img src="/image/JSmianshi/13.png">


<p>面试题</p>
<img src="/image/JSmianshi/14.png">

<p>注意：</p>
<ul>
<li>不管 if 条件成不成立，都需要变量提升</li>
<li>window.a = undefined</li>
<li>var a ; 但凡是声明的变量还是函数，都是window里面的属性</li>
<li>“a” in  window  : a 是不是 window 里面的属性</li>
<li>!(“a” in window) = ! true =  false</li>
</ul>
<p>相当于以下这个函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var a<br>if (!(&quot;a&quot; in window)) &#123;<br>  a &#x3D; 1;<br>&#125;<br>console.log(a);  &#x2F;&#x2F; undefined<br></code></pre></td></tr></table></figure>


<p>面试题</p>
<img src="/image/JSmianshi/15.png">

<p>在JS的非严格模式下函数的实参集合与形参变量存在映射关系：不管其中谁改变了，另一个都会跟着发生改变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">function fn(a)&#123;<br>	&#x2F;&#x2F; &#x3D;&gt; a&#x3D;10<br>	arguments[0] &#x3D; 100<br>	&#x2F;&#x2F; &#x3D;&gt; a&#x3D;100<br><br>	a&#x3D;1000<br>	&#x2F;&#x2F;&#x3D;&gt;arguments[0] &#x3D;&#x3D;&#x3D;1000<br>&#125;<br>fn(10)<br></code></pre></td></tr></table></figure>

<img src="/image/JSmianshi/16.png">


</div>




</div>
]]></content>
      <categories>
        <category>JS面试题</category>
      </categories>
      <tags>
        <tag>JS里的面试题作用域和闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的面试题原型和原型链</title>
    <url>/2021/ckpf35kmu003ljov48uke53ng/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的面试题原型和原型链</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的面试题原型和原型链
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的面试题原型和原型链</strong>
</div>


<ul>
<li><p>var a = {} 其实是 var a = new Object() 的语法糖</p>
</li>
<li><p>var a = [] 其实是 var a = new Array() 的语法糖</p>
</li>
<li><p>function Foo(){…} 其实是 var Foo = new Function(…)</p>
</li>
<li><p>使用 instanceof 判断一个函数是否是一个变量的构造函数</p>
</li>
</ul>
<p>语法糖：语法糖（Syntactic sugar），也译为糖衣语法，是由英国计算机科学家彼得·约翰·兰达（Peter J. Landin）发明的一个术语，指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。</p>
<p>之所以叫「语法」糖，不只是因为加糖后的代码功能与加糖前保持一致，更重要的是，糖在不改变其所在位置的语法结构的前提下，实现了运行时的等价。可以简单理解为，加糖后的代码编译后跟加糖前一毛一样。</p>
<p>准确判断一个变量是数组类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var arr &#x3D; []<br>arr instanceof Array  &#x2F;&#x2F; true<br>typeof arr &#x2F;&#x2F; object , typeof 是无法判断是否是数组的<br></code></pre></td></tr></table></figure>

<ul>
<li><p>所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（除了 null）</p>
</li>
<li><p>所有的引用类型（数组、对象、函数），都有一个 <code>__proto__</code>属性,属性值是一个普通的对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var obj &#x3D; &#123;&#125;; obj.a &#x3D; 100;<br>console.log(obj.__proto__);<br>console.log(obj.__proto__ &#x3D;&#x3D;&#x3D; Object.prototype)<br></code></pre></td></tr></table></figure>
</li>
<li><p>所有的函数，都有一个prototype属性，属性值也是一个普通的对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">function fn () &#123;&#125;<br>fn.a &#x3D; 100;<br>console.log(fn.prototype)<br></code></pre></td></tr></table></figure>
</li>
<li><p>所有的引用类型（数组、对象、函数），<code>__proto__</code>属性值指向它的构造函数的 “ prototype “属性值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var obj &#x3D; &#123;&#125;; obj.a &#x3D; 100;<br>console.log(obj.__proto__);<br>console.log(obj.__proto__ &#x3D;&#x3D;&#x3D; Object.prototype)<br></code></pre></td></tr></table></figure>



</li>
</ul>
<p>描述 new 一个对象的过程</p>
<ul>
<li>创建一个新对象</li>
<li>this指向这个新对象</li>
<li>执行代码，即对this赋值</li>
<li>返回 this</li>
</ul>
<p>原型链的面试题</p>
<p>如图所示：<br><img src="/image/JSmianshi/04.png"></p>
<p>hero.name == Hero() 里面的this.name ,this指向的就是Hero<br>也就是 hero.name == Hero.name</p>
<p>同理 hero.sayme == Hero.sayme 打印的是一个函数</p>
<p>如图所示：<br><img src="/image/JSmianshi/05.png"></p>
<p>如图所示：<br><img src="/image/JSmianshi/06.png"></p>
</div>




</div>]]></content>
      <categories>
        <category>JS面试题</category>
      </categories>
      <tags>
        <tag>JS里的面试题原型和原型链</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的面试题变量类型和计算</title>
    <url>/2021/ckpf35kmv003njov4dgz1ech3/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的面试题变量类型和计算</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的面试题变量类型和计算
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的面试题变量类型和计算</strong>
</div>


<ol>
<li>值类型 VS 引用类型</li>
</ol>
<p>值类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var a &#x3D; 100<br>var b &#x3D; a <br>a &#x3D; 200<br>console.log(b) &#x2F;&#x2F; 100<br></code></pre></td></tr></table></figure>

<p>引用类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var a &#x3D; &#123;age:20&#125;<br>var b &#x3D; a<br>b.age &#x3D; 21 <br>console.log(a.age)  &#x2F;&#x2F; 21<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>typeof 运算符 可以识别六种 number string boolean object function undefined</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">typeof undefined   &#x2F;&#x2F; undefined<br>typeof &#39;abc&#39;   &#x2F;&#x2F; string<br>typeof 123   &#x2F;&#x2F; number<br>typeof true   &#x2F;&#x2F; boolean<br>typeof &#123;&#125;   &#x2F;&#x2F; object<br>typeof []   &#x2F;&#x2F; object<br>typeof null   &#x2F;&#x2F; object<br>typeof console.log   &#x2F;&#x2F; function<br></code></pre></td></tr></table></figure>


<p>变量计算-强制数据类型转换</p>
<ul>
<li><p>字符串拼接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var a &#x3D; 100 + 10  &#x2F;&#x2F; 110<br>var b &#x3D; 100 + &#39;10&#39;  &#x2F;&#x2F; &#39;10010&#39;<br></code></pre></td></tr></table></figure>
</li>
<li><p>== 运算符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">100 &#x3D;&#x3D; &#39;100&#39; &#x2F;&#x2F; true 把数值 100 转换成 字符串 100<br>0 &#x3D;&#x3D; &#39;&#39; &#x2F;&#x2F; true 把 0 和&#39;&#39; 都转换为false<br>null &#x3D;&#x3D; undefined &#x2F;&#x2F; true 把 null 和 undefined 都转换为false<br></code></pre></td></tr></table></figure>
</li>
<li><p>if语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var a &#x3D; true<br>if(a)&#123;<br><br>&#125;<br>var b &#x3D; 100<br>if(b)&#123;  &#x2F;&#x2F; 100转换为 true<br><br>&#125;<br>var c &#x3D; &#39;&#39;<br>if(c)&#123;  &#x2F;&#x2F; 空字符串转换为 false<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>逻辑运算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">console.log(10 &amp;&amp; 0) &#x2F;&#x2F;0<br>console.log(&#39;&#39; || &#39;abc&#39;) &#x2F;&#x2F;abc<br>console.log(!window.abc) &#x2F;&#x2F; !undefined &#x3D; true<br></code></pre></td></tr></table></figure>

</li>
</ul>
<p>何时用 == 和 ===</p>
<p>除了 == null 之外 ，其他都一律用 === </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const obj &#x3D; &#123;x: 100&#125;<br>if(obj.a &#x3D;&#x3D; null)&#123;&#125;<br>&#x2F;&#x2F; 相当于<br>&#x2F;&#x2F; if (obj.a &#x3D;&#x3D;&#x3D; null || obj.a &#x3D;&#x3D;&#x3D; undefined)&#123;&#125;<br></code></pre></td></tr></table></figure>
<p>看一个对象的属性是否存在的时候用双等于<br>看一个if语句里面的参数是否存在的时候用双等于</p>
<p>===：称为等同符，当两边值的类型相同时，直接比较值，若类型不相同，直接返回false；</p>
<p>==：称为等值符，当等号两边的类型相同时，直接比较值是否相等，若不相同，则先转化为类型相同的值，再进行比较；</p>
<p>==运算符进行判断时会自动进行类型转换</p>
<p>JS里的内置函数 - 数据封装类对象<br>Object<br>Array<br>Boolean<br>Number<br>String<br>Function<br>Date<br>RegExp<br>Error</p>
<p>内置对象</p>
<p>Math<br>JSON</p>
<p>JS变量按照存储方式区分为 值类型和引用类型</p>
<p><a href="https://www.cnblogs.com/leiting/p/8081413.html" target="_blank" rel="noopener">区别参考</a></p>
<p>JSON 是一个JS对象 也是一种数据格式  </p>
<p>把JSON数据格式转换成字符串格式 JSON.stringify({a:10, b:20})<br>把字符串数据转换成JSON数据格式 JSON.parse(‘{“a”:10, “b”:20}’)</p>
<img src="/image/JSmianshi/03.png">




</div>




</div>

]]></content>
      <categories>
        <category>JS面试题</category>
      </categories>
      <tags>
        <tag>JS里的面试题变量类型和计算</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年的新年日记</title>
    <url>/2021/ckpf35kiw0002jov41o8kc42v/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">2021年的新年日记</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
2021年的新年日记
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 0em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>2021年的新年日记</strong>
</div>


<p>新年快乐吧！</p>
<p style="text-indent: 2em;">
    今天喝了白酒又抽了几根烟，我已经至少五六年没有抽烟了。
以前小时候因为好奇抽过烟，后来知道抽烟牙齿不好，就没有再抽过了。
</p>


<p style="text-indent: 2em;">
  喝酒的话估计有很久很久了吧。
追溯到小时候误会爸爸的白酒，以为是水。
</p>
<p style="text-indent: 2em;">
有人说这年头不会喝酒和抽烟是不会在外面交到朋友的，这是应酬必备的技能
以前会抗拒，现在还是会抗拒。
</p>
<p style="text-indent: 2em;">
  不喜欢喝酒，不喜欢抽烟。好像会被身边的亲友们看做是异类吧。
因为这是他们必备的技能，也是他们工作中的经验，要我接受这个的话，有点太难，但我理解他们的做法。
只是我只想做一个技术交流者，认真的学习技术，靠自己的本事来做事。

<p>这个世界未知的事情太多了，需要技术去探索未来的世界是什么样的。</p>
</p>
<p style="text-indent: 2em;">
  今天和小伙伴夜晚散步了，但是我好像走不进他们聊天的话题里。
他们聊的都是怎么去非正规的按摩，女生做的不正当的服务。
那时会觉得我和他们距离好像被拉开了，没有共同话题。
</p>
<p style="text-indent: 2em;">
不喜欢改变自己，喜欢改变成自己想改变的样子.
</p>











</div>




</div>


]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>2021年的新年日记</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的面试题防抖和节流的使用和区别</title>
    <url>/2021/ckpf35knn004djov4epvuauwy/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的防抖和节流的使用和区别</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的防抖和节流的使用和区别
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的防抖和节流的使用和区别</strong>
</div>


<ol>
<li>防抖：顾名思义就是防止抖动；<br>比如说有一个发送请求的按钮，我不小心点击了两次，那么就会多发送一次多余的请求，会增加服务器的负担，我们利用防抖来处理，无论点击了几次，只会按照最后一次来处理。</li>
</ol>
<p>代码图<br><img src="/image/JSmianshi/01.png"></p>
<p>效果展示图<br><img src="/image/JSmianshi/01.gif"></p>
<ol start="2">
<li>节流，就是节约流水，不能让水一下子流光了。<br>比如说有一个发送请求的按钮，我不小心点击了多次，那么就会多发送多次的请求，会增加服务器的负担，我们利用节流来处理，无论点击了几次，多会按照一秒钟一次发送请求。</li>
</ol>
<p>代码图<br><img src="/image/JSmianshi/02.png"></p>
<p>效果展示图<br><img src="/image/JSmianshi/02.gif"></p>
<p><strong>lodash.js处理防抖和节流</strong></p>
<p><a href="https://www.lodashjs.com/docs/lodash.debounce#_debouncefunc-wait0-options" target="_blank" rel="noopener">防抖的封装函数</a></p>
<p><a href="https://www.lodashjs.com/docs/lodash.throttle#_throttlefunc-wait0-options" target="_blank" rel="noopener">节流的封装函数</a></p>
</div>




</div>

]]></content>
      <categories>
        <category>JS面试题</category>
      </categories>
      <tags>
        <tag>JS里的面试题防抖和节流的使用和区别</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的面试题判断一个字符出现最多的字符和字数</title>
    <url>/2021/ckpf35kmw003qjov4gf6l21dy/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的面试题判断一个字符出现最多的字符和字数</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的面试题判断一个字符出现最多的字符和字数
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的面试题判断一个字符出现最多的字符和字数</strong>
</div>
方法一：

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var str &#x3D; &#39;acbcsasassass&#39;<br>var index &#x3D; 0<br>var value &#x3D; &#39;&#39;<br><br>var arr &#x3D; str.split(&#39;&#39;)<br>str &#x3D; arr.sort().join(&#39;&#39;)<br><br>var reg &#x3D; &#x2F;([a-zA-Z0-9_])\1+&#x2F;g<br><br>str.replace(reg,function(val,item)&#123;<br>if(index&lt;val.length)&#123;<br>	index &#x3D; val.length<br>	value &#x3D; item<br>	&#125;<br>&#125;)<br><br>console.log(value,index)<br></code></pre></td></tr></table></figure>



</div>




</div>]]></content>
      <categories>
        <category>JS面试题</category>
      </categories>
      <tags>
        <tag>JS里的面试题判断一个字符出现最多的字符和字数</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的仿淘宝固定侧边栏</title>
    <url>/2021/ckpf35kld0021jov4htjuhx3q/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JS里的动画函数的封装</title>
    <url>/2021/ckpf35klg0027jov48kyv9rek/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JS里的轮播图的案例</title>
    <url>/2021/ckpf35kma0034jov477u61t2i/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JS里的放大镜效果</title>
    <url>/2021/ckpf35kls002mjov47b17d440/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的放大镜效果</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的放大镜效果
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的放大镜效果</strong>
</div>


<p>代码如图所示<br><img src="/image/jsMethod/23.png"></p>
<p>效果展示图<br><img src="/image/jsMethod/14.gif"></p>
</div>




</div>

]]></content>
      <categories>
        <category>JS事件</category>
      </categories>
      <tags>
        <tag>JS里的放大镜效果</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的模态框拖拽</title>
    <url>/2021/ckpf35klu002pjov48poy0j8e/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的模态框拖拽</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的模态框拖拽
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的模态框拖拽</strong>
</div>


<p>代码如图所示<br><img src="/image/jsMethod/22.png"></p>
<p>效果展示图<br><img src="/image/jsMethod/13.gif"></p>
</div>




</div>

]]></content>
      <categories>
        <category>JS事件</category>
      </categories>
      <tags>
        <tag>JS里的模态框拖拽</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的登录跳转页面</title>
    <url>/2021/ckpf35klw002sjov42e56bg9a/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的登录跳转页面</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的登录跳转页面
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的登录跳转页面</strong>
</div>


<p>登录界面代码如图所示<br><img src="/image/jsMethod/20.png"></p>
<p>用户界面代码如图所示<br><img src="/image/jsMethod/21.png"></p>
<p>效果展示图<br><img src="/image/jsMethod/12.gif"></p>
</div>




</div>
]]></content>
      <categories>
        <category>JS事件</category>
      </categories>
      <tags>
        <tag>JS里的登录跳转页面</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的5秒钟之后跳转页面</title>
    <url>/2021/ckpf35kkz001jjov46v1aho6i/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的5秒钟之后跳转页面</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的5秒钟之后跳转页面
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的5秒钟之后跳转页面</strong>
</div>


<p>代码如图所示<br><img src="/image/jsMethod/19.png"></p>
<p>效果展示图<br><img src="/image/jsMethod/11.gif"></p>
</div>




</div>]]></content>
      <categories>
        <category>JS事件</category>
      </categories>
      <tags>
        <tag>JS里的5秒钟之后跳转页面</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的发送短信案例</title>
    <url>/2021/ckpf35kli002bjov46h6s8nz6/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的发送短信案例</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的发送短信案例
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的发送短信案例</strong>
</div>


<p>代码如图所示<br><img src="/image/jsMethod/18.png"></p>
<p>效果展示图<br><img src="/image/jsMethod/10.gif"></p>
</div>




</div>
]]></content>
      <categories>
        <category>JS事件</category>
      </categories>
      <tags>
        <tag>JS里的发送短信案例</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的倒计时案例</title>
    <url>/2021/ckpf35klh002ajov48nov4hf2/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的倒计时案例</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的倒计时案例
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的倒计时案例</strong>
</div>


<p>代码如图所示<br><img src="/image/jsMethod/17.png"></p>
<p>效果展示图<br><img src="/image/jsMethod/09.gif"></p>
</div>




</div>

]]></content>
      <categories>
        <category>JS事件</category>
      </categories>
      <tags>
        <tag>JS里的倒计时案例</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的调整窗口大小变化</title>
    <url>/2021/ckpf35km80030jov45lze57jc/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的调整窗口大小变化</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的调整窗口大小变化
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的调整窗口大小变化</strong>
</div>


<p>代码如图所示<br><img src="/image/jsMethod/16.png"></p>
<p>效果展示图<br><img src="/image/jsMethod/08.gif"></p>
</div>




</div>

]]></content>
      <categories>
        <category>JS事件</category>
      </categories>
      <tags>
        <tag>JS里的调整窗口大小变化</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的按键获取光标事件</title>
    <url>/2021/ckpf35klp002gjov4dnk8eo9u/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的按键获取光标事件</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的按键获取光标事件
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的按键获取光标事件</strong>
</div>


<p>代码如图所示<br><img src="/image/jsMethod/15.png"></p>
<p>效果展示图<br><img src="/image/jsMethod/07.gif"></p>
</div>




</div>]]></content>
      <categories>
        <category>JS事件</category>
      </categories>
      <tags>
        <tag>JS里的按键获取光标事件</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的快递单号放大查询</title>
    <url>/2021/ckpf35kln002fjov4bm8vadhg/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的快递单号放大查询</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的快递单号放大查询
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的快递单号放大查询</strong>
</div>


<p>代码如图所示<br><img src="/image/jsMethod/14.png"></p>
<p>效果展示图<br><img src="/image/jsMethod/06.gif"></p>
</div>




</div>]]></content>
      <categories>
        <category>JS事件</category>
      </categories>
      <tags>
        <tag>JS里的快递单号放大查询</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的图片跟随鼠标事件</title>
    <url>/2021/ckpf35klq002jjov4660c5o7i/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的图片跟随鼠标事件</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的图片跟随鼠标事件
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的图片跟随鼠标事件</strong>
</div>


<p>代码如图所示<br><img src="/image/jsMethod/13.png"></p>
<p>效果展示图<br><img src="/image/jsMethod/05.gif"></p>
</div>




</div>

]]></content>
      <categories>
        <category>JS事件</category>
      </categories>
      <tags>
        <tag>JS里的图片跟随鼠标事件</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的动态生成表格</title>
    <url>/2021/ckpf35klf0024jov497gacfc5/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的动态生成表格</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的动态生成表格
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的动态生成表格</strong>
</div>


<p>代码如图所示<br><img src="/image/jsMethod/12.png"></p>
<p>效果展示图<br><img src="/image/jsMethod/04.gif"></p>
</div>




</div>

]]></content>
      <categories>
        <category>JS事件</category>
      </categories>
      <tags>
        <tag>JS里的动态生成表格</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的留言板案例</title>
    <url>/2021/ckpf35klx002vjov4h2dw9z4c/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的留言板案例</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的留言板案例
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的留言板案例</strong>
</div>


<p>代码如图所示<br><img src="/image/jsMethod/11.png"></p>
<p>效果展示图<br><img src="/image/jsMethod/03.gif"></p>
</div>




</div>

]]></content>
      <categories>
        <category>JS事件</category>
      </categories>
      <tags>
        <tag>JS里的留言板案例</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的下拉菜单</title>
    <url>/2021/ckpf35klc001yjov47xbjdrn9/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的下拉菜单</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的下拉菜单
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的下拉菜单</strong>
</div>


<p>代码如图所示<br><img src="/image/jsMethod/10.png"></p>
<p>效果展示图<br><img src="/image/jsMethod/02.gif"></p>
</div>




</div>
]]></content>
      <categories>
        <category>JS事件</category>
      </categories>
      <tags>
        <tag>JS里的下拉菜单</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的高级语法</title>
    <url>/2021/ckpf35knr004jjov46lii9ufk/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的高级语法</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的高级语法
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>ES6中类和对象</strong>
</div>

<ol>
<li>创建类，并且实例化</li>
</ol>
<img src="/image/JSgaoji/01.png">


<ul>
<li>通过class 关键字创建类，类名习惯定义字母大写</li>
<li>类里面有个 constructor 函数，可以接收传递过来的参数，同时返回实例对象</li>
<li>constructor 函数 只要 new 生成实例时，就会自动调用这个函数，如果我们不写这个函数，类也会自动生成这个函数。</li>
</ul>
<ol start="2">
<li>在类中添加方法</li>
</ol>
<img src="/image/JSgaoji/02.png">

<ul>
<li>类里面的所有函数不需要写 function</li>
<li>多个函数之间不需要用逗号隔开</li>
</ul>
</div>



<div style="text-align: center; color: red">
    <strong>类的继承</strong>
</div>

<ol>
<li>儿子继承父亲的方法</li>
</ol>
<img src="/image/JSgaoji/03.png">

<ol start="2">
<li>super 关键字用于访问和调用对象父类上的函数。，</li>
</ol>
<p>调用父类的构造函数</p>
<img src="/image/JSgaoji/04.png">


<p>调用父类的普通函数</p>
<img src="/image/JSgaoji/05.png">

<p>子类继承父类的方法，同时拓展自己的方法</p>
<img src="/image/JSgaoji/06.png">

<ul>
<li>注意 super 关键字必须放在 子类的this 关键字的前面</li>
</ul>
<div style="text-align: center; color: red">
    <strong>ES5中类和对象的三个注意点</strong>
</div>

<ol>
<li><p>在ES6 中没有变量提升 所以必须先定义类 才能通过类实例化对象</p>
</li>
<li><p>类里面的共有属性和方法一定要加 this 使用</p>
</li>
<li><p>类里面的this 指向的问题</p>
</li>
<li><p>constructor 里面的this指向实例对象，方法里面的this指向这个方法的调用者</p>
</li>
</ol>
<img src="/image/JSgaoji/07.png">




<hr>
<div style="text-align: center; color: red">
    <strong>构造函数和原型</strong>
</div>

<p>构造函数： 是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与new一起使用。<br>我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面</p>
<p>在 JS 中 使用构造函数时要注意以下两点</p>
<ol>
<li><p>构造函数用于创建某一类对象，其首字母要大写</p>
</li>
<li><p>构造函数要和new一起使用才有意义</p>
</li>
</ol>
<p>new在执行时会做四件事情</p>
<ul>
<li>在内存中创建一个空的对象</li>
<li>让this指向这个新的对象</li>
<li>执行构造函数里面的代码，给这个新对象添加属性和方法</li>
<li>返回这个新对象（所以构造函数里面不需要return）</li>
</ul>
<img src="/image/JSgaoji/08.png">



<ul>
<li>静态成员：在构造函数身上添加的成员，只能由构造函数本身来访问</li>
</ul>
<img src="/image/JSgaoji/09.png">

<ul>
<li>实例成员：在构造函数内部创建的对象成员，只能由实例化的对象来访问，this来创建</li>
</ul>
<img src="/image/JSgaoji/10.png">


<p>构造函数存在内存浪费</p>
<img src="/image/JSgaoji/11.png">









<div style="text-align: center; color: red">
    <strong>构造函数原型prototype</strong>
</div>

<p>构造函数通过原型分配的函数是所有对象所共享的。</p>
<p>JS规定，每一个构造函数都有一个prototype属性，指向另一个对象，注意这个prototype就是一个对象<br>这个对象的所有属性和方法，都会被构造函数所拥有。</p>
<p>原型：一个对象，我们称为prototype为原型对象</p>
<p>原型的作用是： 共享方法</p>
<img src="/image/JSgaoji/12.png">



<p>对象原型 <strong>proto</strong><br>对象都会有一个属性 <strong>proto</strong> 指向构造函数的prototype原型对象，之所以我们对象可以使用构造函数<br>prototype 原型对象的属性和方法，就是因为对象有<strong>proto</strong>原型的存在。</p>
<ul>
<li><p><strong>proto</strong> 对象原型和原型对象prototype是等价的</p>
</li>
<li><p><strong>proto</strong> 对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条线路，但是它是一个非标准属性，<br>因此实际开发中，不可以使用这个属性，它只是内部指向原型对象prototype</p>
</li>
</ul>
<img src="/image/JSgaoji/13.png">


<p>constructor 构造函数</p>
<p>对象原型( <strong>proto</strong> ) 和构造函数 ( <strong>proto</strong> )原型对象里面都有一个属性constructor属性，<br>constructor我们称为构造函数，因为它指回构造函数本身。</p>
<p>如果我们修改了原来的原型对象，给原型对象赋值的是一个对象，则必须手动的利用constructor指回原来的构造函数。</p>
<img src="/image/JSgaoji/14.png">


<p>构造函数，实例 ，原型对象三者之间的关系</p>
<img src="/image/JSgaoji/15.png">



<p>原型链<br><img src="/image/JSgaoji/16.png"></p>
<p>原型对象 this指向的问题</p>
<p>构造函数里面的this 和 原型对象里面的this指向的是实例对象</p>
<img src="/image/JSgaoji/17.png">


<p>扩展内置对象</p>
<p>可以通过原型对象，对原来的内置对象进行扩展自定义的方法，比如数组增加自定义求偶数和功能</p>
<img src="/image/JSgaoji/18.png">


<hr>
<div style="text-align: center; color: red">
    <strong>继承</strong>
</div>

<p>继承的call方法</p>
<ol>
<li>call() 可以调用函数<br>fn.call()</li>
</ol>
<img src="/image/JSgaoji/19.png">

<ol start="2">
<li>call() 可以改变这个函数的this指向，也可以传递参数</li>
</ol>
<img src="/image/JSgaoji/20.png">


<p>借用构造函数继承父类型属性</p>
<img src="/image/JSgaoji/21.png">


<p>借用原型对象继承方法</p>
<p>Son.prototype = Father.prototype<br>这样子类可以拿到父类的方法，但是子类自定义的方法也会被父类给拿到。</p>
<p>拿到的原因很简单，子构造函数的原型对象指向了父构造函数的原型对象<br>父构造函数的原型对象的地址给了孩子，修改了子原型对象，但是子构造函数的原型对象指向了父构造函数的原型对象。也会将父亲的原型对象修改</p>
<img src="/image/JSgaoji/22.png">


<p>Son.prototype = new Father<br>Son.prototype.constructor = Son</p>
<img src="/image/JSgaoji/23.png">

<img src="/image/JSgaoji/24.png">


<hr>
<div style="text-align: center; color: red">
    <strong>数组方法</strong>
</div>

<p>forEach的使用，可以替换 for 循环</p>
<img src="/image/JSgaoji/25.png">


<p>filter筛选数组的方法，返回的是一个数组，而且把所有满足条件的元素返回回来</p>
<img src="/image/JSgaoji/26.png">

<p>some 也是查找满足条件的元素是否存在  返回的是一个布尔值 如果查到第一个满足条件的元素就终止循环。</p>
<img src="/image/JSgaoji/27.png">


<hr>
<div style="text-align: center; color: red">
    <strong>字符串方法</strong>
</div>

<p>trim.()去除空格</p>
<img src="/image/JSgaoji/28.png">


<hr>
<div style="text-align: center; color: red">
    <strong>对象方法</strong>
</div>

<p>Object.keys 获取对象的属性名，不是属性值</p>
<img src="/image/JSgaoji/29.png">


<p>Object.defineProperty()定义新属性或修改原有的属性</p>
<blockquote>
<p>Object.defineProperty(obj,prop,descriptor)</p>
</blockquote>
<p>Object.defineProperty() 第三个参数descriptor说明： 以对象形式{}书写</p>
<ul>
<li><p>value: 设置属性的值  默认为 undefined</p>
</li>
<li><p>writable: 值是否可以重写。 true | false 默认为 false</p>
</li>
<li><p>enumerable: 目标属性是否可以被枚举(遍历)。 true | false 默认false</p>
</li>
<li><p>configurable: 目标属性是否可以被删除或是否可以再次修改特性 true | false 默认为false</p>
</li>
</ul>
<img src="/image/JSgaoji/30.png">


<hr>
<div style="text-align: center; color: red">
    <strong>函数的定义和调用的方式</strong>
</div>

<p><strong>函数的定义</strong></p>
<ol>
<li><p>函数声明方式 function 关键字 （命名函数）</p>
</li>
<li><p>函数表达式（匿名函数）</p>
</li>
<li><p>new Function</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var fn &#x3D; new Function(&#39;参数1&#39;,&#39;参数2&#39;,&#39;函数体&#39;)<br></code></pre></td></tr></table></figure>

<ul>
<li><p>Function里面参数都必须是字符串格式</p>
</li>
<li><p>第三种方式执行效率低，也不方便书写，因此较少使用</p>
</li>
<li><p>所有函数都是Function的实例（对象）</p>
</li>
<li><p>函数也属于对象</p>
</li>
</ul>
<img src="/image/JSgaoji/31.png">

<img src="/image/JSgaoji/32.png">




<p><strong>函数的调用</strong></p>
<ol>
<li><p>普通函数的方法</p>
</li>
<li><p>对象的方法</p>
</li>
<li><p>构造函数</p>
</li>
<li><p>绑定事件函数</p>
</li>
<li><p>定时器函数</p>
</li>
<li><p>立即执行函数</p>
</li>
</ol>
<img src="/image/JSgaoji/33.png">


<p><strong>this的指向问题</strong></p>
<table>
<thead>
<tr>
<th align="left">调用方式</th>
<th align="left">this指向</th>
</tr>
</thead>
<tbody><tr>
<td align="left">普通函数调用</td>
<td align="left">window</td>
</tr>
<tr>
<td align="left">构造函数调用</td>
<td align="left">实例对象 原型对象里面的方法也是指向实例对象</td>
</tr>
<tr>
<td align="left">对象方法调用</td>
<td align="left">该方法所属对象</td>
</tr>
<tr>
<td align="left">事件绑定方法</td>
<td align="left">绑定事件对象</td>
</tr>
<tr>
<td align="left">定时器函数</td>
<td align="left">window</td>
</tr>
<tr>
<td align="left">立即执行函数</td>
<td align="left">window</td>
</tr>
</tbody></table>
<p><strong>函数内的this指向问题</strong></p>
<p>改变函数内this指向  JS 提供了三种方法 call()  apply()  bind()</p>
<ol>
<li>call()</li>
</ol>
<p>call 第一个可以调用函数  第二个可以改变函数内的this的 指向<br>call 主要用于实现继承</p>
<img src="/image/JSgaoji/34.png">


<ol start="2">
<li>apply()  应用   运用的意思</li>
</ol>
<p>apply() 第一个也是调用函数 第二个可以改变函数内部的this指向<br>但是它的参数必须是数组（伪数组）<br>apply 的主要应用 比如说我们可以利用 apply 借助于数学内置对象求最大值</p>
<img src="/image/JSgaoji/35.png">


<ol start="3">
<li>bind 方法  不会调用函数 但是能改变函数内部this指向</li>
</ol>
<blockquote>
<p>fun.bind(thisArg,arg1,arg2,…)</p>
</blockquote>
<ul>
<li>thisArg: 在fun函数运行时指定的this值</li>
<li>arg1,arg2 :传递的其他参数</li>
<li>返回由指定的this 值和初始化参数改造的原函数拷贝</li>
</ul>
<img src="/image/JSgaoji/36.png">


<p>我有一个按钮，当我们点击之后，就禁用这个按钮，3秒钟之后开启这个按钮</p>
<img src="/image/JSgaoji/37.png">

<img src="/image/JSgaoji/38.png">



<div style="text-align: center; color: red">
    <strong>call apply bind 的使用总结</strong>
</div>


<p>相同点：都可以改变函数内部的this指向</p>
<p>区别点：</p>
<ul>
<li>call和apply 会调用函数，并且改变函数内部this指向</li>
<li>call和apply 传递的参数不一样，call传递参数 a1,a2..形式  apply必须数组形式[arg]</li>
<li>bind 不会调用函数， 可以改变函数内部this指向</li>
</ul>
<p>主要应用场景：</p>
<ul>
<li>call经常做继承</li>
<li>apply 经常跟数组有关系，比如借助于数学对象实现数组最大值最小值</li>
<li>bind 不调用函数，但是还想改变this指向，比如改变定时器内部的this指向。</li>
</ul>
<div style="text-align: center; color: red">
    <strong>严格模式</strong>
</div>

<p>严格模式对正常的JavaScript语义做了一些更改：</p>
<ol>
<li><p>消除了JavaScript语法的一些不合理，不严谨之处，减少了一些怪异行为。</p>
</li>
<li><p>消除代码运行的一些不安全之处，保证代码运行的安全。</p>
</li>
<li><p>提高了编译器效率，增加运行速度</p>
</li>
<li><p>禁用了在ECMAScript 的未来版本中可能会定义的一些语法 ，为未来新版本的JavaScript做好<br>铺垫，如一些保留字：class,enum,export,extends,impot,super 不能做变量名</p>
</li>
</ol>
<p><strong>为脚本开启严格模式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>&lt;script&gt;<br>&#39;use strict&#39;<br>&lt;&#x2F;script&gt;<br><br>&lt;script&gt;<br>(function()&#123;<br>	&#39;use strict&#39;<br>	&#125;)()<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

<p><strong>为函数开启严格模式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>&lt;script&gt;<br>function fn ()&#123;<br>	&#39;use strict&#39;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

<ol>
<li>变量规定</li>
</ol>
<ul>
<li><p>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量，严格模式禁止使用，先var声明再使用</p>
</li>
<li><p>严禁删除已经声明变量。例如， delete 对象 ; 语法是错误的</p>
</li>
</ul>
<p>注意： detele 只能删除 对象属性</p>
<ol start="2">
<li>严格模式下this指向问题</li>
</ol>
<p>① 以前在全局作用域函数中的this指向window对象<br>② 严格模式下全局作用域中函数中的this是 undefined<br>③ 以前构造函数时，不加new也可以调用，当普通函数，this指向全局对象<br>④ 严格模式下，如果构造函数不加new调用，this指向的是undefined<br>⑤ new实例化的构造函数指向创建的对象实例<br>⑥ 定时器this还是指向window<br>⑦ 事件，对象还是指向调用者</p>
<ol start="3">
<li>函数变化</li>
</ol>
<p>① 严格模式下函数里面的参数不允许有重名<br>② 严格模式下if语句里面不能有函数体<br>③ 严格模式下函数里面可以写函数</p>
<div style="text-align: center; color: red">
    <strong>高阶函数</strong>
</div>

<p>高阶函数是对其他函数进行操作的函数，它接收函数作为参数或将函数作为返回值输出。</p>
<img src="/image/JSgaoji/39.png">

<p>此时 fn 就是一个高阶函数<br>函数也是一种数据类型，同样可以作为参数，传递给另一个参数使用。最典型的就是作为回调函数。</p>
<hr>
<div style="text-align: center; color: red">
    <strong>闭包</strong>
</div>

<p>变量根据作用域的不同分为两种：全部变量和局部变量</p>
<ol>
<li><p>函数内部可以使用全部变量</p>
</li>
<li><p>函数外部不可以使用局部变量</p>
</li>
<li><p>当函数执行完毕，本作用域内的局部变量会销毁。</p>
</li>
</ol>
<p>闭包指有权访问另一个函数作用域中的变量的函数<br>简单理解就是，一个作用域可以访问另一个函数内部的局部变量</p>
<img src="/image/JSgaoji/40.png">


<p>闭包的作用：延伸了变量的作用范围</p>
<img src="/image/JSgaoji/41.png">


<p>利用闭包的方式得到小li的索引号</p>
<img src="/image/JSgaoji/42.png">


<hr>
<div style="text-align: center; color: red">
    <strong>递归</strong>
</div>

<p>递归：一个函数在内部可以调用其本身</p>
<img src="/image/JSgaoji/43.png">


<p>利用递归求数学题<br>求 1<em>2</em>3<em>4</em>n 的阶乘</p>
<img src="/image/JSgaoji/44.png">


<p>利用递归函数求斐波那契数列<br>1 1 2 3 5 8 13  21…n</p>
<img src="/image/JSgaoji/45.png">


<p>利用递归求： 根据id返回对应的数据对象</p>
<img src="/image/JSgaoji/46.png">


<hr>
<div style="text-align: center; color: red">
    <strong>深拷贝和浅拷贝</strong>
</div>

<ul>
<li>浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用（地址）</li>
<li>深拷贝拷贝多层，每一层级别的数据都会拷贝</li>
<li>Object.assign(target,…sources) ES6新增方法可以浅拷贝</li>
</ul>
<img src="/image/JSgaoji/48.png">


<img src="/image/JSgaoji/47.png">

<p>上图的代码只有改变 msg.age 里的数据，另一个对象里面的数据也会改变。</p>
<img src="/image/JSgaoji/49.png">


<img src="/image/JSgaoji/50.png">

<p>上图的代码只有改变 msg.age 里的数据，另一个对象里面的数据不会被改变。</p>
<div style="text-align: center; color: red">
    <strong>正则表达式</strong>
</div>


<ol>
<li><p>利用RegExp对象来创建  正则表达式<br>var regexp = new RegExp(/123/);<br>console.log(regexp)</p>
</li>
<li><p>利用字面量创建 正则表达式<br>var rg = /123/;</p>
</li>
<li><p>test 方法用来检测字符串是否符合正则表达式要求的规范<br>console.log(reg.test(123))   // true<br>console.log(reg.test(‘abc’)) // false</p>
</li>
</ol>
<p><strong>正则表达式中的特殊字符</strong></p>
<ul>
<li>边界符<br>正则表达式中的边界符（位置符）用来提示字符所处在的位置，主要有两个字符</li>
</ul>
<table>
<thead>
<tr>
<th align="left">边界符</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">^</td>
<td align="left">表示匹配行首的文本(以谁开始)</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">表示匹配行尾的文本(以谁结束)</td>
</tr>
</tbody></table>
<p>^ 和 $ 一起使用表示精确匹配</p>
<img src="/image/JSgaoji/51.png">


<ul>
<li>字符类：[] 表示有一系列字符可供选择  只要匹配其中一个就可以了</li>
</ul>
<img src="/image/JSgaoji/52.png">



<ul>
<li>字符组合</li>
</ul>
<img src="/image/JSgaoji/53.png">


<ul>
<li>如果中括号里面有 ^ 表示取反的意思  千万和 我们边界符 ^ 别混淆</li>
</ul>
<img src="/image/JSgaoji/54.png">



<ul>
<li>量词符  ： 用来设定某个模式出现的次数</li>
</ul>
<table>
<thead>
<tr>
<th align="left">量词</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">重复零次或者更多次</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">重复一次或者更多次</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">重复零次或一次</td>
</tr>
<tr>
<td align="left">{n}</td>
<td align="left">重复n次</td>
</tr>
<tr>
<td align="left">{n,}</td>
<td align="left">重复n次或更多次</td>
</tr>
<tr>
<td align="left">{n,m}</td>
<td align="left">重复n到m次</td>
</tr>
</tbody></table>
</div>















</div>

]]></content>
      <categories>
        <category>JS语法</category>
      </categories>
      <tags>
        <tag>JS里的高级语法</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的Tab栏切换</title>
    <url>/2021/ckpf35kkx001gjov40j2w1l1m/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的Tab栏切换</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的Tab栏切换
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>JS里的Tab栏切换</strong>
</div>


<p>代码如图所示<br><img src="/image/jsMethod/09.png"></p>
<p>效果展示图<br><img src="/image/jsMethod/01.gif"></p>
</div>




</div>]]></content>
      <categories>
        <category>JS事件</category>
      </categories>
      <tags>
        <tag>JS里的Tab栏切换</tag>
      </tags>
  </entry>
  <entry>
    <title>HTMLandCSS的面试题</title>
    <url>/2021/ckpf35kkr0018jov40by8de1x/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">HTMLandCSS的面试题</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
HTMLandCSS的面试题
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>如何理解HTML语义化</strong>

</div>

<p>html语义化就是用正确的标签来做正确的事情。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">错误的写法<br>&lt;div&gt;标题&lt;&#x2F;div&gt;<br>&lt;div&gt;段落&lt;&#x2F;div&gt;<br><br>正确的写法<br>&lt;h1&gt;标题&lt;&#x2F;h1&gt;<br>&lt;p&gt;段落&lt;&#x2F;p&gt;<br></code></pre></td></tr></table></figure>

<ul>
<li>让人更容易读懂（增加代码的可读性）</li>
<li>让搜索引擎更容易读懂（SEO）提高搜索排名</li>
</ul>
<hr>
<div style="text-align: center; color: red">
    <strong>块状元素和内联元素</strong>

</div>

<blockquote>
<p>display: block/table;  div h1 h2 table ul ol p 等 可以设置宽高 垂直分布<br>display: inline        span  em i b  a strong  等 不可以设置宽高 水平分布<br>display: inline-block  img  buttom</p>
</blockquote>
<p>img input 是属于 行内替换元素</p>
<hr>
<div style="text-align: center; color: red">
    <strong>盒模型宽度计算</strong>

</div>

<p>如下代码 请问div 的offsetwidth 是多大</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">div&#123;<br>	width: 100px<br>	padding: 10px<br>	border: 1px solid #ccc<br>	margin: 10px<br>&#125;<br></code></pre></td></tr></table></figure>
<p>offsetwidth = (内容宽度 + 内边距 + 边框)，无外边距<br>offsetwidth = 100 + 20 + 2 = 122</p>
<p>如果让offsetwidth 等于100px 如何做</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">div&#123;<br>	width: 100px<br>	padding: 10px<br>	border: 1px solid #ccc<br>	margin: 10px<br>	box-sizing: border-box<br>&#125;<br><br>盒子总的宽度为100px 实际元素的 width ！&#x3D; 100px<br>总的宽度为 padding + border + width &#x3D; 100px<br></code></pre></td></tr></table></figure>



<hr>
<div style="text-align: center; color: red">
    <strong>如何实现一个三角形</strong>

</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">     &lt;style&gt;<br>     div &#123;<br>	      width: 0px;<br>	      height: 0px;<br>	      border: 50px solid transparent;<br>	      border-top-color: tomato;<br>           &#125;<br>     &lt;&#x2F;style&gt;<br>&lt;body&gt;<br>  &lt;div&gt;&lt;&#x2F;div&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>






<hr>
<div style="text-align: center; color: red">
    <strong>如何实现一个扇形</strong>

</div>
在三角形的基础上加了一个border-radius

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">  &lt;style&gt;<br>    div &#123;<br>      width: 0px;<br>      height: 0px;<br>      border: 50px solid transparent;<br>      border-top-color: tomato;<br>      border-radius: 50px;<br>    &#125;<br>  &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>  &lt;div&gt;&lt;&#x2F;div&gt;<br><br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>



<hr>
<div style="text-align: center; color: red">
    <strong>margin纵向重叠问题</strong>

</div>

<ul>
<li>相邻元素的margin-top 和 margin-bottom 会发生重叠</li>
<li>空白内容的<code>&lt;p&gt;&lt;/p&gt;</code>也会重叠</li>
</ul>
<p>如下代码，AAA 和 BBB之间的距离是多少</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">  &lt;style&gt;<br>    p &#123;<br>      font-size: 16px;<br>      line-height: 1;<br>      margin-top: 10px;<br>      margin-bottom: 15px;<br>    &#125;<br>  &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>  &lt;p&gt;AAA&lt;&#x2F;p&gt;<br>  &lt;p&gt;&lt;&#x2F;p&gt;<br>  &lt;p&gt;&lt;&#x2F;p&gt;<br>  &lt;p&gt;&lt;&#x2F;p&gt;<br>  &lt;p&gt;BBB&lt;&#x2F;p&gt;<br><br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>
<p>答案是 15px 也就是AAA的bottom的距离</p>
</div>



<hr>
<div style="text-align: center; color: red">
    <strong>margin负值问题</strong>

</div>

<p>首先需要注意的是<br>margin-top / left 是移动自身的<br>margin-bottom / right 是移动其他元素的</p>
<ul>
<li>margin-top 和 margin-left 负值，元素向上、向左移动</li>
<li>margin-right负值， 右侧元素左移，自身不受影响</li>
<li>margin-bottom负值， 下方元素上移，自身不受影响</li>
</ul>
<hr>
<div style="text-align: center; color: red">
    <strong>什么是BFC？如何运用</strong>

</div>

<p>BFC： 块格式化上下文 (block formatting context)</p>
<ul>
<li>一块独立渲染区域，内部元素的渲染不会影响边界以外的元素</li>
</ul>
<p>BFC的理解与作用<br>形成BFC的常见条件</p>
<ul>
<li>float 属性不为 none</li>
<li>position 为absolute 或 fixed</li>
<li>display 为 inline-block, table-cell, table-caption, flex</li>
<li>overflow 不为 visible（hidden auto scroll）</li>
</ul>
<p>开启BFC特点作用</p>
<ol>
<li>解决margin叠加问题</li>
</ol>
<p>当没开启BFC时：上下两个盒子会有叠加的问题<br><img src="/image/cssDetailed/25.png"></p>
<p>当开启BFC时：上下两个盒子不会有叠加的问题<br><img src="/image/cssDetailed/26.png"></p>
<ol start="2">
<li>解决margin传递问题</li>
</ol>
<p>给子盒子一个margin-top会导致父盒子也会有一个margin-top，和子盒子一起掉下来。<br><img src="/image/cssDetailed/27.png"></p>
<p>当开启BFC时：不会有margin传递问题，也可以给父盒子加边框解决这个问题<br><img src="/image/cssDetailed/28.png"></p>
<ol start="3">
<li>解决浮动问题</li>
</ol>
<p>左浮动的盒子是不占有位置的，下面的盒子会升上来<br><img src="/image/cssDetailed/29.png"></p>
<p>当开启BFC时：不会有浮动问题<br><img src="/image/cssDetailed/30.png"></p>
<ol start="4">
<li>解决覆盖问题</li>
</ol>
<img src="/image/cssDetailed/31.png">

<p>当开启BFC时：不会有覆盖问题<br><img src="/image/cssDetailed/32.png"></p>
<hr>
<div style="text-align: center; color: red">
    <strong>手写clearfix</strong>

</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">.clearfix:after &#123;<br>	content: &quot;&quot;;<br>	display: block;<br>	clear: both;<br>&#125;<br>&#x2F;&#x2F; 兼容IE低版本<br>.clearfix&#123;<br>	*zoom: 1;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>清除浮动本质上是要消除浮动元素带来的一些影响（例如高度塌陷）</p>
<p>手写一个 clearfix：<br>给父元素添加 clearfix 类名，并在其 :after 伪元素添加 clear:both; 正常情况下不需要 display:block; 因为 div 默认是 block，<br>但可能被其它样式选择器设置为其它的方式，如果inline，就导致这个作用无效了，<br>所以需要加上 display:block; 同时给 .clearfix 设置 <code>*zoom</code>: 1; 属性以兼容低版本的 IE</p>
<hr>
<div style="text-align: center; color: red">
    <strong>flex布局画一个三色骰子</strong>

</div>
代码如图所示
<img src="/image/cssDetailed/05.png">

<p>实际效果图<br><img src="/image/cssDetailed/06.png"></p>
<hr>
<div style="text-align: center; color: red">
    <strong>CSS定位</strong>

</div>

<p>定位：相对定位 绝对定位 固定定位 静态定位 粘连定位</p>
<p>absolute 和 relative 分别依据什么定位</p>
<ul>
<li><p>static 静态定位，默认的</p>
</li>
<li><p>relative 依据自身定位（不脱离文档流，占有空间）</p>
</li>
<li><p>absolute 依据最近已定位的祖先元素(如果找不到会依据body定位，脱离文档流，不占有空间)</p>
</li>
<li><p>fixed 固定定位，相当于浏览器的位置，（脱离文档流，不占有空间）</p>
</li>
<li><p>sticky 粘性定位 具有吸顶的效果</p>
</li>
</ul>
<p>具有定位的盒子里面的margin会失效</p>
<p>具有定位的行内元素可以给宽高</p>
<p>固定定位不占有位置</p>
<hr>
<div style="text-align: center; color: red">
    <strong>CSS水平居中</strong>

</div>

<ul>
<li><p>inline/inline-block元素： text-align:center</p>
</li>
<li><p>block元素：margin: 0 auto</p>
</li>
<li><p>absolute元素：left:50% + margin-left负值一半元素宽度</p>
</li>
<li><p>absolute元素：left, right = 0 + margin: 0 auto</p>
</li>
<li><p>absolute元素：left:50% + transform:translate(-50%,0) </p>
</li>
<li><p>弹性元素：默认父元素display:flex; justify-content: center;</p>
</li>
</ul>
<hr>
<div style="text-align: center; color: red">
    <strong>CSS垂直居中</strong>

</div> 

<ul>
<li><p>inline元素：line-height的值等于height值</p>
</li>
<li><p>absolute元素：top:50% + margin-top 负值一半元素高度</p>
</li>
<li><p>absolute元素：top:50% + transform:translate(0,-50%) </p>
</li>
<li><p>absolute元素：top,bottom = 0 + margin:auto 0; </p>
</li>
<li><p>弹性flex:默认父元素display:flex; align-items:center;</p>
</li>
<li><p>单元格table-cell元素：父元素 display:table-cell; vertical-align:middle;</p>
</li>
</ul>
<hr>
<div style="text-align: center; color: red">
    <strong>CSS水平垂直居中</strong>

</div> 

<p>实现水平垂直居中的最简单的方式<br>父元素 display : flex<br>子元素 margin  : auto</p>
<p>代码如图所示<br><img src="/image/cssDetailed/07.png"></p>
<p>实际效果图<br><img src="/image/cssDetailed/08.png"></p>
<p>Flex</p>
<ul>
<li>父元素</li>
<li>display: flex;</li>
<li>justify-content: center;</li>
<li>align-items: center;</li>
</ul>
<p>代码如图所示<br><img src="/image/cssDetailed/18.png"></p>
<p>实际效果图<br><img src="/image/cssDetailed/19.png"></p>
<p>CSS3 transfrom</p>
<ul>
<li><p>父元素</p>
</li>
<li><p>position: relative;</p>
</li>
<li><p>子元素</p>
</li>
<li><p>transform: translate(-50%, -50%);</p>
</li>
<li><p>position: absolute;</p>
</li>
<li><p>top: 50%;</p>
</li>
<li><p>left: 50%;</p>
</li>
</ul>
<p>代码如图所示<br><img src="/image/cssDetailed/20.png"></p>
<p>实际效果图<br><img src="/image/cssDetailed/19.png"></p>
<p>display:table-cell</p>
<ul>
<li><p>父元素</p>
</li>
<li><p>display: table-cell;</p>
</li>
<li><p>vertical-align: middle;</p>
</li>
<li><p>text-align: center;</p>
</li>
<li><p>子元素</p>
</li>
<li><p>display: inline-block;</p>
</li>
<li><p>vertical-align: middle;</p>
</li>
</ul>
<p>代码如图所示<br><img src="/image/cssDetailed/21.png"></p>
<p>实际效果图<br><img src="/image/cssDetailed/22.png"></p>
<p>display:grid</p>
<ul>
<li><p>父元素</p>
</li>
<li><p>display: grid;</p>
</li>
<li><p>子元素</p>
</li>
<li><p>margin: auto;</p>
</li>
</ul>
<p>代码实际效果图</p>
<img src="/image/cssDetailed/33.png">


<p>子绝父相<br>父元素</p>
<ul>
<li>position: relative;</li>
</ul>
<p>子元素</p>
<ul>
<li>position: absolute;</li>
<li>left: 0;</li>
<li>right: 0;</li>
<li>top: 0;</li>
<li>bottom: 0;</li>
<li>margin: auto;</li>
</ul>
<p>代码如图所示<br><img src="/image/cssDetailed/23.png"></p>
<p>实际效果图<br><img src="/image/cssDetailed/24.png"></p>
<p>子元素是文本时：<br>代码如图所示<br><img src="/image/cssDetailed/09.png"></p>
<p>实际效果图<br><img src="/image/cssDetailed/10.png"></p>
<p>子元素是块级元素时：</p>
<p>代码如图所示<br><img src="/image/cssDetailed/11.png"></p>
<p>实际效果图<br><img src="/image/cssDetailed/12.png"></p>
<p>多行文本实现水平垂直居中<br>代码如图所示<br><img src="/image/cssDetailed/13.png"></p>
<p>实际效果图<br><img src="/image/cssDetailed/14.png"></p>
<hr>
<div style="text-align: center; color: red">
    <strong>line-height如何继承</strong>

</div> 

<ol>
<li>写百分比，比如200%，则继承计算出来的值</li>
</ol>
<p>代码如图所示<br><img src="/image/cssDetailed/15.png"></p>
<p>line-heigt = body的20px  x  200% = 40px </p>
<ol start="2">
<li>写比例，如2/1.5,则继承该比例（比较好理解）</li>
</ol>
<p>代码如图所示<br><img src="/image/cssDetailed/16.png"></p>
<p>line-heigt = 2  x  16px = 32px </p>
<ol start="3">
<li>写具体数值，如30px,则继承该值（比较好理解）</li>
</ol>
<p>代码如图所示<br><img src="/image/cssDetailed/17.png"></p>
<p>line-heigt = 30px </p>
<hr>
<div style="text-align: center; color: red">
    <strong>盒模型</strong>

</div> 

<p>盒模型分为两种：标准盒模型和IE盒模型（怪异盒模型）</p>
<p>标准盒模型： content（内容区域） padding（内边距） margin（外边距） border（边框）<br>IE盒模型：content包含了padding和border </p>
<p>CSS盒模型和IE盒模型的区别：</p>
<p>在标准盒子模型中，width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。</p>
<p>IE盒子模型中，width 和 height 指的是内容区域+border+padding的宽度和高度。</p>
<p><code>IE模型和标准模型唯一的区别是内容计算方式的不同</code></p>
<p>IE模型元素宽度width=content+padding，高度计算相同</p>
<p>标准模型元素宽度width=content，高度计算相同</p>
<p>怪异盒模型（ie6 及ie6以下浏览器 不设置doctype）</p>
<p>box-sizing: box-content  标准<br>            border-box   怪异</p>
<hr>
<div style="text-align: center; color: red">
    <strong>实现左边定宽右边自适应布局</strong>

</div> 

<ol>
<li><p>父容器设置display: flex, 右盒子flex:1</p>
</li>
<li><p>左盒子浮动，右盒子width = 100% margin-left = 左盒子宽度</p>
</li>
</ol>
<hr>
<div style="text-align: center; color: red">
    <strong>CSS单行文本和多行文本的益出处理</strong>

</div> 
块级元素定宽度

<p>单行文本的益处隐藏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">white-space: nowrap; &#x2F;&#x2F;不换行<br>overflow: hidden;    &#x2F;&#x2F;溢出隐藏<br>text-overflow: ellipsis; &#x2F;&#x2F; 隐藏的部分用省略号表示<br></code></pre></td></tr></table></figure>
<p>多行文本的益处隐藏（了解）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">overflow:hidden;<br>text-overflow:ellipsis;<br>dispaly: -webkit-box;<br>-webkit-line-clamp: 2;<br>-webkit-box-orient: vertical;<br></code></pre></td></tr></table></figure>


<hr>
<div style="text-align: center; color: red">
    <strong>消除图片底部间隙的方法</strong>

</div> 

<ol>
<li><p>图片块状化-无基线对齐： img {display: block}</p>
</li>
<li><p>图片底线对齐: img {vertical-align:bottom;}</p>
</li>
<li><p>父级设置font-size: 0;</p>
</li>
<li><p>行高足够小-基线位置上移： .box{line-height:0;}</p>
</li>
</ol>
<hr>
<div style="text-align: center; color: red">
    <strong>响应式设计是什么？什么原理？</strong>

</div> 

<p>响应式网站设计是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本</p>
<p>基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理</p>
<p>页面头部必须有meta声明的viewport。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,<br>initial-scale&#x3D;1.0,minimum-scale&#x3D;1.0,user:scalable&#x3D;no&quot;&#x2F;&gt;<br></code></pre></td></tr></table></figure>



<hr>
<div style="text-align: center; color: red">
    <strong>px em rem 的区别</strong>

</div> 

<ul>
<li><p>px 像素。绝对单位。像素px是相对于显示器屏幕分辩率而言的</p>
</li>
<li><p>em,相对单位，相对于父元素，不常用<br><code>font-size的em是相对于父元素的</code><br><code>width 和 height 是相对于自身的font-size</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">body&#123;<br>	font-size:20px;<br><br>&#125;<br>div&#123;<br>	font-size:2em; &#x2F;&#x2F; font-size: 20*2 &#x3D; 40px<br>&#125;<br><br><br><br>body&#123;<br>	font-size:20px;<br><br>&#125;<br>div&#123;<br>	font-size:2em; &#x2F;&#x2F; font-size: 20*2 &#x3D; 40px<br>	width:1em;    &#x2F;&#x2F;40*1 &#x3D; 40px<br>	height:1em;   &#x2F;&#x2F;40*1 &#x3D; 40px<br>&#125;<br><br><br>body&#123;<br>	font-size:20px;<br><br>&#125;<br>div&#123;<br>	font-size:80px; <br>	width:1em;    &#x2F;&#x2F;80px<br>	height:1em;   &#x2F;&#x2F;80px<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>rem,相对长度单位，相对于根元素html的字体大小，常用于响应式布局</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">html&#123;<br>	font-size:100px<br>&#125;<br><br>body&#123;<br>	font-size:20px;<br><br>&#125;<br>div&#123;<br>	font-size:80px; <br>	width:1rem;    &#x2F;&#x2F;100px<br>	height:1rem;   &#x2F;&#x2F;100px<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<div style="text-align: center; color: red">
    <strong>animate和transition的区别</strong>

</div> 

<ul>
<li><p>transition: 用于做过渡效果，没有帧概念，只有开始和结束状态<br>性能开销较小，被动触发</p>
</li>
<li><p>animate: 用于做动画，有帧的概念，可以重复触发且有中间转态，<br>性能开销较大，主动触发</p>
</li>
</ul>
<hr>
<div style="text-align: center; color: red">
    <strong>使元素显示和隐藏的方式</strong>

</div> 

<ol>
<li>display:none</li>
</ol>
<ul>
<li>结构上：元素在页面上将彻底消失，元素不占据空间且无法触发事件</li>
<li>继承性：父元素上设置了display:none子元素无论怎么设置都无法显示</li>
<li>性能：会引起浏览器重绘重排，性能消耗较大</li>
</ul>
<ol start="2">
<li>opacity:0</li>
</ol>
<ul>
<li>结构上：元素在页面上消失，元素占据空间， 能点击触发事件</li>
<li>继承性：父元素上设置了opacity:0 子元素无论怎么设置都无法显示</li>
<li>性能：重建图层，性能消耗小</li>
</ul>
<ol start="3">
<li>visibility:hidden</li>
</ol>
<ul>
<li>结构上：元素在页面上消失，其占据的空间依旧会保留，不能点击触发事件</li>
<li>继承性：visibilty:hidden会被子元素继承,子元素可以通过设置visibilty:visible;来取消隐藏</li>
<li>性能：只会导致浏览器重绘重绘，性能消耗相对小</li>
</ul>
<ol start="4">
<li>设置height，width等盒模型属性为0</li>
</ol>
<ul>
<li>元素的margin，border，padding，height和width等影响元素盒模型的属性设置为0</li>
<li>如果元素内有子元素或者内容，还应该设置其overflow:hidden来隐藏其子元素 </li>
</ul>
<hr>
<div style="text-align: center; color: red">
    <strong>选择器的优先级</strong>

</div> 

<p>！important&gt;行内样式&gt;id选择器&gt;类选择器&gt;标签选择器&gt;通配符&gt;继承</p>
<p>权重算法：(0,0,0,0)—&gt;第一个0对应的是important的个数，第二个0对应的是id选择器的个数，<br>第三个0对应的是类选择器的个数，第四个0对应的是标签选择器的个数，合起来就是当前选择器的权重。</p>
<p>比较：先从第一个0开始比较，如果第一个0大，那么说明这个选择器的权重高，如果第一个相同，比较第二个，依次类推。</p>
<p>例如：（0,2,0,1）&gt;(0,1,2,2)</p>
<hr>
<div style="text-align: center; color: red">
    <strong>nth-child和nth-of-type的区别</strong>

</div> 

<ul>
<li>nth-child选择的是父元素的子元素，这个子元素并没有指定确切类型，同时满足两个条件时有效果<br>其一是子元素，其二是子元素刚好处于那个位置</li>
</ul>
<ul>
<li>nth-of-type选择的是某父元素的子元素，而这个子元素是指定类型</li>
</ul>
<p>第一个li的颜色是红色的，如果在第一个li前面加上一个p标签的话第一个li的颜色不会变红色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">  &lt;style&gt;<br>    li:nth-child(1) &#123;<br>      color: red;<br>    &#125;<br>  &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>  &lt;ul&gt;<br>  &#x2F;&#x2F;&lt;p&gt;&lt;&#x2F;p&gt;<br>    &lt;li&gt;1&lt;&#x2F;li&gt;<br>    &lt;li&gt;2&lt;&#x2F;li&gt;<br>    &lt;li&gt;3&lt;&#x2F;li&gt;<br>    &lt;li&gt;4&lt;&#x2F;li&gt;<br>    &lt;li&gt;5&lt;&#x2F;li&gt;<br>  &lt;&#x2F;ul&gt;<br><br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>

<p>第一个li的颜色变红色,会跳过p标签的检测</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">  &lt;style&gt;<br>    li:nth-of-type(1) &#123;<br>      color: red;<br>    &#125;<br>  &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>  &lt;ul&gt;<br>    &lt;p&gt;&lt;&#x2F;p&gt;<br>    &lt;li&gt;1&lt;&#x2F;li&gt;<br>    &lt;li&gt;2&lt;&#x2F;li&gt;<br>    &lt;li&gt;3&lt;&#x2F;li&gt;<br>    &lt;li&gt;4&lt;&#x2F;li&gt;<br>    &lt;li&gt;5&lt;&#x2F;li&gt;<br>  &lt;&#x2F;ul&gt;<br><br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>


<hr>
<div style="text-align: center; color: red">
    <strong>CSS Sprites是什么？它的优势和劣势</strong>

</div> 

<p>CSS Sprites是精灵图又称雪碧图</p>
<p>优势：</p>
<ol>
<li>很好的减少网页请求，大大提高页面的性能</li>
<li>减少图片的字节</li>
<li>解决了网页设计在图片命名的困扰</li>
<li>更换风格方便</li>
</ol>
<p>劣势：</p>
<ol>
<li>图片合并是需预留好足够空间，宽屏、高分辨率的屏幕下易出现背景断裂；</li>
<li>开发麻烦，测量繁琐；（可使用样式生成器）</li>
<li>维护麻烦，背景少许改动有可能影响整张图片，使得字节增加还要改动css</li>
</ol>
<hr>
<div style="text-align: center; color: red">
    <strong>什么是CssHack</strong>

</div> 

<p>区别不同浏览器制作不同css样式的设置就叫作CSS Hack</p>
<hr>
<div style="text-align: center; color: red">
    <strong>什么是CSS预处理器/后处理器？为什么要使用它</strong>

</div> 

<p>预处理器例如：LESS 、Sass 、Stylus ,用来预编译sass或less，增强了css代码的复用性，<br>还要层级、 mixin 、 变量 、循环 、函数等，具有很方便的UI组件模块化开发能力,极大的提高工作效率。</p>
<p>后处理器 例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；<br>目前最常做的是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题</p>
<hr>
<div style="text-align: center; color: red">
    <strong>浏览器内核</strong>

</div> 

<p>浏览器内核主要分成两部分：渲染引擎和JS引擎</p>
<p>渲染引擎：将代码转换成页面输出到浏览器界面</p>
<p>JS引擎：解析和执行JavaScript来实现网页的动态效果</p>
<p>最开始渲染引擎和JS引擎并没有区分得很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。<br>比如 webkit 值渲染引擎</p>
<p>五大浏览器</p>
<ul>
<li>Internet Explorer (IE)</li>
<li>FireFox(火狐)</li>
<li>Chrome(谷歌)</li>
<li>Opera(欧朋)</li>
<li>Safari(苹果)</li>
</ul>
<p>Tip(技巧)：<br>目前国内的浏览器大多都是双内核的(IE内核Chrome内核)</p>
<p>2)厂商前缀<br>IE: -ms-<br>Chrome&amp;Safari: -webkit-<br>FireFox: -moz-<br>Opera: -o-</p>
<hr>
<div style="text-align: center; color: red">
    <strong>描述下渐进增强和优雅降级</strong>

</div> 

<p>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，<br>然后再针对高级浏览器进行效果，交互等改进和追加功能，达到更好的用户体验。</p>
<p>优雅降级：一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容</p>
<hr>
<div style="text-align: center; color: red">
    <strong>CSS伪类和伪元素的区别</strong>

</div> 

<p>CSS中规定</p>
<ul>
<li>伪类由一个冒号开始，然后为伪类的名称；</li>
<li>伪元素由两个冒号开始，然后为伪元素的名称</li>
</ul>
<p>伪类：本质上是为了弥补常规CSS选择器的不足，以便获取到更多信息。<br>通常表示获取不存在与DOM树中的信息，或获取不能被常规CSS选择器获取的信息。</p>
<p>a:link  没有访问之前a的样式;<br>a:visited  已访问a的样式;<br>a:hover  鼠标移上的样式;<br>a:active 鼠标按下的样式;<br>input:focus 获取光标</p>
<p>css3新增伪类选择器</p>
<p>:not 排除</p>
<p>:last-child 最后一个子元素</p>
<p>:nth-child(n) n表示具体的第n个 odd/2n+1奇数 even/2n偶数  -n+2前两个 n+2 第二个开始</p>
<p>only-child 仅仅/唯一只有一个</p>
<p>nth-last-child倒数第n个元素</p>
<p>:first-of-type第一个同级兄弟元素</p>
<p>:last-of-type最后一个同级兄弟元素</p>
<p>:only-of-type只有一个同级兄弟元素</p>
<p>:nth-of-type(n)第n个同级兄弟元素</p>
<p>:nth-last-of-type(n)倒数第几个同级兄弟元素</p>
<p>:empty空内容</p>
<p>伪元素：本质上是创建了一个由内容的虚拟容器。这个容器不包括任何DOM元素，但是可以包含内容。<br>另外，开发者还可以为伪元素定制样式</p>
<p>::selection  选择的区域</p>
<p>::first-line / first-letter  第一行 / 第一个字母</p>
<p>::before / after  内容区域的前面 / 后面</p>
<p>区别：伪类添加的样式就是当前的标签，伪元素的样式并不是添加到标签身上，而是添加到创建出来的虚拟容器上面</p>
<hr>
<div style="text-align: center; color: red">
    <strong>重排和重绘</strong>

</div> 

<p>重排会重绘的区别：<br>重绘不一定需要重排（比如颜色的改变），重排必然导致重绘（比如改变网页位置）</p>
<p>重排(Reflow)：当渲染树的一部分必须更新并且节点的尺寸发生了变化，浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。</p>
<p>重绘(Repaint)：是在一个元素的外观被改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。比如改变某个元素的背景色、文字颜色、边框颜色等等</p>
<p>reflow(回流)：当浏览器发现某个部分发生了点变化影响了布局，需要倒回去重新渲染。<br>   内行称这个回退的过程叫 reflow</p>
<p>引发重排的方式</p>
<ol>
<li><p>添加、删除可见的dom</p>
</li>
<li><p>元素的位置改变</p>
</li>
<li><p>元素的尺寸改变(外边距、内边距、边框厚度、宽高、等几何属性)</p>
</li>
<li><p>页面渲染初始化</p>
</li>
<li><p>浏览器窗口尺寸改变</p>
</li>
<li><p>获取某些属性。当获取一些属性时，浏览器为取得正确的值也会触发重排,它会导致队列刷新，这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。所以，在多次使用这些值时应进行缓存。</p>
</li>
</ol>
<hr>
<div style="text-align: center; color: red">
    <strong>了解px、rpx、em、rem、%、vw、vh、vm的区别</strong>

</div> 

<ol>
<li><p>px<br>1）px就是pixel的缩写，意为像素。<br>2）px就是设备或者图片最小的一个点，比如常常听到的电脑像素是1024x768的，表示的是水平方向是1024个像素点，垂直方向是768个像素点。<br>3）px是我们网页设计常用的单位，也是基本单位。<br>4）通过px可以设置固定的布局或者元素大小。<br>5）缺点：没有弹性。</p>
</li>
<li><p>rpx<br>1）rpx 是微信小程序解决自适应屏幕尺寸的尺寸单位。<br>2）rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。<br>3）微信小程序规定屏幕的宽度为750rpx。<br>4）解释：例如宽度，相当于把屏幕宽度分为750份，1份就是1rpx。高度类似~</p>
</li>
</ol>
<ol start="3">
<li>em<br>1）参考物是父元素的font-size，具有继承的特点。<br>2）如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值。<br>3）特点是1. em的值并不是固定的； 2. em会继承父级元素的字体大小。<br>4）1em=1倍父元素font-size的值，2em=2倍父元素font-size的值，以此类推……</li>
</ol>
<ol start="4">
<li><p>rem<br>1）rem是相对于根元素html，这样就意味着，我们只需要在根元素确定一个参考值，可以设计HTML为大小为10px，到时设置1.2rem就是12px.以此类推。<br>2）优点是，只需要设置根目录的大小就可以把整个页面的成比例的调好</p>
</li>
<li><p>%<br>一般来说就是相对于父元素的：<br>1）对于普通定位元素就是我们理解的父元素<br>2）对于position: absolute;的元素是相对于已定位的父元素<br>3）对于position: fixed;的元素是相对于ViewPort（可视窗口），</p>
</li>
</ol>
<ol start="6">
<li><p>vw<br>1）css3新单位，view width的简写，是指可视窗口的宽度。假如宽度是1200px的话。那100vw就是1200px,10vm就是120px，以此类推……<br>2）举个例子：浏览器宽度1200px, 1 vw = 1200px/100 = 12 px。</p>
</li>
<li><p>vh<br>和vw相似<br>1）css3新单位，view height的简写，是指可视窗口的高度。假如高度是1200px的话。那100vh就是1200px，10vh就是120px，以此类推……<br>2）举个例子：浏览器高度900px, 1 vh = 900px/100 = 9 px。</p>
</li>
<li><p>vm<br>1）css3新单位，相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为100单位的vm 举个例子：浏览器高度2）2）900px，宽度1200px，取最小的浏览器高度，1 vm = 900px/100 = 9 px。<br>2）兼容性太差 ,不建议使用</p>
</li>
</ol>
<ol start="9">
<li>vw px rem之间的换算</li>
</ol>
<p>手机端我们假设设计稿是以750px宽度为标准的，那么:<br>100vw = 750px<br>1vw = 7.5px<br>我们想要： 1rem = 100px<br>1 vw = 7.5px = 1rem<br>x vw = 100px = 1rem<br>x = 100 / 7.5 = 13.33vw</p>
<p>100px = 100vw / 7.5 = 1rem<br>那么：<br>1rem = 13.33vw</p>
<hr>
<div style="text-align: center; color: red">
    <strong>什么是替换元素和非替换元素</strong>

</div> 

<p>替换元素：</p>
<p>替换元素是浏览器根据其标签的元素与属性来判断显示具体的内容。</p>
<p>比如：<code>&lt;input /&gt; type=&quot;text&quot;</code>的是，这是一个文本输入框，换一个其他的时候，浏览器显示就不一样</p>
<p>(X)HTML中的<code>&lt;img&gt;、&lt;input&gt;、&lt;textarea&gt;、&lt;select&gt;、&lt;object&gt;</code>都是替换元素，这些元素都没有实际的内容。</p>
<p>非替换元素：</p>
<p>(X)HTML 的大多数元素是不可替换元素，他们将内容直接告诉浏览器，将其显示出来。</p>
<p>比如<code>&lt;p&gt;wanmei.com&lt;/p&gt;</code></p>
<p>浏览器将把这段内容直接显示出来。</p>
<p>除了这两字，还有两种非常属性的元素，显示元素，他分为两种情况，一种是‘块及元素’ ‘block’，还有一种是“行内元素”inline，大家也叫“内联元素”。</p>
<hr>
<div style="text-align: center; color: red">
    <strong>清除浮动的方法</strong>

</div> 

<p>第一种：在浮动元素后面添加一个空标签 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">.clear&#123;<br>	clear:both<br>&#125;<br>&lt;div class&#x3D;&quot;clear&quot;&gt;&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure>
<p>第二种：给浮动元素的父盒子添加 overflow:hidden</p>
<p>第三种：在要清除浮动的父级添加伪类元素，并设定的样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">.clearfix::after&#123;<br>content: &quot;&quot;;<br>display:block;<br>clear:both;<br>&#125;<br>.clearfix&#123;<br>	*zoom:1;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>第四种：父级div定义height</p>
<hr>
<div style="text-align: center; color: red">
    <strong>双栏布局和三栏布局</strong>

<ol>
<li>利用flex两栏布局</li>
</ol>
</div> 




<hr>
<div style="text-align: center; color: red">
    <strong>CSS选择器</strong>

</div> 

<p>1) <code>*</code>: 匹配HTML中的所有元素（注意： <code>*</code>的性能差，因为它要匹配所有元素，所以在开发时，不建议使用）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>* &#123;<br>	color: red;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>2)标签选择器:用来匹配对应的标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>span &#123;<br>	font-size:12px;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>3)类选择器:用来选择class命名的标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>.box&#123;<br>	color:skyblue<br>&#125;<br></code></pre></td></tr></table></figure>
<p>4）ID选择器:用来选择用id命名的标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>#content &#123;<br>	align:center;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>5）派出选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>.content p &#123;<br>	display: inline-block;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>6）伪类选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">:hover<br>:focus<br></code></pre></td></tr></table></figure>
<p>7) 伪元素选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">::after<br>::before<br></code></pre></td></tr></table></figure>
<p>8) 属性选择器</p>
<p>属性选择器<br>[属性名]：包含有指定属性名的元素(常用)<br>[属性名=值]：属性名的值为指定值得元素(常用)<br>[属性名<code>~</code>=值]：属性名的值包含指定值得元素<br>[属性名^=值]：属性名的值以指定值的开头的元素<br>[属性名$=值]：属性名的值以指定值得结尾的元素</p>
<hr>
<div style="text-align: center; color: red">
    <strong>CSS过渡和动画的区别</strong>

</div> 

<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">触发条件</th>
<th align="left">状态</th>
<th align="left">CSS属性</th>
<th align="left">遍历循环</th>
<th align="left">JS结合使用</th>
<th align="left">子属性</th>
</tr>
</thead>
<tbody><tr>
<td align="left">transition</td>
<td align="left">需要</td>
<td align="left">2中</td>
<td align="left">不可修改</td>
<td align="left">无法</td>
<td align="left">易于</td>
<td align="left">少</td>
</tr>
<tr>
<td align="left">animation</td>
<td align="left">无需</td>
<td align="left">无限制</td>
<td align="left">可修改</td>
<td align="left">运行</td>
<td align="left">不易于</td>
<td align="left">多</td>
</tr>
</tbody></table>
<hr>
<div style="text-align: center; color: red">
    <strong>meta标签</strong>

</div> 

<p><strong>meta标签常用属性</strong></p>
<p>Keywords（关键词）</p>
<p>页面关键词，每个网页应具有描述该网页内容的一组唯一的关键字。<br>使用人们可能会搜索，并准确描述网页上所提供信息的描述性和代表性关键字及短语。标记内容太短，则搜索引擎可能不会认为这些内容相关。另外标记不应超过 874 个字符。</p>
<p><code>&lt;meta name=&quot;keywords&quot; content=&quot;your tags&quot; /&gt;</code> </p>
<p>Description(网页描述)<br>页面描述，每个网页都应有一个不超过 150 个字符且能准确反映网页内容的描述标签  </p>
<p><code>&lt;meta name=&quot;description&quot; content=&quot;150 words&quot; /&gt;</code></p>
<p>Viewport(移动端布局)<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0,maximum-scale=1.0,
  minimum-scale=1.0,user-scalable=no&quot;&gt;</code></p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">解释说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">width</td>
<td align="left">宽度设置的是viewport宽度，可以设置device-width特殊值</td>
</tr>
<tr>
<td align="left">initial-scale</td>
<td align="left">初始缩放比，大于0的数字</td>
</tr>
<tr>
<td align="left">maximum-scale</td>
<td align="left">最大缩放比，大于0的数字</td>
</tr>
<tr>
<td align="left">minimum-scale</td>
<td align="left">最小缩放比，大于0的数字</td>
</tr>
<tr>
<td align="left">user-scalable</td>
<td align="left">用户是否可以缩放，yes或no(1或0)</td>
</tr>
</tbody></table>
<hr>
</div>


</div>

]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>HTMLandCSS的面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的if语句括号里面的判断</title>
    <url>/2021/ckpf35kl4001njov40baegvjz/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的if语句括号里面的判断</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的if语句括号里面的判断
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>JS里的if语句括号里面的判断</strong>

</div>

<p>关于if语句里面的判断true还是false</p>
<p>if (0) 表示时false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  if (0) &#123;<br>    console.log(11);<br>  &#125;<br>  console.log(222);<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>
<p>打印的是 222</p>
<hr>
<p>if (null) 表示时false<br>null在JS里面表示 object 除了自身之外不等于任何值， 和undefined类似</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  if (null) &#123;<br>    console.log(11);<br>  &#125;<br>  console.log(222);<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>
<p>打印的是 222</p>
<hr>
<p>if (false) 表示时false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  if (false) &#123;<br>    console.log(11);<br>  &#125;<br>  console.log(222);<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>
<p>打印的是 222</p>
<hr>
<p>if (‘’) 表示时false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  if (&#39;&#39;) &#123;<br>    console.log(11);<br>  &#125;<br>  console.log(222);<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>
<p>打印的是 222<br>需要注意的是 if (‘ ‘) 表示时true</p>
<hr>
<p>if (isNAN()) 表示时false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  var a &#x3D; 1<br>  if (isNaN(a)) &#123;<br>    console.log(11);<br>  &#125;<br>  console.log(222);<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>
<p>打印的是 222</p>
<hr>
<p>if (undefined) 表示时false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>   if (undefined) &#123;<br>      console.log(111);<br>    &#125; else &#123;<br>      console.log(222);<br>    &#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>
<p>打印的是 222</p>
</p>
</div>
]]></content>
      <categories>
        <category>JS的细解</category>
      </categories>
      <tags>
        <tag>JS里的if语句括号里面的判断</tag>
      </tags>
  </entry>
  <entry>
    <title>最近的计划安排</title>
    <url>/2021/ckpf35ksa0092jov4547h7tjj/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">最近的计划安排</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
最近的计划安排
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>最近的计划安排</strong>

</div>


<p style="text-indent: 0;font-weight: 700;">


<p>这个月：只有一个任务：学习HTML 和css的面试题<br>自身简历的填写</p>
</p>

<p style="text-indent: 0;font-weight: 700;">
    1. 个人简历的安排（1.27完成）<br>
    2. JS的复习（10天，外加面试题）<br>
    3. flex布局的项目完成(一天时间之内完成)<br>
    4. 去哪儿项目的总结。<br>
    5. 卖座电影的项目总结。<br>
    6. 网页界面的书写
    7. ES6的学习


</p>







</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong></strong>

</div>

</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong></strong>

</div>

</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong></strong>

</div>

</p>





</div>
]]></content>
      <categories>
        <category>学习安排</category>
      </categories>
      <tags>
        <tag>最近的计划安排</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的try-catch的使用（简单用法）</title>
    <url>/2021/ckpf35klb001vjov46oci3lqw/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">js里的try-catch的使用（简单用法）</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
c#中异常捕获，用来处理可能程序会发生的错误函数。
</div>



</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">


<p><strong></strong></p>
<p>语法：</p>
<p>try</p>
<p>{</p>
<p>有可能出现错误的代码写在这里</p>
<p>}</p>
<p>catch</p>
<p>{</p>
<p>出错后的处理</p>
<p>}</p>
<p>Tip: 如果try中的代码没有出错，则程序正常运行try中的内容后，不会执行catch中的内容，</p>
<p>如果try中的代码一但出错，程序立即跳入catch中去执行代码，那么try中出错代码后的所有代码就不再执行了.</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

</div>]]></content>
      <categories>
        <category>JS的细解</category>
      </categories>
      <tags>
        <tag>JS里的try-catch的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中的for in , for of 和forEach</title>
    <url>/2021/ckpf35kkk0015jov48n2hbvbc/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS中的for in , for of 和forEach</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS中的for in , for of 和forEach
</div>



</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">


<p><strong>for…in…的作用</strong></p>
<ul>
<li>可枚举对象<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const person &#x3D; &#123;<br>  name: &#39;Lydia&#39;,<br>  age: 21,<br>&#125;;<br></code></pre></td></tr></table></figure>

</li>
</ul>
<p>for (const item in person) {<br>console.log(item);<br>}</p>
<p>这个输出结果是： name age</p>
<p>对于这个结果可以简单理解为，对于对象object，使用for…in…循环是对对象的key值进行循环。</p>
<p>Tip: </p>
<ul>
<li>for…of…不能对对象进行循环</li>
<li>forEach不能对对象进行遍历</p>

</li>
</ul>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<ul>
<li>可枚举数组<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const arr &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]<br></code></pre></td></tr></table></figure>

</li>
</ul>
<p>for (const item in arr) {<br>console.log(item);  // 打印 string 类型的索引值<br>console.log(arr[item]);<br>}</p>
<p>这个输出结果为 0 ‘a’ 1 ‘b’ 2 ‘c’</p>
<p>这个结果看出使用for…in…是输出索引值，通过索引值能拿到数组数据，但是for in 会影响<br>原型链上添加的方法的。</p>
<hr>
<p><strong>for…of…</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const arr &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]<br></code></pre></td></tr></table></figure>

<p>for (const item of arr) {<br>console.log(item);<br>}</p>
<p>这个输出结果为 ‘a’ ‘b’ ‘c’</p>
<p>这个结果看出使用for…of…是输出数组值</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>forEach的作用</strong></p>
<ul>
<li>可遍历数组</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var myArray &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;];<br></code></pre></td></tr></table></figure>

<p>myArray.forEach((value,index) =&gt; {<br>console.log(value)<br>console.log(index)<br>})</p>
<p>输出的结果是 ‘a’ 0 ‘b’ 1 ‘c’ 2</p>
<p>使用forEach可以输出索引值和数组值，而且不会输出数组的原型对象。</p>
<p><strong>forEach有个问题就是不能中断执行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var arr &#x3D; [3, 5, 7];<br></code></pre></td></tr></table></figure>

<p>arr.forEach(function (value) {<br>console.log(value);<br>if (value === 5) {<br>return false;<br>}<br>});</p>
<p>输出的结果是 3 5 7</p>
<p>从结果可以看出，return false没有执行，它会一直运行到底</p>
<p>for in 也同样存在这个问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var arr &#x3D; [3, 5, 7];<br></code></pre></td></tr></table></figure>

<p>for (let value in arr) {<br>console.log(arr[value]);<br>if (value == 5) {<br>break;<br>}<br>}</p>
<p>输出的结果是 3 5 7</p>
<p>从结果可以看出，break没有执行，它会一直运行到底</p>
<hr>
<p><strong>for…of…的作用</strong></p>
<ul>
<li>可遍历数组<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var myArray &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;];<br></code></pre></td></tr></table></figure>
for(let index of myArray) {<br>console.log(index)<br>}</li>
</ul>
<p>输出结果是 a b c</p>
<p>使用for of无法输出索引值，但也不会输出数组的原型对象。</p>
<ul>
<li>for…of…可中断<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var arr &#x3D; [3, 5, 7];<br></code></pre></td></tr></table></figure>
for (let value of arr) {<br>console.log(value);<br>if (value == 5) {<br>break;<br>}<br>}</li>
</ul>
<p>输出结果是 3 5</p>
<p>结果可以看出，break执行了，可以中断循环</p>
<ul>
<li>可迭代字符串</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">let str &#x3D; &#39;hello&#39;;<br></code></pre></td></tr></table></figure>

<p>for (let value of str) {<br>console.log(value);<br>}</p>
<p>输出结果是 ‘h’ ‘e’ ‘l’ ‘l’ ‘o’</p>
<hr>
<p><strong>总结</strong></p>
<p><code>for in 适用于纯对象的遍历，并且只能输出可枚举属性</code></p>
<p><code>forEach适用于需要知道索引值的数组遍历，但是不能中断</code></p>
<p><code>for of适用于无需知道索引值的数组遍历，因为可以中断。另外对于其他字符串，类数``组，类型数组的迭代，for of也更适用</code></p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

</div>]]></content>
      <categories>
        <category>JS的细解</category>
      </categories>
      <tags>
        <tag>JS中的for in , for of 和forEach</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS中box-sizing border-box用法解析</title>
    <url>/2021/ckpf35kj90005jov466wx64y9/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CSS中在定位里面 left 和 right 等于零的使用</title>
    <url>/2021/ckpf35kjf0008jov4h5nya844/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">CSS中在定位里面 left 和 right 等于零的使用</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
CSS中在定位里面 left 和 right 等于零的使用
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS中在定位里面 left 和 right 等于零的使用</strong>

</div>

<p>想把  热门景点 放在背景图居中的位置，使用了 text-align :center 是无效的<br>如图所示</p>
<img src="/image/cssDetailed/03.png">





<p>在子绝父相的定位中的居中显示 使用了 text-align :center 还需要加 left 0 ; right 0;<br>如图所示</p>
<img src="/image/cssDetailed/04.png">


<p>注意：<strong style="color: red">text-align :center 和 left 0 ; right 0; 都需要加上的</strong></p>
</p>
</div>
]]></content>
      <categories>
        <category>CSS的细解</category>
      </categories>
      <tags>
        <tag>CSS中在定位里面 left 和 right 等于零的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的MVVM</title>
    <url>/2021/ckpf35kop004zjov42lc218n0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>单页面与多页面的对比使用</title>
    <url>/2021/ckpf35krb0080jov4b0dcawqk/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">单页面与多页面的对比使用</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
单页面与多页面的对比使用
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>多页面的应用</strong>

</div>

<ul>
<li>优点：首屏时间快，SEO效果好：</li>
<li>缺点：页面切换慢：每一个切换页面都需要发一个http请求</li>
</ul>
<p>页面跳转 -&gt; 返回html<br>首屏展示需要请求一个html,首屏会显示出来<br>SEO引擎只识别html</p>
<hr>
<div style="text-align: center; color: red">
    <strong>单页面的应用</strong>

</div>

<ul>
<li>优点：页面切换快</li>
<li>缺点：首屏时间稍慢，SEO效果差</li>
</ul>
<p>页面跳转 -&gt; JS渲染(js感知url的变化，来切换页面)</p>
<p>SEO引擎只识别html<br>单页面都是靠js渲染出来的<br>首屏展示需要发一个 jS请求，还需要请求一个html,首屏才会显示出来</p>
<p>vue 可以提供服务端渲染返回html的内容来解决这个问题</p>
</p>



</div>
</div>]]></content>
      <categories>
        <category>SEO排名</category>
      </categories>
      <tags>
        <tag>单页面与多页面的对比使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的vue-router</title>
    <url>/2021/ckpf35kpm005zjov4g0wccj4n/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Vue中的vuex的使用</title>
    <url>/2021/ckpf35kpo0062jov4gs3scb4m/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Vue中的mixin抽离公共逻辑</title>
    <url>/2021/ckpf35kp9005ijov4a9dwgj23/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中的mixin抽离公共逻辑</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中的mixin抽离公共逻辑
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue中的mixin抽离公共逻辑</strong>
</div>


<p>父组件引入子组件的代码<br><img src="/image/vueDetailed/24.png"></p>
<p>子组件的代码<br><img src="/image/vueDetailed/26.png"></p>
<p>mixin.js的代码<br><img src="/image/vueDetailed/25.png"></p>
<p>效果展示图中可以看出city 的属性是来自于mixin.js文件里面的公共逻辑<br><img src="/image/vueDetailed/27.png"></p>
<div style="text-align: center; color: red">
    <strong>Vue中的mixin的缺点</strong>
</div>

<ul>
<li>变量来源不明确，不利于阅读</li>
<li>多mixin 可能 会造成命名冲突</li>
<li>mixin和组件可能出现多对多的关系，复杂度较高。</li>
</ul>
<p>需要注意的是: 主文件的变量引用的优先级会高于mixin的优先级。</p>
<div style="text-align: center; color: red">
    <strong>Vue 3 提出的Composition API解决缺点</strong>
</div>



</div>




</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中的mixin抽离公共逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的异步组件的使用</title>
    <url>/2021/ckpf35kpw006cjov42fn0gbud/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中的异步组件的使用</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中的异步组件的使用
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue中的异步组件的使用</strong>

</div>

<p>异步组件的作用就是什么时候用就什么时候来取。</p>
<ul>
<li>import()函数</li>
<li>按需加载，异步加载大组件</li>
</ul>
<p>效果图<br><img src="/image/vueDetailed/12.gif"></p>
<p>代码展示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    父组件<br>    &lt;!-- 异步组件 --&gt;<br>    &lt;FormDemo v-if&#x3D;&quot;showFormDemo&quot; &#x2F;&gt;<br>    &lt;button @click&#x3D;&quot;showFormDemo &#x3D; true&quot;&gt;show form demo&lt;&#x2F;button&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>     <br>      showFormDemo: false<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>   <br>    FormDemo: () &#x3D;&gt; &#123;<br>      return import(&#39;.&#x2F;FormDemo&#39;)<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>  <br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style scoped&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>

</div>





















</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中的异步组件的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的动态组件的使用</title>
    <url>/2021/ckpf35kpr0065jov4c44x3mta/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中的动态组件的使用</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中的动态组件的使用
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue中的动态组件的使用</strong>

</div>

<ul>
<li>:is = “component-name” 用法</li>
<li>需要根据数据，动态渲染的场景。即组件类型不确定</li>
</ul>
<p>点击li 切换不同的组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    父组件   <br>    &lt;component :is&#x3D;&quot;who&quot;&gt;&lt;&#x2F;component&gt;<br>    &lt;ul&gt;<br>      &lt;li @click&#x3D;&quot;who &#x3D; &#39;Footer&#39;&quot;&gt;FooterName&lt;&#x2F;li&gt;<br>      &lt;li @click&#x3D;&quot;who &#x3D; &#39;Header&#39;&quot;&gt;HeaderName&lt;&#x2F;li&gt;<br>    &lt;&#x2F;ul&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>import Header from &#39;.&#x2F;Header&#39;<br>import Footer from &#39;.&#x2F;Footer&#39;<br><br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>      who: &#39;Footer&#39;<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    Header,<br>    Footer,<br>  &#125;,<br>  methods: &#123;<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style scoped&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>








</div>






</div>


]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中的动态组件的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的slot</title>
    <url>/2021/ckpf35kpb005kjov4dka70lzz/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中的slot</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中的slot
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">

<div style="text-align: center; color: red">
    <strong>Vue中的slot</strong>

</div>

<ol>
<li><strong>显示slot插槽默认的内容</strong></li>
</ol>
<p>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    父组件<br>    &lt;div&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;div&gt;<br>    &lt;Header v-model&#x3D;&quot;name&quot;&gt;&lt;&#x2F;Header&gt;<br>    &lt;Footer&gt; &lt;&#x2F;Footer&gt;<br>   <br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>import Header from &#39;.&#x2F;Header&#39;<br>import Footer from &#39;.&#x2F;Footer&#39;<br><br>export default &#123;<br>  data () &#123;<br>    return &#123;<br><br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    Header,<br>    Footer<br><br>  &#125;,<br>  methods: &#123;<br><br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style scoped&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    Footer<br>    &lt;slot&gt;<br>      这是默认显示的内容<br>    &lt;&#x2F;slot&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data () &#123;<br>    return &#123;&#125;<br>  &#125;,<br>  mounted () &#123;&#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>

<img src="/image/vueDetailed/28.png">


<ol start="2">
<li><strong>显示slot插槽里的内容</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    父组件<br>    &lt;div&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;div&gt;<br>    &lt;Header v-model&#x3D;&quot;name&quot;&gt;&lt;&#x2F;Header&gt;<br>    &lt;Footer&gt;&#123;&#123;name&#125;&#125; &lt;&#x2F;Footer&gt;<br>   <br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>import Header from &#39;.&#x2F;Header&#39;<br>import Footer from &#39;.&#x2F;Footer&#39;<br><br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>    name: &#39;双越&#39;<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    Header,<br>    Footer<br><br>  &#125;,<br>  methods: &#123;<br><br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style scoped&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    Footer<br>    &lt;slot&gt;<br>      这是默认显示的内容<br>    &lt;&#x2F;slot&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data () &#123;<br>    return &#123;&#125;<br>  &#125;,<br>  mounted () &#123;&#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>

<img src="/image/vueDetailed/29.png">


</p>



<div style="text-align: center; color: red">
    <strong>Vue中的slot(作用域插槽)</strong>

</div>

<p>
把子组件的data里面的数据，通过作用域插槽传递到父组件里面


<p>父组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    父组件<br>    &lt;div&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;div&gt;<br>    &lt;Header v-model&#x3D;&quot;name&quot;&gt;&lt;&#x2F;Header&gt;<br><br>    &lt;Footer&gt;<br>      &lt;template v-slot&#x3D;&quot;slotProps&quot;&gt;<br>        &#123;&#123; slotProps.slotData.subTitle &#125;&#125;<br>      &lt;&#x2F;template&gt;<br>    &lt;&#x2F;Footer&gt;<br><br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>import Header from &#39;.&#x2F;Header&#39;<br>import Footer from &#39;.&#x2F;Footer&#39;<br><br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>      name: &#39;双越&#39;,<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    Header,<br>    Footer<br><br>  &#125;,<br>  methods: &#123;<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style scoped&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>
<p>子组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    Footer<br>      &lt;slot :slotData&#x3D;&quot;website&quot;&gt;<br>        &#123;&#123; website.subTitle &#125;&#125;<br>      &lt;&#x2F;slot&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>      website: &#123;<br>        url: &#39;http:&#x2F;&#x2F;wangEditor.com&#x2F;&#39;,<br>        title: &#39;wangEditor&#39;,<br>        subTitle: &#39;轻量级&#39;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  mounted () &#123;&#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>

<img src="/image/vueDetailed/30.png">    

</p>




<hr>
<div style="text-align: center; color: red">
    <strong>Vue中的slot(具名插槽)</strong>

</div>

<p>

<img src="/image/vueDetailed/31.png">    


<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    父组件<br>    &lt;div&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;div&gt;<br>    &lt;Header v-model&#x3D;&quot;name&quot;&gt;&lt;&#x2F;Header&gt;<br><br>    &lt;Footer&gt;<br><br>      &lt;template v-slot:head&gt;<br>        &lt;h1&gt;头部的内容&lt;&#x2F;h1&gt;<br>      &lt;&#x2F;template&gt;<br><br>      &lt;p&gt;未命名的插槽&lt;&#x2F;p&gt;<br><br>      &lt;template v-slot:foot&gt;<br>        &lt;h1&gt;尾部的插槽&lt;&#x2F;h1&gt;<br>      &lt;&#x2F;template&gt;<br>      <br>    &lt;&#x2F;Footer&gt;<br> <br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>import Header from &#39;.&#x2F;Header&#39;<br>import Footer from &#39;.&#x2F;Footer&#39;<br><br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>      name: &#39;双越&#39;<br><br>   <br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    Header,<br>    Footer<br> <br>  &#125;,<br>  methods: &#123;<br>   <br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style scoped&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    Footer<br>    &lt;slot name&#x3D;&quot;foot&quot;&gt; &lt;&#x2F;slot&gt;<br>    &lt;slot name&#x3D;&quot;head&quot;&gt; &lt;&#x2F;slot&gt;<br>    &lt;slot&gt; &lt;&#x2F;slot&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;&#125;;<br>  &#125;,<br>  mounted() &#123;&#125;<br>&#125;;<br>&lt;&#x2F;script&gt;<br><br>&lt;style&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>


</p>



</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中的slot</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的父子组件的v-model实现</title>
    <url>/2021/ckpf35kpx006ejov442c528gg/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中的父子组件的v-model实现</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中的父子组件的v-model实现
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue中的父子组件的v-model实现</strong>

</div>

<ol>
<li><p>父组件代码如图所示</p>
<img src="/image/vueDetailed/22.png">
</li>
<li><p>子组件的定义代码</p>
<img src="/image/vueDetailed/23.png">
</li>
<li><p>效果图</p>
</li>
</ol>
<img src="/image/vueDetailed/09.gif">


</div>




</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中的父子组件的v-model实现</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的生命周期</title>
    <url>/2021/ckpf35kpy006hjov495cg4x8r/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中的生命周期</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中的生命周期
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue中的生命周期</strong>

</div>

<p>首先我们看这个图解<br><img src="/image/vueDetailed/20.png"></p>
<p>所有的生命周期钩子自动绑定 this 上下文到实例中，因此你可以访问数据，对 property 和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 created: () =&gt; this.fetchTodos())。这是因为箭头函数绑定了父上下文，因此 this 与你期待的 Vue 实例不同，this.fetchTodos 的行为未定义。</p>
<p>分为三个阶段</p>
<p><strong style="color: red">挂载阶段</strong></p>
<p style="text-indent:2em">
beforeCreate:整个页面创建之前调用的生命周期
类型：Function

<p>详细：<br>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p>
</p>

<p style="text-indent:2em">
created
类型：Function

<p>详细<br>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，property 和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el property 目前尚不可用。</p>
</p>

<p style="text-indent:2em">
beforeMount
类型：Function

<p>详细：<br>在挂载开始之前被调用：相关的 render 函数首次被调用。<br>该钩子在服务器端渲染期间不被调用。</p>
</p>

<p style="text-indent:2em">
mounted
类型：Function

<p>详细：<br>实例被挂载后调用，这时 el 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。<br>注意 mounted 不会保证所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，<code>可以在 mounted 内部使用 vm.$nextTick：</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">mounted: function () &#123;<br>  this.$nextTick(function () &#123;<br>    &#x2F;&#x2F; Code that will run only after the<br>    &#x2F;&#x2F; entire view has been rendered<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>该钩子在服务器端渲染期间不被调用。</p>
<strong style="color: blue">
create和mounted的区别：
create 页面还没渲染 但是vue实例初始化完成了。
mounted 页面已经渲染完成了。
</strong>
</p>

<hr>
<p><strong style="color: red">更新阶段</strong></p>
<p style="text-indent:2em">
beforeUpdate
类型：Function

<p>详细：<br>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。<br>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</p>
</p>

<p style="text-indent:2em">
updated
类型：Function

<p>详细：<br>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<br>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。<br>注意 updated 不会保证所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以在 updated 里使用 vm.$nextTick：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">updated: function () &#123;<br>  this.$nextTick(function () &#123;<br>    &#x2F;&#x2F; Code that will run only after the<br>    &#x2F;&#x2F; entire view has been re-rendered<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>该钩子在服务器端渲染期间不被调用。</p>
</p>

<hr>
<p><strong style="color: red">销毁阶段</strong></p>
<p style="text-indent:2em">
beforeDestroy
类型：Function

<p>详细：<br>实例销毁之前调用。在这一步，实例仍然完全可用。<br>该钩子在服务器端渲染期间不被调用。</p>
</p>

<p style="text-indent:2em">
destroyed
类型：Function

<p>详细：<br>实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。<br>该钩子在服务器端渲染期间不被调用。</p>
</p>

<hr>
<div style="text-align: center; color: red">
    <strong>Vue中组件的生命周期</strong>

</div>

<ol>
<li>父子组件挂载阶段的渲染先后顺序</li>
</ol>
<p>加载渲染过程<br>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p>
<p>加一点个人理解: 子组件被包裹在父组件的里面的。<br>所有：先父组件进行创建：beforeCreate create beforeMount<br>对于父组件的mounted是要特别注意的，假如父组件比子组件要先mounted的话，那么表示页面已经被渲染了，就不会去管子组件的mounted了，所有子组件的mounted一定会比父组件的要早。</p>
<ol start="2">
<li>父子组件更新阶段的渲染先后顺序</li>
</ol>
<p>更新过程<br>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</p>
<p>个人理解：子组件被包裹在父组件的里面的。<br>更新数据的话也是由里到内，但是如果父组件要是比子组件更新完成要早的，那么子组件的数据是没有更新的时间的额，因为父组件更新完就会页面渲染的。</p>
<ol start="3">
<li>父子组件销毁的过程</li>
</ol>
<p>父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</p>
<p>个人理解同上所得。</p>
<p>以上的父子组件的更新顺序其实很好理解的。<br>这个图解很详细的解释了我要表达的东西，真的是一个天才。</p>
<img src="/image/vueDetailed/21.png">


</div>
</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中的生命周期</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的兄弟组件之间的传值</title>
    <url>/2021/ckpf35kpi005tjov42e4vgk6b/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中的兄弟组件之间的传值</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中的兄弟组件之间的传值
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue中的兄弟组件之间的传值</strong>

</div>

<p>兄弟组件之间的传值</p>
<p>通过一个中转(bus)</p>
<p>A兄弟传值<br>import bus from ‘@/common/bus’<br>bus.$emit(“go”,this.msg)</p>
<p>B兄弟接收<br>import bus from ‘@/common/bus’<br>bus.$on(“go”,(data)=&gt;{<br>    this.msg = data<br>})</p>
<p>A组件代码<br><img src="/image/vueDetailed/10.png"></p>
<p>B组件代码<br><img src="/image/vueDetailed/11.png"></p>
<p>效果图<br><img src="/image/vueDetailed/04.gif"></p>
</p>



</div>
</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中的兄弟组件之间的传值</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的子组件传值到父组件</title>
    <url>/2021/ckpf35kpv0069jov4a5no8pyr/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中的子组件传值到父组件</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中的子组件传值到父组件
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue中的子组件传值到父组件</strong>

</div>

<p>子组件:<br>this.$emit(“自定义事件”,要传递的数据)</p>
<p>父组件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;Header @datalist&#x3D;&quot;getData&quot;&gt;&lt;&#x2F;Header&gt;<br>  <br>  methods: &#123;<br>    getData (msg) &#123;<br>      this.datalist &#x3D; msg<br>    &#125;<br>  &#125;<br>&#96;<br></code></pre></td></tr></table></figure>

<p>子组件代码<br><img src="/image/vueDetailed/08.png"></p>
<p>父组件代码<br><img src="/image/vueDetailed/09.png"></p>
<p>效果图<br><img src="/image/vueDetailed/03.gif"></p>
</p>



</div>
</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中的子组件传值到父组件</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的父组件传值到子组件</title>
    <url>/2021/ckpf35kpu0068jov4ev0lcrd9/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中的父组件传值到子组件</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中的父组件传值到子组件
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue中的父组件传值到子组件</strong>

</div>

<p>父组件:<br><code>&lt;Header :msg=&#39;msg&#39;&gt;&lt;/Header&gt;</code></p>
<p>子组件:<br>   props:[‘msg’]<br>   props:{<br>   msg:数据类型<br>}</p>
<p>父组件代码<br><img src="/image/vueDetailed/05.png"></p>
<p>子组件代码<br><img src="/image/vueDetailed/06.png"></p>
<p>效果图<br><img src="/image/vueDetailed/07.png"></p>
<p>代码分析：</p>
<p>父组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;父组件 &#123;&#123;msg&#125;&#125;<br>    &lt;Header :msg &#x3D; &#39;msg&#39;&gt;&lt;&#x2F;Header&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>import Header from &#39;.&#x2F;Header&#39;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>      msg: &#39;这是数据&#39;<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    Header<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

<p>子组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;子组件<br>    &#123;&#123;msg&#125;&#125;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  &#x2F;&#x2F; props: [&#39;msg&#39;]<br>  props: &#123;<br>    msg: String<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br>&lt;style&gt;<br>&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>

<ol>
<li><p>首先在父组件引入子组件进来</p>
</li>
<li><p>在父组件中定义一个属于父组件的数据</p>
</li>
<li><p>把父组件的数据传到父组件中的子组件的上面 <code>&lt;Header :msg = &#39;msg&#39;&gt;&lt;/Header&gt;</code></p>
</li>
<li><p>在子组件的自身里面用props属性接收父组件传过来的值<code>props: [&#39;msg&#39;]</code>或者<br><code>props: {msg: String}</code></p>
</li>
<li><p>在子组件里面使用这个从父组件里面传过来的msg数据<code>&lt;div&gt;子组件msg&lt;/div&gt;</code></p>
</li>
</ol>
</p>



</div>
</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中的父组件传值到子组件</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中项目打包之前的处理</title>
    <url>/2021/ckpf35kq1006njov42qkodsp3/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中项目打包之前的处理</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中项目打包之前的处理
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue中项目打包之前的处理</strong>

</div>

<p>在打包之前:</p>
<ol>
<li>修改代理的url</li>
<li>build<br>assetsPublicPatg: ‘./‘</li>
</ol>
<p>打包之后会生成：<br>一个js文件，一个css文件，还有一个index.html</p>
<p>学习于 <a href="https://www.cnblogs.com/SpringAndMoon/p/13807139.html" target="_blank" rel="noopener">https://www.cnblogs.com/SpringAndMoon/p/13807139.html</a>    </p>
</p>



</div>
</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中项目打包之前的处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的watch和computed的差异</title>
    <url>/2021/ckpf35kpk005wjov406lp3sr7/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中的watch和computed的差异</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中的watch和computed的差异
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue中的watch和computed的差异</strong>

</div>



<p><strong>computed ： 计算属性</strong></p>
<p style="text-indent: 2em">
    　　计算属性基于 data 中声明过或者父组件传递的 props 中的数据通过计算得到的一个新值，这个新值只会根据已知值的变化而变化，简言之：这个属性依赖其他属性，由其他属性计算而来的。
</p>

<img src="/image/VueComputedWatch/01.png">

<p>在 computed 属性对象中定义计算属性的方法，和取data对象里的数据属性一样以属性访问的形式调用，即在页面中使用  来显示计算的结果。</p>
<p><code>注：计算属性 fullName 不能在 data 中定义，而计算属性值的相关已知值在data中；</code><br><code>如果 fullName 在 data 中定义了会报错如下图：</code><br>如果 <code>computed 属性值是一个函数</code>，那么<code>默认会走get方法</code>，<code>必须要有一个返回值</code>，函数的返回值就是属性的属性值。计算属性定义了 fullName 并返回对应的结果给这个变量，变量不可被重复定义和赋值。</p>
<p>在官方文档中，还强调了 computed 一个重要的特点，就是 computed 带有缓存功能。<br>打印结果如图所示:<br><img src="/image/VueComputedWatch/02.png"></p>
<p style="text-indent: 2em">
    我们知道 computed 内定义的 function 只执行一次，仅当初始化显示或者相关的 data、props 等属性数据发生变化的时候调用；
而 computed 属性值默认会缓存计算结果，计算属性是基于它们的响应式依赖进行缓存的；
只有当 computed 属性被使用后，才会执行 computed 的代码，在重复的调用中，只要依赖数据不变，直接取缓存中的计算结果。只有依赖型数据发生改变，computed 才会重新计算。
</p>

<p style="text-indent: 2em">
    计算属性的高级：
　　在computed 中的属性都有一个 get 和一个 set 方法，当数据变化时，调用 set 方法。下面我们通过计算属性的 getter/setter 方法来实现对属性数据的显示和监视，即双向绑定

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">computed: &#123;<br>    fullName: &#123;<br>        get() &#123; &#x2F;&#x2F;读取当前属性值的回调，根据相关的数据计算并返回当前属性的值<br>            return this.firstName + &#39; &#39; + this.lastName<br>        &#125;,<br>        set(val) &#123; &#x2F;&#x2F; 当属性值发生改变时回调，更新相关的属性数据，val就是fullName的最新属性值<br>            const names &#x3D; val ? val.split(&#39; &#39;) : [];<br>            this.firstName &#x3D; names[0]<br>            this.lastName &#x3D; names[1]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<img src="/image/VueComputedWatch/01.gif">

<p>从代码分析这个也就不难理解了为什么会出错。</p>
</p>

<hr>
<p><strong>watch 监听属性:</strong></p>
<p style="text-indent: 2em">
　　通过 vm 对象的 $watch() 或 watch 配置来监听 Vue 实例上的属性变化，或某些特定数据的变化，然后执行某些具体的业务逻辑操作。当属性变化时，回调函数自动调用，在函数内部进行计算。其可以监听的数据来源：data，props，computed 内的数据。
</p>

<p>

<p>注：监听函数有两个参数，<code>第一个参数是最新的值</code>，<code>第二个参数是输入之前的值</code>，<code>顺序一定是新值，旧值</code>，<code>如果只写一个参数，那就是最新属性值</code>。<br>在使用时选择 watch 还是 computed，还有一个参考点就是官网说的：<code>当需要在数据变化时执行异步或开销较大的操作时，watch方式是最有用的。所以 watch 一定是支持异步的。</code></p>
</p>

<p>


<p><strong>watch:handler方法和immediate属性</strong><br>这里 watch 的一个特点是，最初绑定的时候是不会执行的，要等到 firstName 改变时才执行监听计算。那我们想要一开始就让他最初绑定的时候就执行改怎么办呢？我们需要修改一下我们的 watch 写法，修改过后的 watch 代码如下：</p>
<p>immediate : true<br><img src="/image/vueDetailed/12.png"></p>
<p>我们一进去的时候，页面数据没有改变，却是执行了watch里面的handler函数<br><img src="/image/vueDetailed/13.png"></p>
<p>immediate : false<br><img src="/image/vueDetailed/14.png"></p>
<p>我们一进去的时候，页面数据没有改变，也没有执行了watch里面的handler函数<br><img src="/image/vueDetailed/15.png"></p>
<p>注意到handler了吗，我们给 firstName 绑定了一个handler方法，之前我们写的 watch 方法其实默认写的就是这个handler，Vue.js会去处理这个逻辑，最终编译出来其实就是这个handler。</p>
<p>而immediate:true代表如果在 wacth 里声明了 firstName 之后，就会立即先去执行里面的handler方法，如果为 false就跟我们以前的效果一样，不会在绑定的时候就执行。</p>
<p><strong>deep属性</strong><br>watch 里面还有一个属性 deep，默认值是 false，代表是否深度监听，比如我们 data 里有一个obj属性：</p>
<p>如下代码当我们在在输入框中输入数据视图改变obj.a的值时，我们发现是无效的<br><img src="/image/vueDetailed/16.png"></p>
<p>从下面的效果图,看起来并没有触发handler函数的执行，这是因为没有执行深度监听。<br><img src="/image/vueDetailed/05.gif"></p>
<p>深度监听：</p>
<p>如下代码<br><img src="/image/vueDetailed/17.png"></p>
<p>从下面的效果图,我们加入deep,执行深度监听，触发了handler函数，进行打印。<br><img src="/image/vueDetailed/06.gif"></p>
<p>deep深入监听的开销过大：</p>
<p>deep的意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样性能开销就会非常大了，任何修改obj里面任何一个属性都会触发这个监听器里的 handler。</p>
<p>代码如图所示:<br><img src="/image/vueDetailed/18.png"></p>
<p>从下面的效果图,我们发现obj.a obj.b都被加上监听器了，这样造成开销太大。<br><img src="/image/vueDetailed/07.gif"></p>
<p>优化，我们可以是使用字符串形式监听。<br>代码如图所示:<br><img src="/image/vueDetailed/19.png"></p>
<p>从下面的效果图,我们发现只有obj.b都被加上监听器了，这样进行了极大的优化。<br><img src="/image/vueDetailed/08.gif"></p>
<p>总结：</p>
<p>　　watch和computed都是以Vue的依赖追踪机制为基础的，当某一个依赖型数据（依赖型数据：简单理解即放在 data 等对象下的实例数据）发生变化的时候，所有依赖这个数据的相关数据会自动发生变化，即自动调用相关的函数，来实现数据的变动。<br>　　当依赖的值变化时，在watch中，是可以做一些复杂的操作的，而computed中的依赖，仅仅是一个值依赖于另一个值，是值上的依赖。 </p>
<p>应用场景：<br>computed：用于处理复杂的逻辑运算；一个数据受一个或多个数据影响；用来处理watch和methods无法处理的，或处理起来不方便的情况。例如处理模板中的复杂表达式、购物车里面的商品数量和总金额之间的变化关系等。</p>
<p>　watch：用来处理当一个属性发生变化时，需要执行某些具体的业务逻辑操作，或要在数据变化时执行异步或开销较大的操作；一个数据改变影响多个数据。例如用来监控路由、inpurt 输入框值的特殊处理等。</p>
<p>区别：　　</p>
<ul>
<li>computed<br>初始化显示或者相关的 data、props 等属性数据发生变化的时候调用；<br>计算属性不在 data 中，它是基于data 或 props 中的数据通过计算得到的一个新值，这个新值根据已知值的变化而变化；</li>
</ul>
<p>在 computed 属性对象中定义计算属性的方法，和取data对象里的数据属性一样，以属性访问的形式调用；</p>
<p>如果 computed 属性值是函数，那么默认会走 get 方法，必须要有一个返回值，函数的返回值就是属性的属性值；</p>
<p>computed 属性值默认会缓存计算结果，在重复的调用中，只要依赖数据不变，直接取缓存中的计算结果，只有依赖型数据发生改变，computed 才会重新计算；</p>
<p>在computed中的，属性都有一个 get 和一个 set 方法，当数据变化时，调用 set 方法。</p>
<ul>
<li>watch<br>主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作，可以看作是 computed 和 methods 的结合体；</li>
</ul>
<p>可以监听的数据来源：data，props，computed内的数据；</p>
<p>watch支持异步；<br>不支持缓存，监听的数据改变，直接会触发相应的操作；<br>监听函数有两个参数，第一个参数是最新的值，第二个参数是输入之前的值，顺序一定是新值，旧值。</p>
</p>

<div style="color: red;font-weight: 700">其他博客细解: </div>
<a href="https://www.cnblogs.com/dhui/p/12957862.html" target="_blank" rel="noopener">https://www.cnblogs.com/dhui/p/12957862.html</a>

<div style="color: red;font-weight: 700">关于watch的深度监听更加的细解: </div>
<a href="https://www.cnblogs.com/yesu/p/9546458.html" target="_blank" rel="noopener">https://www.cnblogs.com/yesu/p/9546458.html</a>

</div>
</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中的watch和computed的差异</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的key的作用</title>
    <url>/2021/ckpf35kp6005fjov49z1u2skd/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中的key的作用</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中的key的作用
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue中的key的作用</strong>

</div>

<p>一、 VUE中key 的作用</p>
<p>总结：key的作用主要是为了高效的更新虚拟dom</p>
<p>没有加key ,diff默认算法的问题(虚拟dom)</p>
<ol>
<li><p>如果节点类型不同，直接干掉前面所有的节点，再创建并插入新的节点，<br>不会再比较这个节点以后的子节点。</p>
</li>
<li><p>如果节点类型相同，则会重新设置节点的属性，从而实现节点的更新</p>
</li>
</ol>
<p>没有key值时，插入新的节点<br><img src="/image/VueKey/01.png"></p>
<p>有key值时，插入新的节点<br><img src="/image/VueKey/02.png"></p>
<p>所以一句话，<code>key的作用主要是为了高效的更新虚拟DOM</code>。另外vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了让vue可以区分它们，</p>
</div>
</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中的key的作用</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的keep-alive</title>
    <url>/2021/ckpf35kp3005cjov40eawhyu8/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中的keep-alive</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中的keep-alive
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue中的keep-alive</strong>

</div>

<p>一、 对 keep-alive的了解</p>
<ol>
<li>keep-alive 是什么？</li>
</ol>
<p>内置组件，能在组件切换过程中将转态保留在内存中，防止重复渲染dom.</p>
<ol start="2">
<li>说明</li>
</ol>
<p>keep-alive 它不会在dom树中渲染</p>
<ol start="3">
<li>使用场景，几乎和渲染有关系</li>
</ol>
<ol start="4">
<li>多了两个生命周期</li>
</ol>
<p>activated</p>
<p>deactivated</p>
<ul>
<li>缓存组件</li>
<li>频繁切换，不需要重复渲染</li>
<li>Vue常见性能优化</li>
</ul>
<p>ps:希望在项目中遇到的时候，我会再次总结上来</p>
<p>没有keep-alive的时候，进行切换三个组件<br>都是常规的挂载和销毁<br><img src="/image/vueDetailed/10.gif"></p>
<p>加入keep-alive包裹的时候，进行切换三个组件<br>只有挂载，没有销毁。数据进行缓存了。<br><img src="/image/vueDetailed/11.gif"></p>
<p>以下是父组件的代码，和三个子组件的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    父组件<br>    &lt;button @click&#x3D;&quot;changeState(&#39;A&#39;)&quot;&gt;A&lt;&#x2F;button&gt;<br>    &lt;button @click&#x3D;&quot;changeState(&#39;B&#39;)&quot;&gt;B&lt;&#x2F;button&gt;<br>    &lt;button @click&#x3D;&quot;changeState(&#39;C&#39;)&quot;&gt;C&lt;&#x2F;button&gt;<br><br>    &lt;keep-alive&gt;<br>      &lt;!-- tab 切换 --&gt;<br>      &lt;KeepAliveStageA v-if&#x3D;&quot;state &#x3D;&#x3D;&#x3D; &#39;A&#39;&quot; &#x2F;&gt;<br>      &lt;!-- v-show --&gt;<br>      &lt;KeepAliveStageB v-if&#x3D;&quot;state &#x3D;&#x3D;&#x3D; &#39;B&#39;&quot; &#x2F;&gt;<br>      &lt;KeepAliveStageC v-if&#x3D;&quot;state &#x3D;&#x3D;&#x3D; &#39;C&#39;&quot; &#x2F;&gt;<br>    &lt;&#x2F;keep-alive&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>import KeepAliveStageA from &quot;.&#x2F;KeepAliveStateA&quot;;<br>import KeepAliveStageB from &quot;.&#x2F;KeepAliveStateB&quot;;<br>import KeepAliveStageC from &quot;.&#x2F;KeepAliveStateC&quot;;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      state: &quot;A&quot;<br>    &#125;;<br>  &#125;,<br>  components: &#123;<br>    KeepAliveStageA,<br>    KeepAliveStageB,<br>    KeepAliveStageC<br>  &#125;,<br>  methods: &#123;<br>    changeState(state) &#123;<br>      this.state &#x3D; state;<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;&#x2F;script&gt;<br>&lt;style scoped&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>    &lt;p&gt;state A&lt;&#x2F;p&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    mounted() &#123;<br>        &#x2F;&#x2F; eslint-disable-next-line<br>        console.log(&#39;A mounted&#39;)<br>    &#125;,<br>    destroyed() &#123;<br>        &#x2F;&#x2F; eslint-disable-next-line<br>        console.log(&#39;A destroyed&#39;)<br>    &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>    &lt;p&gt;state B&lt;&#x2F;p&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    mounted() &#123;<br>        &#x2F;&#x2F; eslint-disable-next-line<br>        console.log(&#39;B mounted&#39;)<br>    &#125;,<br>    destroyed() &#123;<br>        &#x2F;&#x2F; eslint-disable-next-line<br>        console.log(&#39;B destroyed&#39;)<br>    &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>    &lt;p&gt;state C&lt;&#x2F;p&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    mounted() &#123;<br>        &#x2F;&#x2F; eslint-disable-next-line<br>        console.log(&#39;C mounted&#39;)<br>    &#125;,<br>    destroyed() &#123;<br>        &#x2F;&#x2F; eslint-disable-next-line<br>        console.log(&#39;C destroyed&#39;)<br>    &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>


<p>相关博客细解<a href="https://www.jianshu.com/p/17827acbd64b" target="_blank" rel="noopener">https://www.jianshu.com/p/17827acbd64b</a></p>
</div>
</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中的keep-alive</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件data为什么是函数</title>
    <url>/2021/ckpf35kpz006kjov4acwt5309/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue组件data为什么是函数</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue组件data为什么是函数
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue组件data为什么是函数</strong>

</div>

<p style="text-indent: 2em">
    因为JS本身的特性带来的，如果data是一个对象，那么由于对象本身属于引用类型，当我们
修改其中的一个属性时，会影响到所有的Vue实例的数据。如果将data作为一个函数返回一个对象，
那么每一个实例的data属性都是独立的，不会相互影响了。
</p>

<p>ps:<br>Home.vue<br> data:{<br> msg:1<br>}</p>
<p>Header.vue<br> data:{<br> msg:2<br>}</p>
<p>@click=’btn’</p>
<p>btn(){<br>    this.msg =’2333’<br>}</p>
<p>这两个组件里面的msg都会变为字符 2333</p>
</div>
</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue组件data为什么是函数</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的v-loader的作用</title>
    <url>/2021/ckpf35kpe005ojov48ods6tzn/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中的v-loader的作用</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中的v-loader的作用
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue中的v-loader的作用</strong>

</div>


<p>
一、项目打包
 npm run build   --> index .html
 在我们开发的时候操作的都是  xxx.vue文件
 loder : 加载器
</p>

<p>
二、Vue Loader 是一个 webpack 的 loader，它允许你以一种名为单文件组件 (SFCs)的格式撰写 Vue 组件

<p>作用：解析和转换 .vue 文件，提取出其中的逻辑代码 script、样式代码 style、以及 HTML 模版 template，再分别把它们交给对应的 Loader 去处理。</p>
<p>.vue 文件是一个自定义的文件类型，用类 HTML 语法描述一个 Vue 组件。每个 .vue 文件包含三种类型的顶级语言块 <code>&lt;template&gt;、&lt;script&gt; 和 &lt;style&gt;</code>，允许添加可选的自定义块<br><code>vue-loader</code> <code>会解析.vue文件</code>，提取每个语言块，如有必要会通过其它 loader 处理，最后将他们组装成一个 CommonJS 模块，<code>module.exports</code> <code>出一个</code> <code>Vue.js</code> 组件对象。<br><code>vue-loader</code> 支持使用非默认语言，比如 CSS 预处理器，预编译的 HTML 模版语言，通过设置语言块的 lang 属性。例如，你可以像下面这样使用 Sass 语法编写样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;style lang&#x3D;&quot;sass&quot;&gt;<br>  &#x2F;* write Sass! *&#x2F;<br>&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>
</p>


<p>
* vue-loader：解析和转换 .vue 文件，提取出其中的逻辑代码 script、样式代码 style、以及 HTML 模版 template，再分别把它们交给对应的 Loader 去处理。

<p>总结: vue-loader的作用就是提取。<br>学习于 <a href="https://vue-loader-v14.vuejs.org/zh-cn/start/spec.html" target="_blank" rel="noopener">https://vue-loader-v14.vuejs.org/zh-cn/start/spec.html</a>    </p>
</p>



</div>
</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中的v-loader的作用</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的v-model和标签绑定事件</title>
    <url>/2021/ckpf35kpg005qjov4f2cr0qi3/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中的v-model和标签绑定事件</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中的v-model和标签绑定事件
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue中的v-model和标签绑定事件</strong>

</div>



</div>
</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中的v-model和标签绑定事件</tag>
      </tags>
  </entry>
  <entry>
    <title>npm安装时 --save --dev 和 --save 区别</title>
    <url>/2021/ckpf35kqj007ejov4fvuj7yrk/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">npm安装时 --save --dev 和 --save 区别</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
npm安装时 --save --dev 和 --save 区别
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>npm安装时 --save --dev 和 --save 区别</strong>

</div>

<p>一、–save -dev</p>
<p>–save：将保存配置信息到pacjage.json。默认为dependencies节点中。</p>
<p>–dev：将保存配置信息devDependencies节点中。</p>
<p>因此：</p>
<p>–save：将保存配置信息到pacjage.json的dependencies节点中。</p>
<p>–save-dev：将保存配置信息到pacjage.json的devDependencies节点中。</p>
<p><strong>dependencies：</strong><code>运行时的依赖，发布后，即生产环境下还需要用的模块</code></p>
<p><strong>devDependencies：</strong><code>开发时的依赖。里面的模块是开发时用的，发布时用不到它。</code></p>
</div>
</div>]]></content>
      <categories>
        <category>node的细解</category>
      </categories>
      <tags>
        <tag>npm安装时 --save --dev 和 --save 区别</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的css的scoped细解</title>
    <url>/2021/ckpf35kp10059jov44vok4m0g/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中的css的scoped细解</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Vue中的css的scoped细解
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px">
<div style="text-align: center; color: red">
    <strong>Vue中的css的scoped细解</strong>

</div>

<ol>
<li>让css只在当前组件生效</li>
</ol>
<p><code>&lt;style scoped&gt;</code></p>
<ol start="2">
<li>scss </li>
</ol>
<p>scss: </p>
<ul>
<li><p>下载<br>npm install sass-loader node-sass  –save</p>
</li>
<li><p><code>&lt;style lang=&#39;scss&#39; scoped&gt;</code></p>
</li>
<li><p>scss样式穿透</p>
</li>
</ul>
<p>父元素/deep/子元素    </p>
</div>
</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中的css的scoped细解</tag>
      </tags>
  </entry>
  <entry>
    <title>我喜欢的歌手是许嵩</title>
    <url>/2021/ckpf35krq008ejov4c5kv9nm3/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1662189728,3231128053&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">我喜欢的歌手是许嵩</h4>
<div style="padding: 0;margin: 0;font-size: 16px;line-height: 30px">
我喜欢的歌手是许嵩
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>关于许嵩的魅力</strong>
</div>

<p style="font-size: 15px">关于许嵩很多人认为他很低调，不怎么出现在大众的视线里面。
很多人夸赞许嵩从来就没有进过娱乐圈。
更多是拿许嵩和很多歌手对比，可以突出许嵩真的是一个专心制作的音乐的歌手。</p>

<p style="font-size: 15px">回过头来想想真的有几个人能像许嵩一样，在名利面前看的这么透彻。
大家都是人，有欲望，许嵩真的是一个看透了人的内心所需要的东西。
</p>

<p style="font-size: 15px">以前喜欢许嵩的歌真的就是单纯的觉得他的歌给我一个情景感，这是很多个歌手都达不到的水准。
现在喜欢许嵩的歌，是因为我喜欢他在歌里面表达的东西。许嵩的歌真的是经得起推敲的。</p>

<p style="font-size: 15px">许嵩真的是一个好的歌手，他对音乐的态度都是值得我们去学习的。</p>

<p style="font-size: 15px">此偶像非彼偶像:说的就是这种偶像是你越来越了解他，就会更加的喜欢他</p>

</div>

<hr>
</div>]]></content>
      <categories>
        <category>我的偶像是许嵩(此偶像非彼偶像)</category>
      </categories>
      <tags>
        <tag>我喜欢的歌手是许嵩</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中this.$nextTick()的用法</title>
    <url>/2021/ckpf35kos0051jov4gn40bukz/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Vue中this.$nextTick()的用法</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
之所以来写这个this.$nextTick()的用法，是因为在写一个better-scroll屏幕滚动的组件里面用到了这个。
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">


<p><strong>Vue中this.$nextTick()的用法</strong></p>
<p>$nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM。</p>
<p>具体看事例分析:</p>
<p>代码如下<br><img src="/image/VueNextTick/01.png"></p>
<p>实际效果如下<br><img src="/image/VueNextTick/01.gif"></p>
<p>接下来分析一下这个执行过程。</p>
<p>第一次按下按钮时:</p>
<p>代码的执行顺序如下:</p>
<ol>
<li>this.msg1 = this.$refs.msgDiv.innerHTML</li>
<li>this.msg3 = this.$refs.msgDiv.innerHTML</li>
<li>this.msg = “Hello world.”</li>
<li>this.$nextTick(() =&gt; {this.msg2 = this.$refs.msgDiv.innerHTML})</li>
</ol>
<p>因为是异步执行的，前三个代码可以理解的。<br>第四个代码 this.$nextTick(() =&gt; {this.msg2 = this.$refs.msgDiv.innerHTML})<br>重点分析一下。</p>
<p>前三个dom渲染完后，执行 this.$nextTick(() =&gt; {this.msg2 = this.$refs.msgDiv.innerHTML})<br>this.msg2 = this.$refs.msgDiv.innerHTML 这里面的  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;div ref&#x3D;&quot;msgDiv&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure>
<p>msg是等于 Hello world. 所有打印的结果 Hello world.</p>
<p>第二次按下按钮 由于原来的 msg赋值为 Hello world.不是Hello Vue.了所有执行顺序不变，但是打印结果变了。</p>
<ol>
<li>this.msg1 = this.$refs.msgDiv.innerHTML  //打印的是Hello Vue.</li>
<li>this.msg3 = this.$refs.msgDiv.innerHTML  //打印的是Hello Vue.</li>
<li>this.msg = “Hello world.”</li>
<li>this.$nextTick(() =&gt; {this.msg2 = this.$refs.msgDiv.innerHTML})</li>
</ol>
<p>我将源代码进行一些调整之后会更好的理解。</p>
<p>代码如下<br><img src="/image/VueNextTick/02.png"></p>
<p>实际效果如下<br><img src="/image/VueNextTick/02.gif"></p>
<p>如果理解以上这两个代码了，就是真的理解this.$nextTick函数了。</p>
</p>

<hr>
<p>ps: 上一个关于nextTick解释的不好，自己重新梳理了。</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>Vue中this.$nextTick()的用法</strong></p>
<ul>
<li>说明<br>$nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM。<br>$nextTick 在Dom渲染之后被触发，以获取最新的Dom节点<br>异步渲染 $nextTick  待DOM渲染完再回调<br>页面渲染时会将 data 的修改做整合，多次data修改只会渲染一次</li>
</ul>
<p>场景:<br>需要在视图更新之后，基于新的视图进行操作</p>
<p>实际代码如下:<br><img src="/image/VueNextTick/03.png"></p>
<p>实际效果如下:<br><img src="/image/VueNextTick/03.gif"></p>
<p>从这个效果图可以看出来<br>1.data数据更新了，但是dom还没有被更新出来</p>
<p>我们加入nextTick函数之后执行</p>
<p>实际代码如下:<br><img src="/image/VueNextTick/04.png"></p>
<p>实际效果如下:<br><img src="/image/VueNextTick/04.gif"></p>
<p>从这个效果图可以看出来<br>1.nextTick是等dom渲染结束之后再执行的结果</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>Vue中this.$nextTick()的用法</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE路上踩坑</title>
    <url>/2021/ckpf35kod004pjov4eqym5h43/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">VUE路上踩坑</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
最近自己看了一个手机端的vue项目，在练习的过程还是踩了很多坑的。
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>vue加scoped后无法修改样式（无法修改element UI/mint-ui 样式）</strong>

</div>

<p>用vue写手机端的轮播图，我用的是mint-ui组件也就是饿了么开发的组件。想修改轮播图的样式，发现<br>修改根本没有用。</p>
<ol>
<li><code>把 style里面的scoped删除了，就解决问题了。(不推荐使用，有很大的弊端)</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;style lang&#x3D;&quot;scss&quot;&gt;<br>#mint-swipe &#123;<br>  height: 200px;<br>  .mint-swipe-indicator.is-active &#123;<br>    background: red;<br>  &#125;<br>&#125;<br>&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>

<ol start="2">
<li><p><code>这不去掉scoped 的情况下</code><br><code>在全局样式中覆盖，这种解法，有弊端，可能会污染全局样式。为了不污染全局样式，也可单独加个类名</code><br><code>比如在引用全局样式前引用element ui的样式</code></p>
</li>
<li><p><code>样式放到App.vue里面 或者入口文件 index.vue ,样式就生效了</code> <code>为了不污染其他页面样式，可单独加个类名(推荐使用)</code></p>
</li>
</ol>
<p>方法很多不一一的介绍了。<br>详情可以看这个博客文章<a href="https://blog.csdn.net/qq_42221334/article/details/88533329" target="_blank" rel="noopener">vue加scoped后无法修改样式（无法修改element UI 样式）</a></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>better-scroll无法滚动的问题</strong>

</div>

<ol>
<li>简单介绍一下better-scroll</li>
</ol>
<p>better-scroll 是一款重点解决移动端（已支持 PC）各种滚动场景需求的插件。它的核心是借鉴的 iscroll 的实现，它的 API 设计基本兼容 iscroll，在 iscroll 的基础上又扩展了一些 feature 以及做了一些性能优化。</p>
<p>better-scroll 是基于原生 JS 实现的，不依赖任何框架。它编译后的代码大小是 63kb，压缩后是 35kb，gzip 后仅有 9kb，是一款非常轻量的 JS lib。</p>
<p>总结一句话就是优化滚动效果的插件</p>
<p>一、DOM层级关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;div class&#x3D;&quot;wrapper&quot;&gt;<br>  &lt;div class&#x3D;&quot;content&quot;&gt;<br>    content...<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure>
<p>wrapper里面不能存在多个同级div，如果你这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;div class&#x3D;&quot;classifyTitle&quot;  ref&#x3D;&quot;wrapper&quot;&gt;<br>    &lt;div class&#x3D;&quot;&quot;&gt;<br>	ss<br>    &lt;&#x2F;div&gt;<br>    &lt;ul&gt;<br>	&lt;li v-for&#x3D;&quot;(item,index) in classifyData.products&quot;&gt;<br>	    &lt;router-link :to&#x3D;&quot;&#123;name:&#39;详情&#39;&#125;&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;&#x2F;router-link&gt;<br>	&lt;&#x2F;li&gt;<br>    &lt;&#x2F;ul&gt;<br>&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure>
<p>那么ul中的元素将不能滚动</p>
<p>二、content是否被成功添加滚动相关style<br>以此dom结构为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;div class&#x3D;&quot;classifyTitle&quot;  ref&#x3D;&quot;wrapper&quot;&gt;<br>	&lt;ul&gt;<br>	    &lt;li v-for&#x3D;&quot;(item,index) in classifyData.products&quot;&gt;<br>		&lt;router-link :to&#x3D;&quot;&#123;name:&#39;详情&#39;&#125;&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;&#x2F;router-link&gt;<br>	    &lt;&#x2F;li&gt;<br>	&lt;&#x2F;ul&gt;				<br>&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure>
<p>审查元素可以看到：</p>
<img src="/image/VueExclusionError/01.png">

<p>这样即添加成功的</p>
<p>三、wrapper 与 content 高度问题<br>只有content的高度大于wrapper高度时候，才可以滚动。</p>
<p>如何看？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">this.$nextTick(() &#x3D;&gt; &#123;<br>    if (!this.scroll) &#123;<br>	this.scroll &#x3D; new BScroll(this.$refs.wrapper, &#123;&#125;)<br>	console.log(this.scroll)<br>    &#125;<br> &#125;)<br></code></pre></td></tr></table></figure>
<p>F12就可以看到打印结果：<br><img src="/image/VueExclusionError/02.png"></p>
<p>以上就是可以滚动的情况，wrapperHeight(616) &lt; scrollHeight(750)，hasVerticalScroll为true；</p>
<p><code>下面这句话是重点，容易出错的地方：</code><br><code>那如果这些数据不对，检查是否dom没有更新完就初始化BScroll了，要等dom更新完才能初始化</code></p>
<p>四、父容器固定高度，并设置overflow：hidden，子元素超出父元素高度后将被隐藏，超出部分可滚动且没有滚动条。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div class&#x3D;&quot;cinema&quot; :style&#x3D;&quot;mystyle&quot; ref&#x3D;&quot;wrapper&quot;&gt;<br>    &lt;ul&gt;<br>      &lt;li v-for&#x3D;&quot;(data, index) in datalist&quot; :key&#x3D;&quot;index&quot;&gt;<br>        &#123;&#123; data.name &#125;&#125;<br>        &lt;!-- &lt;p style&#x3D;&quot;font-size:12px&quot;&gt;&#123;&#123; data.address &#125;&#125;&lt;&#x2F;p&gt; --&gt;<br>      &lt;&#x2F;li&gt;<br>    &lt;&#x2F;ul&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;<br>li &#123;<br>  height: 50px;<br>&#125;<br><br>.cinema &#123;<br>  &#x2F;&#x2F; height: 500px;<br>  overflow: hidden;<br>  position: relative;<br>&#125;<br>&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>Vue：错误提示 Do not use 'new' for side effects no-new</strong>

</div>

<p>在Vue框架开发中，如果new创建对象后不赋值，则ESLint检测会提示下面错误。</p>
<p>error  Do not use ‘new’ for side effects  no-new</p>
<p>如下代码所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">new Howl(&#123;<br>  src: [&#39;sound.mp3&#39;]<br>&#125;);<br></code></pre></td></tr></table></figure>
<p>解决方案：</p>
<ol>
<li><p>赋值一个对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var sound &#x3D; new Howl(&#123;<br>  src: [&#39;sound.mp3&#39;]<br>&#125;);<br>sound.play();<br></code></pre></td></tr></table></figure>
<p>对象sound如果赋值不使用会触发另一个规则检测，提示如下错误：<br>error ‘sound’ is assigned a value but never used<br>调用方法后无错误提示，顺利通过检测。</p>
</li>
<li><p>第二种解决方案是屏蔽检测</p>
</li>
</ol>
<p>在代码上添加 <code>/* eslint-disable no-new */</code><br>这句注释可以绕过规则检测，如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;* eslint-disable no-new *&#x2F;<br>new Howl(&#123;<br>  src: [&#39;sound.mp3&#39;]<br>&#125;);<br></code></pre></td></tr></table></figure>

</p>




<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>在懒加载中过滤器遇到的坑(待写)</strong>

</div>



</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong></strong>

</div>



</p>
</div>]]></content>
      <categories>
        <category>排坑之路</category>
      </categories>
      <tags>
        <tag>VUE路上踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6导入导出的两种方式</title>
    <url>/2021/ckpf35kjl000ejov4c8nh8yeo/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>VUE脚手架项目语法规则解决方案</title>
    <url>/2021/ckpf35koi004rjov49nf21we4/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">VUE脚手架项目语法规则解决方案</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
VUE脚手架项目语法规则解决方案
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>VUE脚手架项目语法规则解决方案</strong>

</div>

<ol>
<li>第一个错误，项目自动保存后，单引号会自动变双引号，还有在后面加分号和逗号。</li>
</ol>
<p>解方案: 在根目录下创建一个文件夹名称为 .prettierrc<br>在文件里面写下如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#123;<br>    &quot;semi&quot;: false,<br>    &quot;singleQuote&quot;: true<br>&#125;<br></code></pre></td></tr></table></figure>
<p>具体如图所示</p>
<img src="/image/vueSummary/14.png">

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>VUE脚手架项目语法规则解决方案</strong>

</div>

<ol start="2">
<li>第二个错误，就是 data和小括号()之间需要一个空格 </li>
</ol>
<p>解方案: 打开根目录下 .eslintrc.js 文件<br>在文件里面添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#39;space-before-function-paren&#39;: 0<br></code></pre></td></tr></table></figure>
<p>具体如图所示</p>
<img src="/image/vueSummary/15.png">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>VUE脚手架项目语法规则解决方案</strong>

</div>

<ol start="3">
<li>可以直接输入 npm run lint 修复错误</li>
</ol>
</p>


</div>]]></content>
      <categories>
        <category>VUE项目细解</category>
      </categories>
      <tags>
        <tag>VUE脚手架项目语法规则解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE里的v-for和v-if使用的区别</title>
    <url>/2021/ckpf35koz0057jov49zml8d2c/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">VUE里的v-for和v-if使用的区别</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
VUE里的v-for和v-if使用的区别
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>VUE里的v-for和v-if使用的区别</strong>

</div>

<ol>
<li><p>vue的源代码里看，v-for的优先级<mark>高于</mark>v-if的优先级</p>
</li>
<li><p>如果同时出现，每次渲染都会先执行循环再判断条件，无论如何循环都不可避免，浪费了性能。</p>
</li>
<li><p>要避免出现这种情况，则要在外层嵌套 template，在这一层进行 v-if判断，然后在内部进行 v-for循环。</p>
</li>
<li><p>使用computed过滤掉列表中不需要显示的项目</p>
</li>
</ol>
<ul>
<li>为了过滤一个列表中的项目（比如v-for = “user in users” v-if = “user.isActive”）。在这种情况下，请将users替换为一个计算属性（比如activeUsers），让其返回过滤后的列表。</li>
</ul>
<p>原来的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;ul&gt;<br>    &lt;li v-for&#x3D;&quot;user in users&quot; v-if&#x3D;&quot;user.isActive&quot; :key&#x3D;&quot;user.id&quot;&gt;<br>      &#123;&#123; user.name &#125;&#125;<br>    &lt;&#x2F;li&gt;<br>  &lt;&#x2F;ul&gt;<br></code></pre></td></tr></table></figure>

<p>修改之后的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;div&gt;<br>	&lt;div v-for&#x3D;&quot;(user,index) in activeUsers&quot; :key&#x3D;&quot;user.index&quot; &gt;<br>		&#123;&#123; user.name &#125;&#125; <br>	&lt;&#x2F;div&gt;<br>&lt;&#x2F;div&gt;<br>data () &#123;  &#x2F;&#x2F; 业务逻辑里面定义的数据<br>    return &#123;<br>      users,: [&#123;<br>        name: &#39;111111&#39;,<br>        isShow: true<br>      &#125;, &#123;<br>        name: &#39;22222&#39;,<br>        isShow: false<br>      &#125;]<br>    &#125;<br>  &#125;<br>computed: &#123;<br>	activeUsers: function () &#123;<br>		return this.users.filter(function (user) &#123;<br>			return user.isShow;&#x2F;&#x2F;返回isShow&#x3D;true的项，添加到activeUsers数组<br>		&#125;)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>总结：v-if比v-for优先级高，一起使用在性能上会造成极大的浪费，并且官网也并不推荐我们这样做，所以我们可以选择使用computed过滤掉列表中不需要显示的项目。</p>
<p>这个例子其实就是我之前写的过滤列表的函数一样的,<br>原来计算属性是这么有魅力，再次感叹vue太强大了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;mytext&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;<br>        &lt;ul&gt;<br>            &lt;li v-for&#x3D;&quot;data in getMyDataliat&quot;&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;li&gt;<br>        &lt;&#x2F;ul&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                mytext: &#39;&#39;,<br>                datalist: [&quot;aaaa&quot;, &quot;aabbb&quot;, &quot;cccc&quot;, &quot;dddd&quot;]<br>            &#125;,<br>            methods: &#123;&#125;,<br>            computed: &#123;<br>                getMyDataliat() &#123;<br>                    return this.datalist.filter(item &#x3D;&gt; &#123;<br>                        return item.indexOf(this.mytext) &gt; -1<br>                    &#125;)<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>

</p>
</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>VUE里的v-for和v-if使用的区别</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE里的v-if和v-show使用的区别</title>
    <url>/2021/ckpf35kox0054jov4ajwp6vxz/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">VUE里的v-if和v-show使用的区别</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
VUE里的v-if和v-show使用的区别
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>v-show使用</strong>

</div>
代码展示

<img src="/image/vueDetailed/03.png">

<p>效果图展示</p>
<img src="/image/vueDetailed/01.gif">

<p>可以明显得感觉到v-show显示和隐藏元素是通过 display:block/none。来实现的。</p>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>v-if使用</strong>

</div>
代码展示

<img src="/image/vueDetailed/04.png">

<p>效果图展示</p>
<img src="/image/vueDetailed/02.gif">

<p>可以明显得感觉到v-if显示和隐藏元素是通过删除dom的节点来实现的。</p>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>VUE里的v-for和v-show使用的区别</strong>

</div>

<p>v-if    创建  删除  （没有元素）<br>v-show  显示  隐藏  （有元素）</p>
<p>v-if 是真正的条件渲染，因为它会确保在切换过程中条件块的事件监听器和子组件适当的被销毁和重建</p>
<p>v-if 也是惰性的: 如果在初始渲染时条件为假，则什么也不做一直到条件第一次变为真时，才会开始渲染条件块。</p>
<p>相比之下，v-show 就简单的多了，不管条件是什么，元素总是会渲染，并且只是简单的基于CSS进行切换。</p>
<p>一般来说，v-if有更高的切换开销，而v-show有更高的初始渲染开销。因此，如果需要非常频繁的切换，则使用<br>v-show 较好；如果在运行时条件不太可能改变，则使用 v-if较好。</p>
<p>v-show的使用情景：<br>场景1：有多个页面同时运行， 但当前只显示一个页面，就用v-show, 显示当前页面就是true, false， 但是同时开启这么多的页面会损耗很多性能。<br>场景2：如果说，多个页面切换，得保持切换前的状态，用v-show 挺好的，但是也是会损耗性能，所以这里建议用keep-alive 缓存会好点。</p>
<p>需要经常的来回切换的按钮，用v-show，如果用v-for的话，经常删除和创建元素会过于消耗性能。</p>
<p>v-if的使用情景：<br>场景1：如何让这个组件重置呢，其实就是给这个组件v-if , 然后给false, 再给true 就可以了。<br>情景2：购物车有商品时，显示商品，无商品时显示数据为空的判断可以用v-if</p>
</p>

</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>VUE里的v-if和v-show使用的区别</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE里的computed属性和方法属性的区别</title>
    <url>/2020/ckpf35kol004ujov44clschyb/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">VUE里的computed属性和方法属性的区别</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
VUE里的computed属性和方法属性的区别
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>VUE里的computed属性和方法属性的区别</strong>

</div>




<ol>
<li>第一个区别就是调用的方式不一样</li>
</ol>
<p>方法属性: 调用  <code>getSumm()</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"> &lt;div id&#x3D;&quot;app&quot;&gt;<br>      &#123;&#123;getSumm()&#125;&#125;<br>  &lt;&#x2F;div&gt;<br><br>methods: &#123;<br>              getSumm() &#123;<br>                  console.log(&quot;方法被调用了&quot;);<br><br>                  return this.data.substring(0, 1).toUpperCase() + this.data.substring(1)<br>              &#125;<br>          &#125;,<br></code></pre></td></tr></table></figure>
<p>computed属性: 调用  <code>getSum</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;div id&#x3D;&quot;app&quot;&gt;<br>       &#123;&#123;getSum&#125;&#125;<br>   &lt;&#x2F;div&gt;<br> computed: &#123;<br>               getSum() &#123;<br>                   console.log(&quot;计算属性被调用了&quot;);<br>                   return this.data.substring(0, 1).toUpperCase() + this.data.substring(1)<br>               &#125;<br>           &#125;<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>computed属性会缓存，方法不会缓存。</li>
</ol>
<p>代码如下图所示<br><img src="/image/vueDetailed/01.png"></p>
<p>打印结果<br><img src="/image/vueDetailed/02.png"></p>
<p><strong style="color: red">computed属性 你第一次去一个地方别人就认识你了，后面每一次去别人都可以叫出你的名字。</strong></p>
<p><strong style="color: red">方法属性 你去一个地方，每次去别人都叫不出你的名字。</strong></p>
<p>computed属性的优点：</p>
<p>1.依赖的状态改变了，计算属性会重新计算一遍。<br>2.计算属性会缓存。</p>
</p>
</div>]]></content>
      <categories>
        <category>VUE的细解</category>
      </categories>
      <tags>
        <tag>VUE里的computed属性和方法属性的区别</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年的目标</title>
    <url>/2020/ckpf35kj30003jov41xy00f6e/</url>
    <content><![CDATA[<blockquote>
<p>2021年的实现目标。</p>
</blockquote>
<a id="more"></a>

<ol>
<li><p>当然是找一个理想的工作。所谓理想的，就是高工资，高福利，还可以让技术得到成长的工作。</p>
</li>
<li><p>谈一个对象。</p>
</li>
<li><p>好好的学习，就算以后工作再忙也希望可以坚持写博客。</p>
</li>
<li><p>尽快的了解行业，可以走出新手村。</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>CSS中margin-left等于负值的妙用</title>
    <url>/2020/ckpf35kjd0006jov4gi9g272f/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">CSS中margin-left等于负值的妙用</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
今天写小米商城的案例，又碰到了margin-left的负值在浮动中的使用。
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS中margin-left等于负值在浮动中的妙用</strong>

</div>

<p>首先看代码,两个浮动的盒子之间是没有间隙的。<br><img src="/image/cssDetailed/01.png"></p>
<p>如果在后面浮动的盒子使用了margin-left: -1px;<br><img src="/image/cssDetailed/02.png"></p>
<p>为什么可以达到这个效果呢？<br>还是得分析浮动的盒子是不占有位置的结果<br>margin-left: 正值; 后面的盒子向右移动<br>margin-left: 负值; 后面的盒子向左移动</p>
<p>注意：<strong style="color: red">这个写法经常用在网页的搜索框和搜索框后面的提交按钮的使用。</strong></p>
</p>
</div>
]]></content>
      <categories>
        <category>CSS的细解</category>
      </categories>
      <tags>
        <tag>CSS中margin-left等于负值的妙用</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的==和===的使用</title>
    <url>/2020/ckpf35kkv001djov4caut0gbh/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的==和===的使用</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
JS里的==和===的使用
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">


<p><strong>JavaScript相等(==)和全等(===)运算符的区别</strong></p>
<p>相等(==)会进行类型的转换<br>全等(===)不会进行类型的转换</p>
<p>&lt;一&gt;<br>6 == 6 ;      true<br>6 === 6 ;     true<br>6 == ‘6’(等于字符串的6，转换为数字6); true<br>6 === ‘6’(全等于字符串的6不等于数字6); false</p>
<p>&lt;二&gt;<br>true(等于true会转换为数字 1) == 1；     true<br>false(等于false会转换为数字 0) == 0；   true<br>true(全等于true不会转换为数字 1) === 1；   false<br>false(全等于false不会转换为数字 0) === 0；  false</p>
<p>&lt;三&gt;<br>0表示空什么都没有，空的字符串或者字符串里面有空格都是空。</p>
<p>‘’ == 0;  true<br>‘  ‘  == 0;  true</p>
<p>null表示空值，或者说此处不应该有值<br>undefined表示未声明的变量，或者未赋值的变量。<br>null和undefined都是假值,两个除了自身之外不等于任何值。</p>
<p>null == undefined;  true<br>null == 0;            false<br>undefined == ‘’;      false</p>
<p>&lt;四&gt;<br>字符串转换数值的条件: 字符串 == 数值  (字符串转换为数值)<br>NaN 非数字：表示数据类型的状态，不是一个确切的值</p>
<p>‘false’  ==  false(布尔值false会被转换为0);  false<br>NaN == NaN;   false<br>NaN == false;   false<br>NaN === false;   false</p>
<p>&lt;五&gt;<br><img src="/image/jsProgress/02.png"></p>
<hr>
<p><strong>promise的then catch</strong><br><img src="/image/jsProgress/03.png"></p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

</div>]]></content>
      <categories>
        <category>JS的细解</category>
      </categories>
      <tags>
        <tag>JS里的==和===的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>JS里的setTimeout(foo,0)和foo()</title>
    <url>/2020/ckpf35kl9001tjov45luyhcja/</url>
    <content><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; ">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS里的setTimeout(foo,0)和foo()的细解</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
今天无意中看到了一道面试题说的是setTimeout(foo,0)可以等替代换为 foo()
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>JS里的setTimeout(foo,0)和foo()</strong>

</div>

<p>setTimeout(foo,0)可以写成foo()吗？</p>
<p>第一次看到这道题的时候，感觉好像是相等的，因为延时都是零。<br>如果有其他的函数在上面和下面执行的时候。那就不是看延时的问题了，是同步和异步的问题了。<br><img src="/image/jsDetailed/01.png"><br><img src="/image/jsDetailed/02.png"><br>从这两张图片可以看出来执行的结果完全是不一样的打印顺序的。<br>这就是考了同步和异步的执行顺序。</p>
<p>setTimeout( foo, 0 )的意思是，把foo在0ms内推入任务队列，<br>而浏览器会继续执行执行栈中的事件，当执行栈空了，才会把任务队列中的foo事件推入执行栈执行。<br>如果当前执行栈的事件很多，foo还是得继续等着哦，等到执行栈中的事件全部执行完了，foo才能进入到执行栈中执行。所以不是在0毫秒后就立即执行foo的意思。</p>
<p>setTimeout( foo, 0 )有什么作用呢？<br>同步变异步，降低foo事件优先级，把它放到后面执行。</p>
</p>
</div>
]]></content>
      <categories>
        <category>JS的细解</category>
      </categories>
      <tags>
        <tag>JS里的setTimeout(foo,0)和foo()</tag>
      </tags>
  </entry>
  <entry>
    <title>最近的学习感悟</title>
    <url>/2020/ckpf35ks6008xjov4emhgeh3t/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">好的学习方法是可以让人进步很多的</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
好的学习方法是可以让人进步很多的
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>最近发现一些学习问题</strong>

</div>

<p style="text-indent: 2em;font-weight: 700;">
    最近给自己安排学习任务，我觉得这个方法是很好的，这样让自己的学习有规划。
但是我在安排学习任务的时候很不合理。我定的任务自己好好学习是可以完成的。
</p>



<p style="text-indent: 2em;font-weight: 700;">
    但是要是让我一天只学习vue的话，我是觉得不够的。我会去学习其他的知识点。
这样就会让我的vue计划有点来不及完成，我就会迫于完成任务加快自己的视频进度，
导致我没有学进去。而且定的任务要是难度太大，就会让人失去学习的动力的。
</p>

<p style="text-indent: 2em;font-weight: 700;">
    为了解决这个问题以后的任务都要合理，另外加一条学习时长来约束自己。
时长是很重要的东西。
个人每天的学习时长不低于6小时。
为了写的有意思一些，我会用上进度条的样式<br/>
<progress value="6"  min="5" max="12">
</p>



</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong></strong>

</div>

</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong></strong>

</div>

</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong></strong>

</div>

</p>





</div>
]]></content>
      <categories>
        <category>好的学习方法是可以让人进步很多的</category>
      </categories>
      <tags>
        <tag>总结一些学习方法</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5andCSS3总复习</title>
    <url>/2020/ckpf35kkc000wjov4d7y6af4z/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">CSS总复习</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
CSS总复习
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p  style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>HTML5新特性</strong>
</div>

<p>HTML新特性</p>
<p>1)增加了audio和video音频播放，抛弃了Flash<br>2)新增了canvas画布（绘画，制作动画（如小游戏开发等））<br>3)地理位置<br>4)增加了离线缓存<br>5)硬件加速<br>6)Web Socket (全双工通信)<br>7)增加了本地存储<br>8)新增了一些语义化标签</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>HTML5的优劣势</strong>
</div>

<p>1.HTML5的优势</p>
<ul>
<li>提高可用性和改进用户的友好体验。</li>
<li>新标签这将有助于开发人员定义重要的内容。</li>
<li>可以给站点带来更多的多媒体元素(视频和音频)可以很好的替代FLASH和Silverlight。</li>
<li>当涉及到网站的抓取和索引的时候，对于SEO很友好。</li>
<li>大量应用于移动应用程序和游戏。</li>
</ul>
<p>2.HTML5的劣势</p>
<ul>
<li>HTML5本身还在发展中，它不是用户应用的最迫切需求，更多是厂商试图改变软件生态格局的战略需求。</li>
<li>HTML5的兼容性受限于各大浏览器表现，例如微软的IE和fireforx之间存在很多差别。</li>
<li>HTML5需要一个成熟完整的开发环境，目前还缺少。</li>
<li>HTML5功能的暴增，浏览器必须有一个高效的图形引擎和脚本引擎。</li>
<li>HTML5需要杀手级应用来吸引和引导用户升级浏览器，最终完成HTML5终端的部署。</li>
</ul>
</p>


<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>网页布局标签</strong>
</div>

<ul>
<li>header:首页</li>
<li>nav:导航栏</li>
<li>aside:侧边栏</li>
<li>main:主体</li>
<li>section:区块</li>
<li>article:文章</li>
<li>footer:页尾</li>
</ul>
<img src="/image/htmlSummary/43.png" style="width: 1360">

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>语义化标签</strong>
</div>

<p>1)mark:高亮显示(行级)<br>2)details（描述）与summary(摘要):一般用于名词解释或用于封装一个区块等<br>3)meter:定义度量衡<br>属性：value/min/max<br>4)progress:进度条<br>属性：value/min/max<br>5)dialog:对话框或窗口<br>6)figure:用于对元素进行组合（一般用来组合一张图的标题、图片和图片描述等）</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>HTML多媒体</strong>
</div>

<p><strong>1)audio</strong><br>播放音乐或音频。IE9以下版本不支持</p>
<p>a)支持的格式<br>.mp3/.ogg/.wav</p>
<p>b)属性<br>src:文件路径<br>autoplay:自动播放<br>loop:循环<br>controls:控制条<br>muted:静音<br>preload:预加载(当使用autoplay时，preload自动失效)</p>
<p><strong>2)video</strong><br>加载视频，IE9以下版本不支持。<br>a)支持的格式<br>.mp4/.ogg/.webm<br>b)属性<br>src:文件路径<br>autoplay:自动播放<br>loop:循环<br>controls:控制条<br>muted:静音<br>preload:预加载(当使用autoplay时，preload自动失效)<br>width:宽度<br>height:高度<br>poster:海报</p>
<p><strong>3)embed</strong><br>嵌入内容或加载插件</p>
<p>属性:<br>src:文件路径<br>width:宽度<br>height:高度<br>type:类型</p>
<p><strong>4)canvas</strong><br>画布:是一个容器元素<br>注意：<br>a.单独使用canvas没有意义，它必须结合JavaScript使用。它具体功能体现是通过JavaScript体现来的<br>b.canvas的宽高最好不要通过css实现，而是直接使用标签属性width和height实现。</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>HTML5常用属性</strong>
</div>

<p>HTML5常用属性：</p>
<p>1)contentEditable<br>将标签转换为客编辑状态。可用于所有标签。它的值有true/false。<br>默认值为false,不可以编辑</p>
<p>2)hidden<br>对元素进行隐藏。一般用来传值或当某个条件成立，执行内容显示。默认值为hidden。</p>
<p>3)data-*<br>用于存储页面或应用程序的私有自定义数据。一般用于传值。</p>
<p>4)multiple<br>规定输入域中可选择多个内容。用于表单组件中，如file/select.</p>
<p>5)required<br>约束表单元素在提交前必须输入值。用于表单组件中，需要结合提交按钮使用。</p>
<p>6)pattern<br>用于验证输入字段的模式。用于表单组件中，需要结合提交按钮使用</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>HTML5表单组件</strong>
</div>

<p>表单组件<br>1)color: 颜色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;form action&#x3D;&quot;&quot;&gt;<br>      &lt;input type&#x3D;&quot;color&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;111<br>  &lt;&#x2F;form&gt;<br></code></pre></td></tr></table></figure>
<p>2)email: 邮箱<br>3)tel: 电话号码<br>4)url: 网址<br>5)number: 数字<br>6)range: 范围<br>7)search: 搜索<br>8)date: 日期<br>9)datatime: 日期时间<br>10)datatime-load: 本一日期时间<br>11)year: 年份<br>12)month: 月份<br>13)time: 时间</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>表单属性</strong>
</div>

<p>1）formaction:修改action数据提交的地方<br>2）formenctype:修改表单请求的类型<br>3）formmethod:修改数据提交的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;GET&quot;&gt;<br>      &lt;input type&#x3D;&quot;color&quot; name&#x3D;&quot;&quot; formmethod&#x3D;&quot;POST&quot; id&#x3D;&quot;&quot;&gt;<br>      &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;<br>  &lt;&#x2F;form&gt;<br></code></pre></td></tr></table></figure>
<p>4）form:设置表单元素属于哪个表单<br>5）novalidate:不验证</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>input属性</strong>
</div>

<p>1)autocomplete:自动完成<br>用来帮助用户输入，每一次输入的内容，浏览器是否保存输入的值，以备将来使用。<br>值有: on / off ，默认为 on<br>为了保护敏感数据(如用户账号、密码等)，避免本地浏览器对他们不安全存储，一般需要关闭。<br>2)autofocus:自动获取焦点<br>3)step:步长<br>4)multiple:多选<br>5)pattern:正则匹配<br>6)placeholder:输入提示<br>7)required:必须输入</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS3新特性</strong>
</div>

<p>1)选择器<br>2)阴影<br>3)形状转化（2D &lt;-&gt; 3D）<br>4)变形<br>5)动画(过渡动画、帧动画)<br>6)边框<br>7)多重背景<br>8)反射<br>9)文字<br>10)颜色(rgba/hsl/hsla)<br>11)滤镜(filter)<br>12)弹性布局<br>13)多列布局<br>14)盒模型<br>15)Web字体<br>16)媒体查询</p>
</p>



<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS3属性前缀</strong>
</div>
CSS3不是属于浏览器或同一浏览器的不同版本都支持，所以需要兼容处理，通常的做法就是加厂商前缀

<p>1)主流浏览器内核<br>a)Trident: IE内核<br>b)Webkit: Chrome和Safari内核<br>c)Gecke: FireFox内核<br>d)Blink: Chrome和Opera内核</p>
<p>Tip(技巧)：<br>目前国内的浏览器大多都是双内核的(IE内核Chrome内核)</p>
<p>2)厂商前缀<br>IE: -ms-<br>Chrome&amp;Safari: -webkit-<br>FireFox: -moz-<br>Opera: -o-</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS3选择器</strong>
</div>

<p>丰富选择的目的，在标签中减少class和id属性的使用</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>属性选择器</strong>
</div>



<p>具有class的属性颜色为红色<br>p[class]{<br>    color:red<br>}</p>
<p>class属性等于content的标签颜色为红色<br>p[class=content]{<br>    color:red<br>}</p>
<p>class属性以content开头的标签颜色为红色<br>p[class^=content]{<br>    color:red<br>}</p>
<p>class属性以content结尾的标签颜色为红色<br>p[class$=content]{<br>    color:red<br>}</p>
<p>class属性包含p的标签颜色为红色<br>p[class$=p]{<br>    color:red<br>}</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>结构性伪类</strong>
</div>


<p>1）:root 匹配html标签，body选择器效果一样<br>:root {<br>    background-color: red;<br>}  </p>
<p>2)子元素选择 匹配父元素中连续的子元素</p>
<p>:first-child: 第一个子元素<br>:last-child: 最后一个子元素<br>:nth-last-child(n): 倒数第n个元素<br>:nth-child(n): 第几个元素</p>
<p>3) nth-of-type类:用于匹配父元素中兄弟子元素，可以用于子元素非连续的情况<br>   :nth-of-type(n)<br>   :nth-last-of-type(n)</p>
<p>4).其他</p>
<p>1) :only-child     父元素中仅有一个子元素</p>
<p>2) :only-of-type   父元素中仅有一个兄弟元素<br>:only-of-type 代表了任意一个元素，这个元素没有其他相同类型的兄弟元素(可以有多个兄弟元素)。</p>
<p>3) :empty          没有子元素，包括文本元素，即查找空元素 </p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>目标伪类</strong>
</div>

<p>目标伪类<br>:target :匹配URL指向的元素</p>
<p>点击a标签jump1，跳转到p标签的id=jump1的位置，同时字体颜色变为red</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">p:target &#123;<br>	color:red<br>&#125;<br><br>&lt;a href&#x3D;&quot;#jump1&quot;&gt;jump1&lt;&#x2F;a&gt;<br>&lt;a href&#x3D;&quot;#jump2&quot;&gt;jump2&lt;&#x2F;a&gt;<br><br>&lt;p id&#x3D;&quot;jump1&quot;&gt;11111&lt;&#x2F;p&gt;<br>&lt;p id&#x3D;&quot;jump2&quot;&gt;22222&lt;&#x2F;p&gt;<br></code></pre></td></tr></table></figure>


</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>UI元素状态伪类</strong>
</div>

<p>:enable 匹配所有用户界面(form表单)中处于可用状态的元素<br>:disable 匹配所有用户界面(form表单)中处于不可用状态的元素<br>:checked 匹配所有用户界面(form表单)中处于选中状态的元素(只在Opera中有效)<br>::selection 匹配元素中被用户选中或处于高亮状态的部分</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>否定伪类</strong>
</div>

<p>:not(p)<br>container下面的非p标签颜色都是红色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">.container :not(p)&#123;<br>	color:red;<br>&#125;<br><br>&lt;div class&#x3D;&quot;container&quot;&gt;<br>	&lt;p&gt;111&lt;&#x2F;p&gt;<br>	&lt;p&gt;111&lt;&#x2F;p&gt;<br>	&lt;span&gt;222&lt;&#x2F;span&gt;<br>&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure>


</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>通用兄弟元素选择器</strong>
</div>

<p>通用兄弟元素选择器: ~</p>
<p>div2的字体变为红色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">.div1~.div2 &#123;<br>          color: red;<br>      &#125;<br><br> &lt;div class&#x3D;&quot;container&quot;&gt;<br>          &lt;div class&#x3D;&quot;div1&quot;&gt;1111&lt;&#x2F;div&gt;<br>          &lt;div class&#x3D;&quot;div2&quot;&gt;1111&lt;&#x2F;div&gt;<br>          &lt;div class&#x3D;&quot;div3&quot;&gt;1111&lt;&#x2F;div&gt;<br>      &lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure>


</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS3文本</strong>
</div>

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>文本阴影((IE9以上支持))</strong>
</div>

<p>文本阴影：<br>text-shadow: 水平偏移距离 垂直偏移距离 模糊距离 [阴影尺寸]  [颜色]  [inset] </p>
<img src="/image/htmlSummary/44.png" style="width: 1360">

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>文本自动换行(主流浏览器都支持)</strong>
</div>

<p>word-wrap: normal | break-word</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>单词拆分(主流浏览器都支持)</strong>
</div>

<p>单词拆分<br>word-break: normal | break-all | keep-all;</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>文本拆分(所有主流浏览器都不支持)</strong>
</div>

<p>text-wrap: normal | none | unrestricted | suppress;</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>文本溢出(重要)</strong>
</div>

<p>a)单文本溢出(重要)<br>text-overflow: clip | ellipsis | string;</p>
<p>处理文字溢出样式：</p>
<p><code>width: px/%/em/rem....;</code><br><code>white-space: nowrap; //不允许换行</code><br><code>-ms-text-overflow:ellipsis; //处理IE兼容</code><br><code>text-overflow:ellipsis; //隐藏的部分用省略号表示</code><br><code>overflow:hidden;    //溢出隐藏</code></p>
<img src="/image/htmlSummary/45.png" style="width: 1360">



<p>b)多行文本溢出(IE9以下版本不支持，主要是谷歌支持)</p>
<p><code>width: px/%/em/rem....;</code><br><code>display: -webkit-box;</code><br><code>-webkit-box-orient: vertical;</code><br><code>-webkit-line-clamp: 行数</code><br><code>white-space: wrap; //允许换行</code><br><code>overflow:hidden;    //溢出隐藏</code></p>
<img src="/image/htmlSummary/46.png" style="width: 1360">


</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS3边框</strong>
</div>




</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>圆角边框(重要)</strong>
</div>

<p>border-radius: 1-4 length|% / 1-4 length|%;</p>
<p>border-radius:2em;<br><mark>等价于</mark><br>border-top-left-radius:2em;<br>border-top-right-radius:2em;<br>border-bottom-right-radius:2em;<br>border-bottom-left-radius:2em;</p>
<img src="/image/htmlSummary/47.png" style="width: 1360">

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>边框阴影(IE9以上支持)</strong>
</div>

<p>box-shadow: 水平偏移距离 垂直偏移距离 模糊距离 [阴影尺寸]  [颜色]  [inset] </p>
<img src="/image/htmlSummary/48.png" style="width: 1360">


</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>边框图片(IE11及以后的版本支持)</strong>
</div>

<p>border-image 属性是一个简写属性，用于设置以下属性：</p>
<p>border-image-source<br>border-image-slice<br>border-image-width<br>border-image-outset<br>border-image-repeat</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">border-image-source</td>
<td align="left">用在边框的图片的路径</td>
</tr>
<tr>
<td align="left">border-image-slice</td>
<td align="left">图片边框向内偏移。</td>
</tr>
<tr>
<td align="left">border-image-width</td>
<td align="left">图片边框的宽度。</td>
</tr>
<tr>
<td align="left">border-image-outset</td>
<td align="left">边框图像区域超出边框的量。</td>
</tr>
<tr>
<td align="left">border-image-repeat</td>
<td align="left">图像边框是否应平铺(repeated)、铺满(rounded)或拉伸(stretched)。</td>
</tr>
</tbody></table>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS3背景</strong>
</div>

</p>


<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>多重背景</strong>
</div>

<p>多重背景: 多张图片叠加的效果<br>background: 背景色 背景图片 平铺方式 位置, 背景色 背景图片 平铺方式 位置…</p>
<p>定义和用法<br>background 简写属性在一个声明中设置所有的背景属性。</p>
<p>可以设置如下属性：</p>
<ul>
<li>background-color</li>
<li>background-position</li>
<li>background-size: 固定长度 | 百分值 | cover | contain;</li>
<li>background-repeat:repeat | no-repeat;</li>
<li>background-origin:  border-box | padding-box | content-box;</li>
<li>background-clip: border-box | padding-box | content-box;</li>
<li>background-attachment</li>
<li>background-image</li>
</ul>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">background-color</td>
<td align="left">规定要使用的背景颜色。</td>
</tr>
<tr>
<td align="left">background-position</td>
<td align="left">规定背景图像的位置。</td>
</tr>
<tr>
<td align="left">background-size</td>
<td align="left">规定背景图片的尺寸。</td>
</tr>
<tr>
<td align="left">background-repeat</td>
<td align="left">规定如何重复背景图像。</td>
</tr>
<tr>
<td align="left">background-origin</td>
<td align="left">规定背景图片的定位区域。</td>
</tr>
<tr>
<td align="left">background-clip</td>
<td align="left">规定背景的绘制区域。</td>
</tr>
<tr>
<td align="left">background-attachment</td>
<td align="left">规定背景图像是否固定或者随着页面的其余部分滚动。</td>
</tr>
<tr>
<td align="left">background-image</td>
<td align="left">规定要使用的背景图像。</td>
</tr>
<tr>
<td align="left">inherit</td>
<td align="left">规定应该从父元素继承 background 属性的设置。</td>
</tr>
</tbody></table>
<img src="/image/htmlSummary/49.png" style="width: 1360">

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS3颜色</strong>
</div>

<p>1)RGBA</p>
<p>background-color:rgba(red, green, blue, alpha);</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">red</td>
<td align="left">定义红色值，取值范围为 0 ~ 255，也可以使用百分比 0% ~ 100%。</td>
</tr>
<tr>
<td align="left">green</td>
<td align="left">定义绿色值，取值范围为 0 ~ 255，也可以使用百分比 0% ~ 100%。</td>
</tr>
<tr>
<td align="left">blue</td>
<td align="left">定义蓝色值，取值范围为 0 ~ 255，也可以使用百分比 0% ~ 100%。</td>
</tr>
<tr>
<td align="left">alpha</td>
<td align="left">透明度    定义透明度 0（完全透明） ~ 1（完全不透明）</td>
</tr>
</tbody></table>
<p>2)HSL<br>hsl(h,s,l)<br>h:色调    取值范围: 0-360<br>s:饱和度  取值范围: 0-100%<br>l:亮度    取值范围: 0-100%</p>
<p>3)HSLA<br>hsl(h,s,l,a)<br>h:色调      取值范围: 0-360<br>s:饱和度    取值范围: 0-100%<br>l:亮度      取值范围: 0-100%<br>a:不透明度  取值范围: 0-1的一个小数</p>
</p>


<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>opacity</strong>
</div>

<p>opacity<br>调整元素的不透明度，大多数情况下用于做元素的遮罩效果。取值范围: 0-1的一个小数<br>所有浏览器都支持 opacity 属性。<br>注释：IE8 以及更早的版本支持替代的 filter 属性。例如：filter:Alpha(opacity=50)。</p>
<img src="/image/htmlSummary/50.png" style="width: 1360">

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS3渐变</strong>
</div>

<div style="text-align: center; color: red">
    <strong>1)线性渐变</strong>
</div>

<p>background: linear-gradient(方向或角度,颜色1 百分比,颜色2 百分比,….)</p>
<p>方向:<br>to left :从右向左渐变<br>to right:从左向右渐变<br>to top  :从下向上渐变<br>to bottom :从上向下渐变<br>to top left:从右下角向左上角渐变<br>to top right:从左下角向右上角渐变<br>to bottom left:从右上角向左下角渐变<br>to bottom right:从左上角向右下角渐变</p>
<p>角度:<br>比如45度角，应该为： 45deg</p>
<p>颜色取值:<br>1)表示颜色的单词<br>2)16进制颜色<br>3)表示颜色的函数(rgb()/rgba()/hsl()/hsla()…..)</p>
<div style="text-align: center; color: red">
    <strong>2)径向渐变（沿半径方向渐变）</strong>
</div>


<p>径向渐变与线性渐变类似，不同之处在于它们从中心点放射出去。您可以指定该中心点在哪里。您也可以将它们设置为圆形或椭圆形。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Using_CSS_gradients" target="_blank" rel="noopener">径向渐变（沿半径方向渐变）</a></p>
<div style="text-align: center; color: red">
    <strong>3)文字渐变</strong>
</div>


<p>html代码 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;p&gt;111111111你说你从哪时长是参数111111111&lt;&#x2F;p&gt;<br></code></pre></td></tr></table></figure>

<p>css代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">p &#123;<br>           font-size: 30px;<br>           background-image: -webkit-linear-gradient(bottom, red, blue, green);<br><br>           -webkit-background-clip: text;<br><br>           -webkit-text-fill-color: transparent;<br>       &#125;<br></code></pre></td></tr></table></figure>
<p>效果图</p>
<img src="/image/htmlSummary/51.png" style="width: 1360">


</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>box-sizing</strong>
</div>

<p>box-sizing: content-box|border-box|inherit;</p>
<p>box-sizing:border-box<br>为元素设定的宽度和高度决定了元素的边框盒。<br>就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。<br>通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS3动画 transform</strong>
</div>

<p>定义和用法<br>transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">none</td>
<td align="left">定义不进行转换。</td>
</tr>
<tr>
<td align="left">matrix(n,n,n,n,n,n)</td>
<td align="left">定义 2D 转换，使用六个值的矩阵。</td>
</tr>
<tr>
<td align="left">matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)</td>
<td align="left">定义 3D 转换，使用 16 个值的 4x4 矩阵。</td>
</tr>
<tr>
<td align="left">translate(x,y)</td>
<td align="left">定义 2D 转换。</td>
</tr>
<tr>
<td align="left">translate3d(x,y,z)</td>
<td align="left">定义 3D 转换。</td>
</tr>
<tr>
<td align="left">translateX(x)</td>
<td align="left">定义转换，只是用 X 轴的值。</td>
</tr>
<tr>
<td align="left">translateY(y)</td>
<td align="left">定义转换，只是用 Y 轴的值。</td>
</tr>
<tr>
<td align="left">translateZ(z)</td>
<td align="left">定义 3D 转换，只是用 Z 轴的值。</td>
</tr>
<tr>
<td align="left">scale(x,y)</td>
<td align="left">定义 2D 缩放转换。</td>
</tr>
<tr>
<td align="left">scale3d(x,y,z)</td>
<td align="left">定义 3D 缩放转换。</td>
</tr>
<tr>
<td align="left">scaleX(x)</td>
<td align="left">通过设置 X 轴的值来定义缩放转换。</td>
</tr>
<tr>
<td align="left">scaleY(y)</td>
<td align="left">通过设置 Y 轴的值来定义缩放转换。</td>
</tr>
<tr>
<td align="left">scaleZ(z)</td>
<td align="left">通过设置 Z 轴的值来定义 3D 缩放转换。</td>
</tr>
<tr>
<td align="left">rotate(angle)</td>
<td align="left">定义 2D 旋转，在参数中规定角度。</td>
</tr>
<tr>
<td align="left">rotate3d(x,y,z,angle)</td>
<td align="left">定义 3D 旋转。</td>
</tr>
<tr>
<td align="left">rotateX(angle)</td>
<td align="left">定义沿着 X 轴的 3D 旋转。</td>
</tr>
<tr>
<td align="left">rotateY(angle)</td>
<td align="left">定义沿着 Y 轴的 3D 旋转。</td>
</tr>
<tr>
<td align="left">rotateZ(angle)</td>
<td align="left">定义沿着 Z 轴的 3D 旋转。</td>
</tr>
<tr>
<td align="left">skew(x-angle,y-angle)</td>
<td align="left">定义沿着 X 和 Y 轴的 2D 倾斜转换。</td>
</tr>
<tr>
<td align="left">skewX(angle)</td>
<td align="left">定义沿着 X 轴的 2D 倾斜转换。</td>
</tr>
<tr>
<td align="left">skewY(angle)</td>
<td align="left">定义沿着 Y 轴的 2D 倾斜转换。</td>
</tr>
<tr>
<td align="left">perspective(n)</td>
<td align="left">为 3D 转换元素定义透视视图。</td>
</tr>
</tbody></table>
<ol>
<li><p>translate:   位移效果<br>translate(x,y) 沿X Y轴位移。注意：X正轴向右，Y的正轴向下<br>translateX(x)  沿X轴方向<br>translateY(y)  沿Y轴方向</p>
</li>
<li><p>scale       缩放效果<br>scale(x,y)     进行大小的缩放<br>transform: scale(.5, .5);<br>div的大小缩小了一倍，变为了100px x 100px的盒子</p>
</li>
</ol>
<p>transform: scale(2, 2);<br>div的大小扩大了一倍，变为了400px x 400px 的盒子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">  &lt;style&gt;<br>        div &#123;<br>            width: 200px;<br>            height: 200px;<br>            background-color: aquamarine;<br>            transform: scale(.5, .5);<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div&gt;&lt;&#x2F;div&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>

<ol start="3">
<li><p>rotate:   旋转效果<br>rotate(angle)<br>定义 2D 旋转，在参数中规定角度,顺时针旋转xxxdeg。<br>沿着顺时针旋转了10度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">   div &#123;<br>            width: 200px;<br>            height: 200px;<br>            margin: 300px auto;<br>            background-color: aquamarine;<br>            transform: rotate(10deg);<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div&gt;&lt;&#x2F;div&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>
</li>
<li><p>skew:   变形效果<br>skew(x-angle,y-angle)<br>定义沿着 X 和 Y 轴的 2D 倾斜转换。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"> div &#123;<br>            width: 200px;<br>            height: 200px;<br>            margin: 300px auto;<br>            background-color: aquamarine;<br>            transform: skew(30deg,30deg);<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div&gt;&lt;&#x2F;div&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>

<ol start="5">
<li>matrix(待写):<br>matrix(n,n,n,n,n,n)<br>定义 2D 转换，使用六个值的矩阵。</li>
</ol>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>transform-origin</strong>
</div>
transform-origin: 调整元素的基点
定义和用法
transform-origin 属性允许您改变被转换元素的位置。

<p>2D 转换元素能够改变元素 x 和 y 轴。3D 转换元素还能改变其 Z 轴。</p>
<p>语法<br>transform-origin: x-axis y-axis z-axis;</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">x-axis</td>
<td align="left">定义视图被置于 X 轴的何处。可能的值：left center right length %</td>
</tr>
<tr>
<td align="left">y-axis</td>
<td align="left">定义视图被置于 Y 轴的何处。可能的值：top center bottom length %</td>
</tr>
<tr>
<td align="left">z-axis</td>
<td align="left">定义视图被置于 Z 轴的何处。可能的值：length</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">  .content &#123;<br>            width: 400px;<br>            height: 400px;<br>            margin: 300px auto;<br>            border: 1px solid rgb(230, 7, 7);<br>        &#125;<br>        .box &#123;<br>            width: 200px;<br>            height: 200px;<br>            transform: rotate(30deg);<br>            background-color: aquamarine;<br>            transform-origin: 0 0;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div class&#x3D;&quot;content&quot;&gt;<br>        &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>


</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>perspective</strong>
</div>

<p>perspective:让子元素获得透视效果<br>在父元素里面写:<br>perspective:length|none;</p>
<p>在子元素写<br>transform: rotateX(45deg);</p>
<p>主流浏览器都不支持，<br>苹果，谷歌要加-webkit-,或在长度后加单位<br>火狐浏览器要加-moz-,或在长度后加单位<br>IE浏览器要加-ms-,或在长度后加单位<br>欧鹏浏览器要加-o-,或在长度后加单位</p>
<img src="/image/htmlSummary/52.png" style="width: 1360">

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>transform-style 3D 效果</strong>
</div>

<p>transform-style<br>在3D空间中呈现被嵌套的元素(必须与 transform 属性一同使用)。</p>
<p>transform-style: flat (子元素将不保留其 3D 位置) | perserve-3d (子元素将保留其 3D 位置) ;</p>
<p>Firefox 支持 transform-style 属性。<br>Chrome、Safari 和 Opera 支持替代的 -webkit-transform-style 属性。</p>
</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>rotateZ (待写一个正方形) </strong>
</div>

<p>rotateZ() 函数定义了一个转换，它可以让一个元素围绕横Z轴旋转，而不会导致进行变形。<br>rotateZ() 引起的旋转量由<angle>。指定如果为正，则顺时针方向移动;如果为负，则逆时针方向移动。</p>
</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>过渡动画transition</strong>
</div>

<ol>
<li><p>常规用法:<br>transition-property<br>transition-duration<br>transition-timing-function<br>transition-delay<br>注释：请始终设置 transition-duration 属性，否则时长为 0，就不会产生过渡效果。</p>
</li>
<li><p>简洁(复合)用法:</p>
</li>
</ol>
<p>transition: property-name-list<code>|</code>all duration  timing-fuction delay;</p>
<p>a)可以使用的属性有:<br>i)颜色:<br>color background-color border-color outline-color<br>ii)位置:<br>background-position left right top bottom<br>iii)长度:<br>max-height min-height max-width min-width height width<br>border-width margin padding outline-width outline-offset<br>font-size line-height text-index vertical-align<br>border-spacing letter-spacing word-spacing<br>iv)数字:<br>opacity visibility z-index font-weight zoom<br>v)组合:<br>text-shadow transform box-shadow clip<br>vi)其他<br>gradient</p>
<p>b)duration: 动画持续时间，一般以秒(s)或者毫秒(ms)为单位<br>c)timing-function:动画函数<br>i)linear:匀速<br>ii)ease:变速（先慢后快，最后再慢）<br>iii)ease-in:变速（由慢到快）<br>iv)ease-out:变速（由快到慢）<br>v)ease-in-out:变速（慢速开始，慢速结束）<br>vi)cubic-bezier(n,n,n):自行设定变速，n的值在0-1之间</p>
<p>d)delay:动画延时时间，一般以秒(s)或毫秒(ms)为单位</p>
<p>语法<br>transition: property duration timing-function delay;</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">transition-property</td>
<td align="left">规定设置过渡效果的 CSS 属性的名称。</td>
</tr>
<tr>
<td align="left">transition-duration</td>
<td align="left">规定完成过渡效果需要多少秒或毫秒。</td>
</tr>
<tr>
<td align="left">transition-timing-function</td>
<td align="left">规定速度效果的速度曲线。</td>
</tr>
<tr>
<td align="left">transition-delay</td>
<td align="left">定义过渡效果何时开始。</td>
</tr>
</tbody></table>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>animation动画</strong>
</div>

<p>关键帧动画<br>步骤:<br>1)设置关键帧</p>
<p>a)如果只有两个关键帧<br>@keyframes 动画名 {<br>    0%: {样式表}<br>    100%: {样式表}<br>}<br>或:<br>@keyframes 动画名 {<br>    from: {样式表}<br>    to: {样式表}<br>}<br>b)如果是多个关键帧<br>@keyframes 动画名 {<br>    0%: {样式表}<br>    25%: {样式表}<br>    60%: {样式表}<br>    70%: {样式表}<br>    …..<br>    100%: {样式表}<br>}<br>注意:这里的百分比一般是升序值，可以是0%-100%之间的任意值，也可以是倒序的。</p>
<p>2)实施动画<br>a)常规用法<br>animation-name: 来自于@keyframes定义的动画名</p>
<p>animation-duration 动画持续时间，一般以秒(s)或者毫秒(ms)为单位(默认为0)</p>
<p>animation-timing-function 动画函数<br>i)linear:匀速(默认值)<br>ii)ease:变速（先慢后快，最后再慢）<br>iii)ease-in:变速（由慢到快）<br>iv)ease-out:变速（由快到慢）<br>v)ease-in-out:变速（慢速开始，慢速结束）<br>vi)cubic-bezier(n,n,n):自行设定变速，n的值在0-1之间</p>
<p>animation-delay 动画延时时间，一般以秒(s)或毫秒(ms)为单位</p>
<p>animation-iteration-count: 动画循环播放的次数<br>1)number: 按设定次数循环播放(默认次数为1次)<br>2)infinite: 一直循环播放</p>
<p>animation-direction: 动画播放完是否反向播放<br>1)normal: 不反向(默认值)<br>2)alternate:反向</p>
<p>animation-play-state:动画播放或停止播放<br>1)paused: 停止播放<br>2)running:播放(默认值)</p>
<p>b)简洁用法<br>animation: name duration timing-functon delay iteration-count direction;</p>
</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>UI元素状态伪类</strong>
</div>

<p>网站开发策略：先整体再局部，至顶向下，逐步细化</p>
</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>UI元素状态伪类</strong>
</div>

<p>网站开发策略：先整体再局部，至顶向下，逐步细化</p>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>UI元素状态伪类</strong>
</div>

<p>网站开发策略：先整体再局部，至顶向下，逐步细化</p>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>UI元素状态伪类</strong>
</div>

<p>网站开发策略：先整体再局部，至顶向下，逐步细化</p>
</p>

</div>]]></content>
      <categories>
        <category>HTML5andCSS3总复习</category>
      </categories>
      <tags>
        <tag>HTML5andCSS3总复习</tag>
      </tags>
  </entry>
  <entry>
    <title>Git和Github入门</title>
    <url>/2020/ckpf35kk9000tjov4ceoidihw/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=355715222,2610893624&fm=26&gp=0.jpg" style="width: 200px ;height: 90px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Git和Github入门</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Git和Github入门
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>第一阶段单枪匹马干</strong>
</div>

<p>想要让git对一个目录进行版本控制需要以下步骤</p>
<ul>
<li>进入要管理的文件夹</li>
<li>执行初始化命令<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git init<br></code></pre></td></tr></table></figure></li>
<li>管理目录下的文件状态<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git status<br>注：新增的文件和修改过后的文件都是红色<br></code></pre></td></tr></table></figure></li>
<li>管理指定文件（红变绿）<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git add  文件名<br>git add.<br></code></pre></td></tr></table></figure></li>
<li>个人信息配置：用户名、邮箱【只需配置一次即可】<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git config --global user.email &quot;you@example.com&quot;<br>git config --global user.name &quot;Your Name&quot;<br></code></pre></td></tr></table></figure></li>
<li>生成版本<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git commit -m &#39;描述信息&#39;<br></code></pre></td></tr></table></figure></li>
<li>查看版本记录<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git log<br></code></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<div style="text-align: center; color: red">
    <strong>以下总结：</strong>
</div>


<ol>
<li><p>进入要管理的目录</p>
</li>
<li><p><strong>git init</strong> 初始化，即：让git帮助我们管理当前文件夹</p>
</li>
<li><p><strong>git status</strong> 检测当前目录下文件的状态</p>
</li>
<li><p><strong>三种状态的变化</strong></p>
</li>
</ol>
<ul>
<li>红色：新增的文件/修改了原老文件  –&gt; git add 文件名</li>
<li>绿色：git 已经管理起来 —&gt; git commit -m ‘描述信息’</li>
<li>生成版本</li>
</ul>
<hr>
<div style="text-align: center; color: red">
    <strong>git三大区域图解</strong>
</div>

<img src="/image/gitSummary/01.png">

<hr>
<div style="text-align: center; color: red">
    2.2<strong>第二阶段：拓展新功能</strong>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git  add .<br>git  commit  -m &#39;短视频&#39;<br></code></pre></td></tr></table></figure>

<div style="text-align: center; color: red">
    2.3<strong>第三阶段：“约饭事件”</strong>
</div>


<ul>
<li><p>回滚至之前版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git log   <br>git reset --hard 版本号<br></code></pre></td></tr></table></figure>
</li>
<li><p>回滚至之后版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git reflog<br>git reset --hard 版本号<br></code></pre></td></tr></table></figure>


</li>
</ul>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>git分支</strong>
</div>


<p><strong>商城and紧急bug修复</strong></p>
<p>命令总结</p>
<ul>
<li>查看分支<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git branch<br></code></pre></td></tr></table></figure></li>
<li>创建分支<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git branch 分支名称<br></code></pre></td></tr></table></figure></li>
<li>切换分支<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git checkout  分支名称<br></code></pre></td></tr></table></figure></li>
<li>分支合并（可能产生冲突）<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git merge  要合并的分支<br>注意：切换分支再合并<br></code></pre></td></tr></table></figure></li>
<li>删除分支<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git branch -d  分支名称<br></code></pre></td></tr></table></figure>
创建dev分支并且切换到dev分支<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git checkout -b dev<br></code></pre></td></tr></table></figure>


</li>
</ul>
</p>


<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>第五阶段：进军三路屯</strong>
</div>

<p><strong>在家里上传代码</strong></p>
<ol>
<li>给远程仓库起别名<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git remote add origin  远程仓库地址<br></code></pre></td></tr></table></figure></li>
<li>向远程推送代码<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git push -u origin 分支名称<br></code></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>在公司新电脑上第一次获取代码</strong></p>
<ol>
<li>克隆远程仓库代码<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git clone 远程仓库地址 （内部已经实现 git remote add origin 远程仓库地址）<br></code></pre></td></tr></table></figure></li>
<li>切换分支<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git checkout  分支<br></code></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>在公司进行开发</strong></p>
<ol>
<li><p>切换到dev分支进行开发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git checkout dev<br></code></pre></td></tr></table></figure></li>
<li><p>把master分支合并到dev 【仅一次】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git merge master<br></code></pre></td></tr></table></figure></li>
<li><p>修改代码</p>
</li>
<li><p>提交代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git add<br>git commit -m &#39;xxx&#39;<br>git push origin dev<br></code></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>回到家中继续写代码</strong></p>
<ol>
<li><p>切换到dev分支进行开发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git checkout  dev<br></code></pre></td></tr></table></figure></li>
<li><p>拉代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git pull origin dev<br></code></pre></td></tr></table></figure></li>
<li><p>继续开发</p>
</li>
<li><p>提交代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git add<br>git commit -m &#39;xxx&#39;<br>git push origin dev<br></code></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>在公司继续开发</strong></p>
<ol>
<li><p>切换到dev分支进行开发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git checkout  dev<br></code></pre></td></tr></table></figure></li>
<li><p>拉代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git pull origin dev<br></code></pre></td></tr></table></figure></li>
<li><p>继续开发</p>
</li>
<li><p>提交代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git add<br>git commit -m &#39;xxx&#39;<br>git push origin dev<br></code></pre></td></tr></table></figure>


</li>
</ol>
<p><strong>开发完毕，要上线</strong></p>
<ol>
<li>将dev分支合并到master，进行上线<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git checkout  master<br>git merge dev<br>git push origin master<br></code></pre></td></tr></table></figure></li>
<li>把dev分支也推送到远程<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git checkout dev<br>git merge master<br>git push origin dev<br></code></pre></td></tr></table></figure>


</li>
</ol>
<ol start="3">
<li><mark>git pull origin dev 等同于下面两个命令</mark><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git fetch origin dev<br>git merge origin&#x2F;dev<br></code></pre></td></tr></table></figure>

</li>
</ol>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>rebase的使用，及注意事项</strong>
</div>

<p>保持代码提交整洁(变基)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git rebase 分支<br></code></pre></td></tr></table></figure>

<p>记录图形展示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git log --graph --pretty&#x3D;format:&quot;%h %s&quot;<br></code></pre></td></tr></table></figure>

</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>给开源软件贡献代码</strong>
</div>

<ol>
<li><p>fork源码<br>将别人的源码拷贝到我自己的远程仓库</p>
</li>
<li><p>在自己仓库进行修改代码</p>
</li>
<li><p>给源代码的作者提交 修复bug 的申请(pull request)</p>
</li>
</ol>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>配置</strong>
</div>


<p>3.1配置</p>
<p>项目配置文件:项目<code>/.git/config</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git config --local user.name&#39;武沛齐&#39;<br>git config --local user.emai7 &quot;wupeiqi@xx.com&quot;<br></code></pre></td></tr></table></figure>

<p>全局配置文件: <code>~/.gitconfig</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git config --global user.name &quot; wupeiq&#39;<br>git config --global user.name &quot;wupeiqi@xx.com&quot;<br></code></pre></td></tr></table></figure>

<p>系统配置文件:<code>/etc/.gitconfig</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git config --system user.name &quot;wupeiq&#39;<br>git config --system user.name &quot;wupeiqi@xx.com &quot;<br></code></pre></td></tr></table></figure>

<p>注意:需要有root权限</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>应用场景∶</strong>
</div>

<p>应用场景∶</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git config --1ocal user.name&#39;武沛齐&quot;<br>git config --1ocal user.email &#39;wupeiqi @xx. com &#39;<br><br>git config --local merge.tool bc3<br>git config --1ocal mergetoo1.path &quot; &#x2F;usr&#x2F;loca1&#x2F;bin&#x2F;bcomp&#39;git config --1oca1 mergetoo1.keepBackup false<br><br>git remote add origin地址，默认添加在本地配置文件中(--loca1)<br></code></pre></td></tr></table></figure>





</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>免密码登录</strong>
</div>

<p>免密码登录<br>URL中体现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">原来的地址: https:&#x2F;&#x2F;github.com&#x2F;&#39;wuPeiqi&#x2F;dbhot.git<br>修改的地址:https:&#x2F;&#x2F;用户名:密码@github.com&#x2F;wupeiqi&#x2F;dbhot.git<br><br>git remote add origin https:&#x2F;&#x2F;用户名:密码@github.com&#x2F;wuPeiqi&#x2F;dbhot.git<br>git push origin master<br></code></pre></td></tr></table></figure>

<p>SSH实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">1．生成公钥和私钥&#96;(默认放在~&#x2F;.ssh目录下,id_rsa. pub公钥、id_rsa私钥)&#96;<br>ssh-keygen<br>2．拷贝公钥的内容,并设置到github中。<br>3．在git本地中配置ssh地址<br>git remote add origin git@github.com : wuPeiqi&#x2F;dbhot.git<br><br>4.以后使用<br>git push origin master<br></code></pre></td></tr></table></figure>
<p>git自动管理凭证</p>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>git忽略文件</strong>
</div>

<p>3.3 git忽略文件<br>让Git不再管理当前目录下的某些文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">*, h<br>!a.hfiles&#x2F;<br>*.py[clal d]<br></code></pre></td></tr></table></figure>
<p>更多参考:<a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a></p>
<p>3.4任务管理相关<br>issues，文档以及任务管理。<br>wiki，项目文档。</p>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong></strong>
</div>




</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong></strong>
</div>




</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>快速解决冲突</strong>
</div>

<ol>
<li><p>安装beyond compare</p>
</li>
<li><p>在git中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git config --local merge.tool bc3<br>git config --local merge.tool.path &#39;D:\beyondconpare\Beyond Compare 4&#39;<br>git config --local merge.tool.keepBackup false<br></code></pre></td></tr></table></figure></li>
<li><p>应用beyond compare 解决冲突</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git mergetool<br></code></pre></td></tr></table></figure>


</li>
</ol>
</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>总结</strong>
</div>

<ol>
<li><p>添加远程连接(别名)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git remote add origin 地址<br></code></pre></td></tr></table></figure>
</li>
<li><p>推动代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git push origin dev<br></code></pre></td></tr></table></figure>
</li>
<li><p>下载代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git clone 地址<br></code></pre></td></tr></table></figure>
</li>
<li><p>拉取代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git pull origin dev<br>等价于<br>git fetch origin dev<br>git merge origin&#x2F;dev<br></code></pre></td></tr></table></figure>













</li>
</ol>
</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS的四种引入方式</strong>
</div>



</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS的四种引入方式</strong>
</div>



</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS的四种引入方式</strong>
</div>



</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>记录git报错 error: failed to push some refs to 'git@github.com:xxxxxx/xxxxx.git' 的解决方案</strong>
</div>

<p>出现的错误<br>在使用git运行push命令到远程仓库时，发生错误，错误信息如下：</p>
<img src="/image/gitError/01.png">

<p>解决方案<br>首先运行拉取命令<br>把README.md文件克隆到本地库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git pull --rebase origin master<br></code></pre></td></tr></table></figure>

<p>最后再执行推送命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git push -u origin master<br></code></pre></td></tr></table></figure>
</p>























</div>]]></content>
      <categories>
        <category>Git和Github基础学习</category>
      </categories>
      <tags>
        <tag>Git和Github入门</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE总复习</title>
    <url>/2020/ckpf35kon004vjov46uf5hzlb/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">VUE复习</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
VUE复习
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>插值</strong>

</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">1. 文本 &#123;&#123;&#125;&#125;<br>2. 纯HTML<br>v-html,防止XSS.csrf <br>	<br>(1)前端过滤<br>(2)后台转义(&lt; &gt; &lt; &gt;)<br>(3)给cookie加上属性http<br></code></pre></td></tr></table></figure>



</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>v-if和v-show</strong>
</div>

<p>v-show:显示和隐藏元素，使用display:block/none</p>
<p>v-if:创建和删除元素。</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>v-class的绑定</strong>
</div>





</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>v-style的绑定</strong>
</div>





</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>v-条件渲染</strong>
</div>

<p>v-if<br>v-else-if<br>v-else</p>
</p>


<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>v-列表渲染</strong>
</div>

<p><code>&lt;li v-for=&quot;(item,index) in list&quot;&gt;{{item.name}}&lt;/li&gt;</code></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>v-列表key设定</strong>
</div>

<p><code>&lt;li :key=&quot;index&quot;  v-for=&quot;(item,index) in list&quot;&gt;{{item.name}}&lt;/li&gt;</code></p>
<p>key:<br>跟踪每一个节点的身份，从而重用和重新排列现有元素<br>理想的key值是每一项都有且唯一的id</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>v-列表数组更新检测</strong>
</div>

<p>a.使用以下方法操作数组，可以检测变动</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice()</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
<p>b.filter()、concat() 、 slice() 和map(),需要新数组替换旧数组</p>
<p>c.不能检测以下变动的数组</p>
<p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但是，可以使用 Vue.set(object, propertyName, value) 方法向嵌套对象添加响应式 property。例如，对于：</p>
<p>Vue.set(vm.someObject, ‘b’, 2)</p>
<p>您还可以使用 vm.$set 实例方法，这也是全局 Vue.set 方法的别名：<br>this.$set(this.someObject,’b’,2)<br><img src="/image/vueSummary/01.png"></p>
</p>


<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>v-列表过滤应用</strong>
</div>

<p>首先用了下列的知识点</p>
<ul>
<li>v-model</li>
<li>v-for</li>
<li>@input: 表单输入值就会触发</li>
<li>@change: 表单失去焦点就会触发</li>
<li>JS.filter:  过滤元素<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">官方filter细解</a></li>
<li>JS.indexOf: 查找元素返回索引号<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank" rel="noopener">官方indexOf细解</a></li>
</ul>
<p>总体代码<br><img src="/image/vueSummary/02.png"></p>
<p>演示效果图<br><img src="/image/vueSummary/01.gif"></p>
<p>总结一下：昨天晚上睡觉之前想了一下，进入了一个误区。<br>首先当触发输入框时，调用的是list这个数组的变化，来执行过滤函数。<br>当输入框没有触发时，也就是输入框为空。跳过methods方法里面的执行函数。<br>展示的是datalist数组。<br>如果没有list这个替身数组的话，只要我们调用过了handle函数，那么datalist这个数组<br>就永远不会变回原数组了。也就是没有触发输入框时，永远展示的是之前过滤的数组。</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>v-事件处理器</strong>
</div>

<img src="/image/vueSummary/03.png">



</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>v-事件修饰符</strong>
</div>

<ul>
<li><p>.stop</p>
</li>
<li><p>.prevent</p>
</li>
<li><p>.capture</p>
</li>
<li><p>.self</p>
</li>
<li><p>.once</p>
</li>
<li><p>.passive</p>
<p>阻止冒泡事件继续传播<br><code>&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</code></p>
<p>提交事件不再重载页面 阻止默认行为<br><code>&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</code></p>
<p>点击事件将只会触发一次<br><code>&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</code></p>
<p>即事件不是从内部元素触发的,只触发自身<br><code>&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</code></p>
</li>
</ul>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>v-按键修饰符</strong>
</div>


<p><code>&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</code></p>
<ul>
<li>.enter</li>
<li>.tab</li>
<li>.delete (捕获“删除”和“退格”键)</li>
<li>.esc</li>
<li>.space</li>
<li>.up</li>
<li>.down</li>
<li>.left</li>
<li>.right</li>
</ul>
<p>你还可以通过全局 config.keyCodes 对象自定义按键修饰符别名：</p>
<p>// 可以使用 <code>v-on:keyup.f1</code><br>Vue.config.keyCodes.f1 = 112</p>
<img src="/image/vueSummary/04.png">



</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>v-表单控件的绑定</strong>
</div>

<p>展示效果<br><img src="/image/vueSummary/05.png"></p>
<p>实际代码<br><img src="/image/vueSummary/06.png"></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>购物车vue逻辑的实现</strong>
</div>

<p>需要实现的效果<br><img src="/image/vueSummary/02.gif"></p>
<p>实际代码</p>
<img src="/image/vueSummary/07.png">


<p>注意：  <code>&lt;input type=&quot;checkbox&quot; v-model=&quot;checkgroup&quot; :value=&quot;data&quot; @change=&quot;handleList()&quot; name=&quot;&quot; id=&quot;&quot;&gt;</code><br><code>{{checkgroup}}</code><br>虽然 <code>v-model</code> 绑定的是<code>checkgroup</code> 这个变量，但是展示的数据是<code>value</code>里面的数据</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>表单修饰符</strong>
</div>

<p><strong>v-model.lazy</strong>:使input表单的事件触发变为失去焦点后才触发。</p>
<p>如果单纯使用v-model绑定，效果如下图所示<br><img src="/image/vueSummary/03.gif"></p>
<p>如果单纯使用v-model.lazy绑定，效果如下图所示<br><img src="/image/vueSummary/04.gif"></p>
<p>v-model.lazy的作用就是减少input表单事件的触发。</p>
<p><strong>v-model.number</strong>:如果input表单开头为<mark>数字</mark>，后面跟字母的话，是不会识别后面的字母。<br>效果如下图所示<br><img src="/image/vueSummary/05.gif"></p>
<p>注意如果第一个为 <mark>字母</mark> 的时候，这个功能就会失效。变成input 的v-model绑定</p>
<p><strong>v-model.trim</strong>:去掉输入框的首尾空格，不可以去掉中间的空格。<br>效果如下图所示<br><img src="/image/vueSummary/06.gif"></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>fetch请求</strong>
</div>

<p>注意fetch请求需要在第二个then拿回的是后台的数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">fetch(&quot;.&#x2F;json&#x2F;test.json&quot;).then(res &#x3D;&gt; &#123;<br>           return res.json()<br>           &#125;).then(res &#x3D;&gt; &#123;<br>            this.datalist &#x3D; res.data.films<br>           &#125;)<br></code></pre></td></tr></table></figure>

<img src="/image/vueSummary/08.png">
<img src="/image/vueSummary/09.png">



</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>axios请求</strong>
</div>

<p>axios返回的数据会被包装<br>axios会自动包装data属性 res.data</p>
<img src="/image/vueSummary/10.png">
<img src="/image/vueSummary/11.png">

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>computed属性</strong>
</div>

<p>计算属性的代码书写<br><img src="/image/vueSummary/12.png"></p>
<p>注意:计算属性调用直接在差值表达式里面写 函数名即可，不可以加小括号。</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>computed属性的模糊查询</strong>
</div>

<p>实际代码<br><img src="/image/vueSummary/13.png"></p>
<p>演示效果图<br><img src="/image/vueSummary/01.gif"></p>
<p>这个效果与v-列表过滤应用的效果一样的，但是运用了计算属性不用安排两个数组来写。</p>
<p>注意:  <code>&lt;li v-for=&quot;data in getMyDataliat&quot;&gt;&lt;/li&gt;</code><br>计算属性的函数可以绑定到v-for的属性里面。</p>
</p>


<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>自定义组件</strong>
</div>

<ol>
<li>全局组件的使用的代码<br>任意的全局组件可以作为其他全局组件的孩子来使用</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">"en"</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">"UTF-8"</span>&gt;<br>    &lt;meta name=<span class="hljs-string">"viewport"</span> content=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">"X-UA-Compatible"</span> content=<span class="hljs-string">"ie=edge"</span>&gt;<br>    &lt;title&gt;Document&lt;<span class="hljs-regexp">/title&gt;</span><br><span class="hljs-regexp">&lt;body&gt;</span><br><span class="hljs-regexp">    &lt;div id="app"&gt;</span><br><span class="hljs-regexp">        &lt;navbar&gt;&lt;/</span>navbar&gt;<br>        &lt;navbar&gt;&lt;<span class="hljs-regexp">/navbar&gt;</span><br><span class="hljs-regexp">        &lt;navbar&gt;&lt;/</span>navbar&gt;<br>    &lt;<span class="hljs-regexp">/div&gt;</span><br><span class="hljs-regexp">    &lt;script&gt;</span><br><span class="hljs-regexp">    1.全局定义组件（作用域隔离）</span><br><span class="hljs-regexp">        Vue.component("navbar", &#123;</span><br><span class="hljs-regexp">            template: `</span><br><span class="hljs-regexp">            &lt;div style="background:red"&gt;</span><br><span class="hljs-regexp">                &lt;button @click="handle"&gt;返回&lt;/</span>button&gt;<br>                       navbar<br>                    <br>                &lt;button&gt;主页&lt;<span class="hljs-regexp">/button&gt;</span><br><span class="hljs-regexp">                &lt;child&gt;&lt;/</span>child&gt;<br>                &lt;navbarchild&gt;&lt;<span class="hljs-regexp">/navbarchild&gt;</span><br><span class="hljs-regexp">                &lt;/</span>div&gt;<br>            <span class="hljs-string">`,</span><br><span class="hljs-string">            methods: &#123;</span><br><span class="hljs-string">                handle() &#123;</span><br><span class="hljs-string">                    alert("返回")</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">          Vue.component("child", &#123;</span><br><span class="hljs-string">            template: `</span>&lt;div&gt;child-自定义组件&lt;<span class="hljs-regexp">/div&gt;`</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">        &#125;)</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">        var vm = new Vue(&#123;</span><br><span class="hljs-regexp">            el: '#app',</span><br><span class="hljs-regexp">            data: &#123;&#125;,</span><br><span class="hljs-regexp">            methods: &#123;&#125;</span><br><span class="hljs-regexp">        &#125;);</span><br><span class="hljs-regexp">    &lt;/</span>script&gt;<br>&lt;<span class="hljs-regexp">/body&gt;</span><br><span class="hljs-regexp">&lt;/</span>html&gt;<br></code></pre></td></tr></table></figure>

<p>效果图</p>
<img src="/image/vueSummary/07.gif">


<ol start="2">
<li><p>局部组件:在全局组件里面定义的局部组件，只能在自己的全局组件里面引用。<br>作为孩子引用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c">Vue.component(<span class="hljs-string">"navbar"</span>, &#123;<br>          <span class="hljs-keyword">template</span>: `<br>          &lt;div style=<span class="hljs-string">"background:red"</span>&gt;<br>              &lt;button @<span class="hljs-built_in">click</span>=<span class="hljs-string">"handle"</span>&gt;返回&lt;/button&gt;<br>                     navbar<br>                  <br>              &lt;button&gt;主页&lt;/button&gt;<br>              &lt;child&gt;&lt;/child&gt;<br>              &lt;navbarchild&gt;&lt;/navbarchild&gt;<br>              &lt;/div&gt;<br>          `,<br>          methods: &#123;<br>              handle() &#123;<br>                  alert(<span class="hljs-string">"返回"</span>)<br>              &#125;<br>          &#125;,<br>          components: &#123;<br>              navbarchild: &#123;<br>                  <span class="hljs-keyword">template</span>: `<br>                  &lt;div&gt;<br>              navbarchild组件的使用<br>              &lt;/div&gt;<br>                  `<br>              &#125;<br>          &#125;<br>      &#125;)<br></code></pre></td></tr></table></figure>
</li>
<li><p>局部组件的使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;div id&#x3D;&quot;app&quot;&gt;<br>       &lt;home&gt;&lt;&#x2F;home&gt;<br>       &lt;user&gt;&lt;&#x2F;user&gt;<br>   &lt;&#x2F;div&gt;<br>   &lt;script&gt;<br>       var vm &#x3D; new Vue(&#123;<br>           el: &#39;#app&#39;,<br>           data: &#123;&#125;,<br>           methods: &#123;&#125;,<br>           components: &#123;<br>               &quot;home&quot;: &#123;<br>                   template: &#96;&lt;div&gt;home组件的使用&lt;&#x2F;div&gt;&#96;<br>               &#125;,<br>               &quot;user&quot;: &#123;<br>                   template: &#96;&lt;div&gt;user组件的使用&lt;&#x2F;div&gt;&#96;<br>               &#125;<br>           &#125;<br>       &#125;);<br>   &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

</li>
</ol>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>组件的方式与vue实例的区别</strong>
</div>

<ul>
<li>自定义组件需要一个root element</li>
<li>父子组件的data是无法共享的</li>
<li>组件可以有data，methods,computed…,但是data 必须是一个函数。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Vue.component(&quot;navbar&quot;, &#123;<br>          template: &#96;<br>          &lt;div style&#x3D;&quot;background:red&quot;&gt;<br>              &lt;button @click&#x3D;&quot;handle&quot;&gt;返回&lt;&#x2F;button&gt;<br>                     navbar<br>                  &#123;&#123;dataword&#125;&#125;<br>              &lt;button&gt;主页&lt;&#x2F;button&gt;<br>              &lt;child&gt;&lt;&#x2F;child&gt;<br>              &lt;navbarchild&gt;&lt;&#x2F;navbarchild&gt;<br>              &lt;&#x2F;div&gt;<br>          &#96;,<br>          methods: &#123;<br>              handle() &#123;<br>                  alert(&quot;返回&quot;)<br>              &#125;<br>          &#125;,<br>          data() &#123;<br>              return &#123;<br>                  dataword: &quot;你好啊&quot;<br>              &#125;<br>          &#125;,<br>          components: &#123;<br>              navbarchild: &#123;<br>                  template: &#96;<br>                  &lt;div&gt;<br>              navbarchild组件的使用<br>              &lt;&#x2F;div&gt;<br>                  &#96;<br>              &#125;<br>          &#125;<br>      &#125;)<br></code></pre></td></tr></table></figure>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>组件父传子</strong>
</div>


<ol>
<li>在父组件中写入差值表达式 <code>myname</code></li>
</ol>
<ol start="2">
<li><p><code>props: [&quot;myname&quot;, &quot;myshow&quot;] //接收父组件传来的属性</code></p>
</li>
<li><p>在子组件中调用<br><code>&lt;tarbar myname=&quot;龙马&quot; :myshow=&quot;false&quot;&gt;&lt;/tarbar&gt;</code><br><code>&lt;tarbar :myname=&quot;name&quot; :myshow=&quot;true&quot;&gt;&lt;/tarbar&gt;</code></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;tarbar myname&#x3D;&quot;龙马&quot; :myshow&#x3D;&quot;false&quot;&gt;&lt;&#x2F;tarbar&gt;<br>        &lt;tarbar :myname&#x3D;&quot;name&quot; :myshow&#x3D;&quot;true&quot;&gt;&lt;&#x2F;tarbar&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        Vue.component(&quot;tarbar&quot;, &#123;<br>            template: &#96;<br>                &lt;div&gt;<br>                    &lt;button&gt;返回&lt;&#x2F;button&gt;<br>                      你好啊--&#123;&#123;myname&#125;&#125;<br>                    &lt;button v-show&#x3D;&quot;myshow&quot;&gt;主页&lt;&#x2F;button&gt;<br>                    &lt;&#x2F;div&gt;<br>                &#96;,<br>            props: [&quot;myname&quot;, &quot;myshow&quot;] &#x2F;&#x2F;接收父组件传来的属性<br><br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                name: &#39;超前&#39;<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>组件的属性验证</strong>
</div>

<p>属性验证：  <code>props: {name: Number}</code></p>
<p>Number ,String ,Boolean ,Object ,Function ,null(不限制类型)</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>子组件传父组件的使用</strong>
</div>

<p><strong>首先父传子靠的是属性，子传父靠的是事件</strong></p>
<p>代码展示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;div id&#x3D;&quot;app&quot;&gt;<br>     &lt;child @myevent&#x3D;&quot;handEvent($event)&quot;&gt;&lt;&#x2F;child&gt;<br> &lt;&#x2F;div&gt;<br> &lt;script&gt;<br>     &#x2F;&#x2F; 子组件<br>     Vue.component(&quot;child&quot;, &#123;<br>         template: &#96;&lt;div&gt; 子组件 &lt;button @click&#x3D;&quot;money&quot;&gt; click &lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&#96;,<br>         data() &#123;<br>             return &#123;<br>                 childname: &#39;子组件的状态&#39;<br>             &#125;<br>         &#125;,<br>         methods: &#123;<br>             money() &#123;<br>                 this.$emit(&quot;myevent&quot;, this.childname) &#x2F;&#x2F;分发  事件<br>             &#125;<br>         &#125;<br>     &#125;)<br>     var vm &#x3D; new Vue(&#123;<br>         el: &#39;#app&#39;,<br>         data: &#123;&#125;,<br>         methods: &#123;<br>             handEvent(ev) &#123;<br>                 console.log(&#39;父组件收到钱了&#39;, ev);<br>             &#125;<br>         &#125;<br>     &#125;);<br> &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

<ol>
<li><p>在子组件中定义要传给父组件的数据(这里需要注意的是，在组件中的data必须是一个函数，用return接收)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">data() &#123;<br>       return &#123;<br>              childname: &#39;子组件的状态&#39;<br>              &#125;<br>       &#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>在组件的模板里面定义一个点击事件， <code>@click=&quot;money&quot;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">template: &#96;&lt;div&gt; 子组件 &lt;button @click&#x3D;&quot;money&quot;&gt; click &lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&#96;<br></code></pre></td></tr></table></figure>
</li>
<li><p>在全局组件的methods(不是vue实例里面的methods)里面调用 click 触发的函数<br><code>this.$emit(&quot;myevent&quot;, this.childname)</code>  this.$emit()是固定的写法<br>里面的第一个参数可以随便定义，第二个参数表示要传递给父组件的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">methods: &#123;<br>               money() &#123;<br>                   this.$emit(&quot;myevent&quot;, this.childname) &#x2F;&#x2F;分发  事件<br>               &#125;<br></code></pre></td></tr></table></figure></li>
<li><p>在根组件里面调用这个组件，<code>&lt;child @myevent=&quot;handEvent($event)&quot;&gt;&lt;/child&gt;</code><br><code>@myevent</code> @ 后面的变量是this.$emit()里面的第一个参数<br><code>handEvent($event)</code> 后面跟的事件名可以随便定义，($event)是固定的写法，用于传值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;div id&#x3D;&quot;app&quot;&gt;<br>       &lt;child @myevent&#x3D;&quot;handEvent($event)&quot;&gt;&lt;&#x2F;child&gt;<br>   &lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure>
</li>
<li><p>最关键的一步，在根组件里面定义一个方法函数。函数名为<br><code>@myevent=&quot;handEvent($event)&quot;</code> 后面定义的这个 <code>handEvent</code> 函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;&#125;,<br>            methods: &#123;<br>                handEvent(ev) &#123;<br>                    console.log(&#39;父组件收到钱了&#39;, ev);<br>                &#125;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure>

</li>
</ol>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>子传父的案例</strong>
</div>

<ol>
<li>具体代码<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;div id&#x3D;&quot;app&quot;&gt;<br>       &lt;!-- &lt;button @click&#x3D;&quot;isShow &#x3D; !isShow&quot;&gt;按钮&lt;&#x2F;button&gt; --&gt;<br>       &lt;navbar @myevent&#x3D;&quot;handle($event)&quot;&gt;&lt;&#x2F;navbar&gt;<br>       &lt;sidebar v-show&#x3D;&quot;isShow&quot;&gt;&lt;&#x2F;sidebar&gt;<br>   &lt;&#x2F;div&gt;<br>   &lt;script&gt;<br>       Vue.component(&quot;sidebar&quot;, &#123;<br>           template: &#96;&lt;div style&#x3D;&quot;background:red;&quot;&gt;&lt;ul&gt; &lt;li&gt;1111111&lt;&#x2F;li&gt;<br>                &lt;li&gt;1111111&lt;&#x2F;li&gt; &lt;li&gt;1111111&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&#96;<br>       &#125;)<br>       Vue.component(&quot;navbar&quot;, &#123;<br>           template: &#96;&lt;div&gt;&lt;button @click&#x3D;&quot;handleClick&quot;&gt;navbar&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&#96;,<br>           methods: &#123;<br>               handleClick() &#123;<br>                   this.$emit(&quot;myevent&quot;)<br>               &#125;<br>           &#125;<br>       &#125;)<br>       var vm &#x3D; new Vue(&#123;<br>           el: &#39;#app&#39;,<br>           data: &#123;<br>               isShow: false<br>           &#125;,<br>           methods: &#123;<br>               handle() &#123;<br>                   this.isShow &#x3D; !this.isShow<br>               &#125;<br>           &#125;<br>       &#125;);<br>   &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>


</li>
</ol>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>vue-ref通信</strong>
</div>

<ol>
<li><p>耦合度太高，不经常用，每一个孩子都需要标记一个 ref 引用</p>
</li>
<li><p>可以实现子传父，和父传子的使用</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;div id&#x3D;&quot;app&quot;&gt;<br>     &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&quot;mytext&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;<br>     &lt;button @click&#x3D;&quot;handle&quot;&gt;add&lt;&#x2F;button&gt;<br>     &lt;child ref&#x3D;&quot;mychild&quot;&gt;&lt;&#x2F;child&gt;<br> &lt;&#x2F;div&gt;<br> &lt;script&gt;<br>     Vue.component(&quot;child&quot;, &#123;<br>         template: &#96;&lt;div&gt; child&lt;&#x2F;div&gt;&#96;,<br>         data() &#123;<br>             return &#123;<br>                 datas: &#39;子组件的值&#39;<br>             &#125;<br>         &#125;,<br>         methods: &#123;<br>             hand(data) &#123;<br>                 console.log(&quot;子组件的方法&quot;, data);<br>             &#125;<br>         &#125;<br>     &#125;)<br>     var vm &#x3D; new Vue(&#123;<br>         el: &#39;#app&#39;,<br>         data: &#123;&#125;,<br>         methods: &#123;<br>             handle() &#123;<br>                 &#x2F;&#x2F; console.log(&quot;1111&quot;, this.$refs.mytext.value);<br>                 console.log(&quot;1111&quot;, this.$refs.mychild.datas);<br>                 this.$refs.mychild.hand(&quot;孩子听话&quot;);<br>             &#125;<br>         &#125;<br>     &#125;);<br> &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>vue-非父子通信-事件总线</strong>
</div>

<ol>
<li><p>创建一个空的实例对象，中央事件总线<br><code>var bus = new Vue(); // 空的vue实例，中央事件总线</code></p>
</li>
<li><p>运用 ref通信</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">template: &#96;&lt;div style&#x3D;&quot;background:blue;&quot;&gt;<br>               我是一个微信公众号作者<br>              &lt;input ref&#x3D;&quot;name&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;<br>                &lt;button @click&#x3D;&quot;handle&quot;&gt;发布&lt;&#x2F;button&gt;<br>                  &lt;&#x2F;div&gt;&#96;,<br>           methods: &#123;<br>               handle() &#123;<br>                   bus.$emit(&quot;weixinmessage&quot;, this.$refs.name.value)<br>               &#125;<br>           &#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><code>bus.$emit(&quot;weixinmessage&quot;, this.$refs.name.value)</code> 发布消息</p>
</li>
<li><p>生命周期函数-当前组件 dom 创建完毕就会调用  mounted()<br> <code>bus.$on(&quot;weixinmessage&quot;, ()=&gt;{})</code> 接收发布的消息</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">template: &#96;&lt;div style&#x3D;&quot;background:yellow;&quot;&gt;<br>              我是一个微信用户<br>                &lt;&#x2F;div&gt;&#96;,<br>           mounted() &#123;<br>               bus.$on(&quot;weixinmessage&quot;, (data) &#x3D;&gt; &#123;<br>                   console.log(&quot;收到推送了&quot;, data);<br>               &#125;)<br>               console.log(&quot;生命周期函数-当前组件 dom 创建完毕就会调用&quot;);<br>           &#125;<br></code></pre></td></tr></table></figure>

<p>总代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;weixinauthor&gt;&lt;&#x2F;weixinauthor&gt;<br>        &lt;weixinuser&gt;&lt;&#x2F;weixinuser&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var bus &#x3D; new Vue(); &#x2F;&#x2F; 空的vue实例，中央事件总线<br>        Vue.component(&quot;weixinauthor&quot;, &#123;<br>            template: &#96;&lt;div style&#x3D;&quot;background:blue;&quot;&gt;<br>                我是一个微信公众号作者<br>               &lt;input ref&#x3D;&quot;name&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;<br>                 &lt;button @click&#x3D;&quot;handle&quot;&gt;发布&lt;&#x2F;button&gt;<br>                   &lt;&#x2F;div&gt;&#96;,<br>            methods: &#123;<br>                handle() &#123;<br>                    bus.$emit(&quot;weixinmessage&quot;, this.$refs.name.value)<br>                &#125;<br>            &#125;<br><br>        &#125;)<br>        Vue.component(&quot;weixinuser&quot;, &#123;<br>            &#x2F;&#x2F; 合适的位置先订阅好 bus.$on<br>            template: &#96;&lt;div style&#x3D;&quot;background:yellow;&quot;&gt;<br>               我是一个微信用户<br>                 &lt;&#x2F;div&gt;&#96;,<br>            mounted() &#123;<br>                bus.$on(&quot;weixinmessage&quot;, (data) &#x3D;&gt; &#123;<br>                    console.log(&quot;收到推送了&quot;, data);<br>                &#125;)<br>                console.log(&quot;生命周期函数-当前组件 dom 创建完毕就会调用&quot;);<br>            &#125;<br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;&#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>Vue动态组件</strong>
</div>

<ol>
<li><p><code>&lt;component&gt;</code> 元素，动态的绑定多个组件到它的 is属性</p>
</li>
<li><p><code>&lt;keep-alive&gt;</code> 保留状态，避免重新渲染</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;!-- &lt;home&gt;&lt;&#x2F;home&gt; --&gt;<br>        &lt;keep-alive&gt;<br>            &lt;component :is&#x3D;&quot;who&quot;&gt;&lt;&#x2F;component&gt;<br>        &lt;&#x2F;keep-alive&gt;<br>        &lt;footer&gt;<br>            &lt;ul&gt;<br>                &lt;li&gt; &lt;a @click&#x3D;&quot;who&#x3D;&#39;home&#39;&quot;&gt;首页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>                &lt;li&gt; &lt;a @click&#x3D;&quot;who&#x3D;&#39;list&#39;&quot;&gt;商品页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>                &lt;li&gt; &lt;a @click&#x3D;&quot;who&#x3D;&#39;shopcar&#39;&quot;&gt;购物车&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>            &lt;&#x2F;ul&gt;<br>        &lt;&#x2F;footer&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                who: &quot;home&quot;<br>            &#125;,<br>            methods: &#123;&#125;,<br>            components: &#123;<br>                &quot;home&quot;: &#123;<br>                    template: &#96;&lt;div&gt;home &lt;input type&#x3D;&quot;text&quot; &#x2F;&gt; &lt;&#x2F;div&gt;&#96;<br>                &#125;,<br>                &quot;list&quot;: &#123;<br>                    template: &#96;&lt;div&gt;list&lt;&#x2F;div&gt;&#96;<br>                &#125;,<br>                &quot;shopcar&quot;: &#123;<br>                    template: &#96;&lt;div&gt;shopcar&lt;&#x2F;div&gt;&#96;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>



</li>
</ol>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>Vue-slot 插槽的使用</strong>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;swiper&gt;<br>            &lt;li v-for&#x3D;&quot;data in datalist&quot;&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;li&gt;<br>        &lt;&#x2F;swiper&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        Vue.component(&quot;swiper&quot;, &#123;<br>            template: &#96;&lt;div&gt; &lt;ul&gt; &lt;slot&gt;&lt;&#x2F;slot&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&#96;<br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                datalist: [&quot;111&quot;, &quot;222&quot;, &quot;333&quot;]<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>


</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>vue-slot插槽的案例</strong>
</div>

<ol>
<li>插槽里的按钮控制的变量可以直接访问父组件的变量<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;!-- &lt;button @click&#x3D;&quot;isShow &#x3D; !isShow&quot;&gt;按钮&lt;&#x2F;button&gt; --&gt;<br>        &lt;navbar&gt;<br>            &lt;button @click&#x3D;&quot;isShow&#x3D;!isShow&quot;&gt;navbar&lt;&#x2F;button&gt;<br>        &lt;&#x2F;navbar&gt;<br>        &lt;sidebar v-show&#x3D;&quot;isShow&quot;&gt;&lt;&#x2F;sidebar&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        Vue.component(&quot;sidebar&quot;, &#123;<br>            template: &#96;&lt;div style&#x3D;&quot;background:red;&quot;&gt;&lt;ul&gt; &lt;li&gt;1111111&lt;&#x2F;li&gt;<br>                 &lt;li&gt;1111111&lt;&#x2F;li&gt; &lt;li&gt;1111111&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&#96;<br>        &#125;)<br><br>        Vue.component(&quot;navbar&quot;, &#123;<br>            template: &#96;&lt;div&gt; &lt;slot&gt;&lt;&#x2F;slot&gt; &lt;&#x2F;div&gt;&#96;,<br><br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                isShow: false<br>            &#125;,<br>            methods: &#123;<br><br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>

</li>
</ol>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>具名插槽 slot</strong>
</div>

<ol>
<li>在组件里面给slot一个name<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">template: &#96;&lt;div&gt; &lt;slot name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;slot&gt; child &lt;slot name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;slot&gt; &lt;&#x2F;div&gt; &#96;<br></code></pre></td></tr></table></figure></li>
<li>在根组件中插槽里面给 slot=”name”来调用相应name的插槽<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;child&gt;<br>           &lt;div slot&#x3D;&quot;a&quot;&gt;aaaaaa&lt;&#x2F;div&gt;<br>           &lt;div slot&#x3D;&quot;b&quot;&gt;bbbbbb&lt;&#x2F;div&gt;<br>       &lt;&#x2F;child&gt;<br></code></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;child&gt;<br>            &lt;div slot&#x3D;&quot;a&quot;&gt;aaaaaa&lt;&#x2F;div&gt;<br>            &lt;div slot&#x3D;&quot;b&quot;&gt;bbbbbb&lt;&#x2F;div&gt;<br>        &lt;&#x2F;child&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        Vue.component(&quot;child&quot;, &#123;<br>            template: &#96;&lt;div&gt; &lt;slot name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;slot&gt; child &lt;slot name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;slot&gt; &lt;&#x2F;div&gt; &#96;<br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;&#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>Vue单个元素的过渡</strong>
</div>

<ol>
<li><p>.xxxx-enter-active ,.xxxx-leave-active<br>.bounceaa-enter-active<br>.bounceaa-leave-active</p>
</li>
<li><p><code>&lt;transition name=&quot;bounceaa&quot;&gt;</code> </p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"> &lt;style&gt;<br>        .bounceaa-enter-active &#123;<br>            animation: bounce-in 5s;<br>        &#125;<br><br>        .bounceaa-leave-active &#123;<br>            animation: bounce-in .5s reverse;<br>        &#125;<br><br>        @keyframes bounce-in &#123;<br>            0% &#123;<br>                transform: scale(0);<br>            &#125;<br><br>            50% &#123;<br>                transform: scale(1.5);<br>            &#125;<br><br>            100% &#123;<br>                transform: scale(1);<br>            &#125;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;button @click&#x3D;&quot;show &#x3D; !show&quot;&gt;Toggle show&lt;&#x2F;button&gt;<br>        &lt;transition name&#x3D;&quot;bounceaa&quot;&gt;<br>            &lt;p v-if&#x3D;&quot;show&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris facilisis enim libero, at<br>                lacinia diam fermentum id. Pellentesque habitant morbi tristique senectus et netus.&lt;&#x2F;p&gt;<br>        &lt;&#x2F;transition&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                show: true<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>vue-多个元素过渡(设置key)</strong>
</div>

<p>当有相同标签名的元素切换时，需要通过key特性设置唯一的值来标记以上Vue区分它们，否则Vue为了<br>效率只会替换相同标签内部的内容。<br>mode:in-out 先进来再走<br>mode:out-in 先走再进来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"> &lt;style&gt;<br>        .slide-fade-enter-active &#123;<br>            transition: all .3s ease;<br>        &#125;<br>        .slide-fade-leave-active &#123;<br>            transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);<br>        &#125;<br>        .slide-fade-enter,<br>        .slide-fade-leave-to<br>        &#x2F;* .slide-fade-leave-active for below version 2.1.8 *&#x2F;<br>            &#123;<br>            transform: translateX(10px);<br>            opacity: 0;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;button @click&#x3D;&quot;show &#x3D; !show&quot;&gt;Toggle show&lt;&#x2F;button&gt;<br>        &lt;transition name&#x3D;&quot;slide-fade&quot; mode&#x3D;&quot;in-out&quot;&gt;<br>            &lt;p v-if&#x3D;&quot;show&quot; key&#x3D;&quot;1&quot;&gt;he1llo111111111111111111111&lt;&#x2F;p&gt;<br>            &lt;p v-else key&#x3D;&quot;2&quot;&gt;he1llo111111111111111111111&lt;&#x2F;p&gt;<br>        &lt;&#x2F;transition&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                show: true<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>多个组件的过渡</strong>
</div>

<ol>
<li>用法与单个组件或多个组件的用法差不多，只是在组件外包裹了一层 transition标签</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"> &lt;style&gt;<br>        html,<br>        body &#123;<br>            overflow-y: hidden;<br>        &#125;<br>        .slide-fade-enter-active &#123;<br>            transition: all .3s ease;<br>        &#125;<br>        .slide-fade-leave-active &#123;<br>            transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);<br>        &#125;<br>        .slide-fade-enter,<br>        .slide-fade-leave-to<br><br>        &#x2F;* .slide-fade-leave-active for below version 2.1.8 *&#x2F;<br>            &#123;<br>            transform: translateX(10px);<br>            opacity: 0;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;!-- &lt;home&gt;&lt;&#x2F;home&gt; --&gt;<br>        &lt;transition name&#x3D;&quot;slide-fade&quot;&gt;<br>            &lt;keep-alive&gt;<br>                &lt;component :is&#x3D;&quot;who&quot;&gt;&lt;&#x2F;component&gt;<br>            &lt;&#x2F;keep-alive&gt;<br>        &lt;&#x2F;transition&gt;<br>        &lt;footer&gt;<br>            &lt;ul&gt;<br>                &lt;li&gt; &lt;a @click&#x3D;&quot;who&#x3D;&#39;home&#39;&quot;&gt;首页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>                &lt;li&gt; &lt;a @click&#x3D;&quot;who&#x3D;&#39;list&#39;&quot;&gt;商品页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>                &lt;li&gt; &lt;a @click&#x3D;&quot;who&#x3D;&#39;shopcar&#39;&quot;&gt;购物车&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>            &lt;&#x2F;ul&gt;<br>        &lt;&#x2F;footer&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                who: &quot;home&quot;<br>            &#125;,<br>            methods: &#123;&#125;,<br>            components: &#123;<br>                &quot;home&quot;: &#123;<br>                    template: &#96;&lt;div&gt;home &lt;input type&#x3D;&quot;text&quot; &#x2F;&gt; &lt;&#x2F;div&gt;&#96;<br>                &#125;,<br>                &quot;list&quot;: &#123;<br>                    template: &#96;&lt;div&gt;list&lt;&#x2F;div&gt;&#96;<br>                &#125;,<br>                &quot;shopcar&quot;: &#123;<br>                    template: &#96;&lt;div&gt;shopcar&lt;&#x2F;div&gt;&#96;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

</p>


<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>列表过渡(设置key)</strong>
</div>

<p><code>&lt;transition-group&gt;</code>不同于 transition，它会以一个真实元素实现:<br>默认为一个 <code>&lt;span&gt;</code>。也可以通过tag 特性更换为其他元素。<br>提供唯一的key属性值</p>
<ol>
<li>key的值如果是index的删除的动画永远都是都是从最后开始，那是因为index是从0开始的，<br>我们需要给key 赋值为 id 或者 data<br><code>&lt;li v-for=&quot;(data,index) in datalist&quot; :key=&quot;data&quot;&gt;</code>    </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"> &lt;style&gt;<br>        .bounceaa-enter-active &#123;<br>            animation: bounce-in 1s;<br>        &#125;<br><br>        .bounceaa-leave-active &#123;<br>            animation: bounce-in .5s reverse;<br>        &#125;<br><br>        @keyframes bounce-in &#123;<br>            0% &#123;<br>                transform: scale(0);<br>            &#125;<br><br>            50% &#123;<br>                transform: scale(1.5);<br>            &#125;<br><br>            100% &#123;<br>                transform: scale(1);<br>            &#125;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;mytext&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;&#123;&#123;mytext&#125;&#125;<br>        &lt;button @click&#x3D;&quot;handle&quot;&gt;add&lt;&#x2F;button&gt;<br>        &lt;transition-group tag&#x3D;&quot;ul&quot; name&#x3D;&quot;bounceaa&quot;&gt;<br>            &lt;li v-for&#x3D;&quot;(data,index) in datalist&quot; :key&#x3D;&quot;data&quot;&gt;<br>                &#123;&#123;data&#125;&#125;--&#123;&#123;index&#125;&#125;<br>                &lt;button @click&#x3D;&quot;handledel(index)&quot;&gt;del&lt;&#x2F;button&gt;<br>            &lt;&#x2F;li&gt;<br>        &lt;&#x2F;transition-group&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                mytext: &#39;&#39;,<br>                datalist: []<br>            &#125;,<br>            methods: &#123;<br>                handle() &#123;<br>                    this.datalist.push(this.mytext)<br>                &#125;,<br>                handledel(index) &#123;<br>                    console.log(index);<br>                    this.datalist.splice(index, 1)<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>生命周期</strong>
</div>

<ol>
<li>beforeCreate<br>类型：Function</li>
</ol>
<p>详细：</p>
<p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p>
<ol start="2">
<li>created<br>类型：Function</li>
</ol>
<p>详细：</p>
<p>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，property 和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el property 目前尚不可用。</p>
<ol start="3">
<li>beforeMount<br>类型：Function</li>
</ol>
<p>详细：</p>
<p>在挂载开始之前被调用：相关的 render 函数首次被调用。</p>
<p>该钩子在服务器端渲染期间不被调用</p>
<ol start="4">
<li>mounted(重点掌握)<br>类型：Function</li>
</ol>
<p>详细：</p>
<p>实例被挂载后调用，这时 el 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。</p>
<p>注意 mounted 不会保证所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以在 mounted 内部使用 vm.$nextTick：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">mounted: function () &#123;<br>  this.$nextTick(function () &#123;<br>    &#x2F;&#x2F; Code that will run only after the<br>    &#x2F;&#x2F; entire view has been rendered<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>该钩子在服务器端渲染期间不被调用。</p>
<ol start="5">
<li>beforeUpdate<br>类型：Function</li>
</ol>
<p>详细：</p>
<p>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。</p>
<p>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</p>
<ol start="6">
<li>updated<br>类型：Function</li>
</ol>
<p>详细：</p>
<p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p>
<p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。</p>
<p>注意 updated 不会保证所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以在 updated 里使用 vm.$nextTick：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">updated: function () &#123;<br>  this.$nextTick(function () &#123;<br>    &#x2F;&#x2F; Code that will run only after the<br>    &#x2F;&#x2F; entire view has been re-rendered<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>该钩子在服务器端渲染期间不被调用。</p>
<ol start="7">
<li>activated<br>类型：Function</li>
</ol>
<p>详细：</p>
<p>被 keep-alive 缓存的组件激活时调用。</p>
<p>该钩子在服务器端渲染期间不被调用。</p>
<ol start="8">
<li>deactivated<br>类型：Function</li>
</ol>
<p>详细：</p>
<p>被 keep-alive 缓存的组件停用时调用。</p>
<p>该钩子在服务器端渲染期间不被调用。</p>
<ol start="9">
<li>beforeDestroy<br>类型：Function</li>
</ol>
<p>详细：</p>
<p>实例销毁之前调用。在这一步，实例仍然完全可用。</p>
<p>该钩子在服务器端渲染期间不被调用。</p>
<ol start="10">
<li>destroyed<br>类型：Function</li>
</ol>
<p>详细：</p>
<p>实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p>
<p>该钩子在服务器端渲染期间不被调用。</p>
<ol start="11">
<li>errorCaptured</li>
<li>5.0+ 新增</li>
</ol>
<p>类型：(err: Error, vm: Component, info: string) =&gt; ?boolean</p>
<p>详细：</p>
<p>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>vue-过滤器(详细解释过程待写)</strong>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;!-- &lt;h1 class&#x3D;&quot;animated hinge infinite&quot;&gt;1111111111111&lt;&#x2F;h1&gt; --&gt;<br><br>    &lt;div id&#x3D;&quot;box&quot;&gt;<br>      &lt;ul&gt;<br>        &lt;li v-for&#x3D;&quot;data in datalist&quot; :key&#x3D;&quot;data.id&quot;&gt;<br>          &lt;h3&gt;&#123;&#123;data.nm&#125;&#125;&lt;&#x2F;h3&gt;<br>          &lt;!-- &lt;img :src&#x3D;&quot;changepath(data.img)&quot;&#x2F;&gt; --&gt;<br><br>          &lt;img :src&#x3D;&quot;data.img | kerwinpath&quot; &#x2F;&gt;<br>        &lt;&#x2F;li&gt;<br>      &lt;&#x2F;ul&gt;<br>    &lt;&#x2F;div&gt;<br><br>    &lt;script&gt;<br>      Vue.filter(&quot;kerwinpath&quot;, function (data) &#123;<br>        return data.replace(&quot;w.h&quot;, &quot;128.180&quot;);<br>      &#125;);<br><br>      new Vue(&#123;<br>        el: &quot;#box&quot;,<br>        data: &#123;<br>          datalist: [],<br>        &#125;,<br>        mounted() &#123;<br>          axios.get(&quot;test.json&quot;).then((res) &#x3D;&gt; &#123;<br>            console.log(res.data);<br>            this.datalist &#x3D; res.data.movieList;<br>          &#125;);<br>        &#125;,<br><br>        methods: &#123;<br>          changepath(path) &#123;<br>            return path.replace(&quot;w.h&quot;, &quot;128.180&quot;);<br>          &#125;,<br>        &#125;,<br>      &#125;);<br></code></pre></td></tr></table></figure>


</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>vue-swiper(复用性不好)</strong>
</div>

<ol>
<li>mounted() 状态更新完毕之后 ，未必dom创建完。<br>this.datalist = [“1111”, “2222”, “3333”]并不会立即渲染到页面。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;vue&#x2F;lib&#x2F;swiper.css&quot;&gt;<br>    &lt;script src&#x3D;&quot;..&#x2F;vue&#x2F;lib&#x2F;swiper.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;style&gt;<br>        .swiper-container &#123;<br>            width: 600px;<br>            height: 300px;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div class&#x3D;&quot;swiper-container a&quot;&gt;<br>            &lt;div class&#x3D;&quot;swiper-wrapper&quot;&gt;<br>                &lt;div class&#x3D;&quot;swiper-slide&quot; v-for&#x3D;&quot;data in datalist&quot;&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;div&gt;<br><br><br>            &lt;&#x2F;div&gt;<br>            &lt;!-- Add Pagination --&gt;<br>            &lt;div class&#x3D;&quot;swiper-pagination&quot;&gt;&lt;&#x2F;div&gt;<br>        &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                datalist: []<br>            &#125;,<br>            methods: &#123;&#125;,<br>            mounted() &#123;<br>                setTimeout(() &#x3D;&gt; &#123;<br>                    this.datalist &#x3D; [&quot;1111&quot;, &quot;2222&quot;, &quot;3333&quot;] &#x2F;&#x2F; 状态改完，异步更新dom<br><br>                &#125;, 2000)<br>            &#125;,<br>            updated() &#123;<br>                var swiper &#x3D; new Swiper(&#39;.a&#39;, &#123;<br>                    loop: true,<br>                    pagination: &#123;<br>                        el: &#39;.swiper-pagination&#39;,<br>                    &#125;,<br>                &#125;);<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>


</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>vue-swiper组件封装</strong>
</div>

<ol>
<li><p>首先子组件的mounted会比父组件的mounted先触发。</p>
</li>
<li><p>swiper datalist.length的长度等于0，会依次进行子组件的mounted,父组件的mounted。<br>父组件的mounted把数组渲染完毕后，swiper datalist.length的长度等于3，会重新渲染swiper组件<br>依次进行子组件的mounted,父组件的mounted。这时候子组件的轮播图就可以实现效果了。</p>
</li>
<li><p>关键点在于:key=”datalist.length” 的变化，当key的值变化时，会重新创建swiper组件</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;vue&#x2F;lib&#x2F;swiper.css&quot;&gt;<br>    &lt;script src&#x3D;&quot;..&#x2F;vue&#x2F;lib&#x2F;swiper.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;style&gt;<br>        .swiper-container &#123;<br>            width: 600px;<br>            height: 300px;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;swiper :key&#x3D;&quot;datalist.length&quot;&gt;<br>            &lt;div class&#x3D;&quot;swiper-slide&quot; v-for&#x3D;&quot;data in datalist&quot;&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;div&gt;<br>        &lt;&#x2F;swiper&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        Vue.component(&quot;swiper&quot;, &#123;<br>            template: &#96; &lt;div class&#x3D;&quot;swiper-container a&quot;&gt;<br>            &lt;div class&#x3D;&quot;swiper-wrapper&quot;&gt;<br>              &lt;slot&gt;&lt;&#x2F;slot&gt;<br>            &lt;&#x2F;div&gt;<br>            &lt;!-- Add Pagination --&gt;<br>            &lt;div class&#x3D;&quot;swiper-pagination&quot;&gt;&lt;&#x2F;div&gt;<br>        &lt;&#x2F;div&gt;&#96;,<br>            mounted() &#123;<br>                var swiper &#x3D; new Swiper(&#39;.a&#39;, &#123;<br>                    loop: true,<br>                    pagination: &#123;<br>                        el: &#39;.swiper-pagination&#39;,<br>                    &#125;,<br>                &#125;);<br>            &#125;<br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                datalist: []<br>            &#125;,<br>            methods: &#123;&#125;,<br>            mounted() &#123;<br>                setTimeout(() &#x3D;&gt; &#123;<br>                    this.datalist &#x3D; [&quot;1111&quot;, &quot;2222&quot;, &quot;3333&quot;] &#x2F;&#x2F; 状态改完，异步更新dom<br><br>                &#125;, 2000)<br>            &#125;<br><br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>vue-自定义指令的用法</strong>
</div>

<p>自定义指令最核心的用法操作底层dom</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div v-hello&#x3D;&quot;&#39;red&#39;&quot;&gt;111&lt;&#x2F;div&gt;<br>        &lt;div v-hello&#x3D;&quot;&#39;yellow&#39;&quot;&gt;111&lt;&#x2F;div&gt;<br>        &lt;div v-hello&#x3D;&quot;mycolor&quot;&gt;111&lt;&#x2F;div&gt;<br><br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        Vue.directive(&quot;hello&quot;, &#123;<br>            inserted(el, bind) &#123;<br>                &#x2F;&#x2F; console.log(&#39;当前节点插入到父节点了&#39;);<br>                console.log(el, bind);<br>                el.style.background &#x3D; bind.value<br>            &#125;,<br>            &#x2F;&#x2F; 指令的生命周期函数<br>            update(el, bind) &#123;<br>                el.style.background &#x3D; bind.value<br>            &#125;<br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                mycolor: &quot;red&quot;<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>


</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>vue-指令轮播</strong>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;vue&#x2F;lib&#x2F;swiper.css&quot;&gt;<br>    &lt;script src&#x3D;&quot;..&#x2F;vue&#x2F;lib&#x2F;swiper.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;style&gt;<br>        .swiper-container &#123;<br>            width: 600px;<br>            height: 300px;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br><br>        &lt;div class&#x3D;&quot;swiper-container a&quot;&gt;<br>            &lt;div class&#x3D;&quot;swiper-wrapper&quot;&gt;<br>                &lt;div class&#x3D;&quot;swiper-slide&quot; v-for&#x3D;&quot;(data,index) in datalist&quot; v-swiper&#x3D;&quot;&#123;<br>                    index:index,<br>                    length:datalist.length<br><br>                &#125;&quot;&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;div&gt;<br>            &lt;&#x2F;div&gt;<br>            &lt;!-- Add Pagination --&gt;<br>            &lt;div class&#x3D;&quot;swiper-pagination&quot;&gt;&lt;&#x2F;div&gt;<br>        &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        Vue.directive(&quot;swiper&quot;, &#123;<br>            inserted(el, bind) &#123;<br>                console.log(el, bind.value);<br>                if (bind.value.index &#x3D;&#x3D; bind.value.length - 1) &#123;<br>                    var swiper &#x3D; new Swiper(&#39;.a&#39;, &#123;<br>                        loop: true,<br>                        pagination: &#123;<br>                            el: &#39;.swiper-pagination&#39;,<br>                        &#125;,<br>                    &#125;);<br>                &#125;<br>            &#125;<br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                datalist: []<br>            &#125;,<br>            methods: &#123;&#125;,<br>            mounted() &#123;<br>                setTimeout(() &#x3D;&gt; &#123;<br>                    this.datalist &#x3D; [&quot;1111&quot;, &quot;2222&quot;, &quot;3333&quot;] &#x2F;&#x2F; 状态改完，异步更新dom<br><br>                &#125;, 2000)<br>            &#125;,<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>


</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>组件的属性验证</strong>
</div>



</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>组件的属性验证</strong>
</div>



</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>组件的属性验证</strong>
</div>



</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>组件的属性验证</strong>
</div>



</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>组件的属性验证</strong>
</div>



</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>组件的属性验证</strong>
</div>



</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>组件的属性验证</strong>
</div>



</p>


</div>]]></content>
      <categories>
        <category>VUE复习</category>
      </categories>
      <tags>
        <tag>VUE学习</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS总复习</title>
    <url>/2020/ckpf35kjj000cjov46nrq79be/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">CSS总复习</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
CSS总复习
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS的四种引入方式</strong>
    <a href="#aa">容器的高度</a>

</div>

<p>CSS引入方式：行间样式、内部样式、外部样式、导入外部样式</p>
<ol>
<li><p>行间样式：直接在标签上书写样式</p>
<img src="/image/htmlSummary/20.png" style="width: 1360">
</li>
<li><p>内部样式：在文件的内部书写样式</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;<br>	样式内容<br>&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>
<img src="/image/htmlSummary/21.png" style="width: 1360">

<ol start="3">
<li><p>外部样式：（1）先创建一个css文件；（2）再用link标签引入这个文件</p>
<img src="/image/htmlSummary/22.png" style="width: 1360">
</li>
<li><p>导入外部样式：（1）先创建一个css文件； （2）在style标签中用import导入这个样式文件</p>
<img src="/image/htmlSummary/23.png" style="width: 1360">
</li>
</ol>
<ul>
<li>以上四种CSS引入方式的区别</li>
</ul>
<p>行间样式只作用于当前标签；而内部样式作用于当前文件；外部样式可以被多个HTML文件引用<br>实际项目开发中，最好使用外部样式。</p>
<p>外部样式与import的区别<br><img src="/image/htmlSummary/24.png" style="width: 1360"></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS选择器</strong>

</div>

<p>1) <code>*</code>: 匹配HTML中的所有元素（注意： <code>*</code>的性能差，因为它要匹配所有元素，所以在开发时，不建议使用）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>* &#123;<br>	color: red;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>2)标签选择器:用来匹配对应的标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>span &#123;<br>	font-size:12px;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>3)类选择器:用来选择class命名的标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>.box&#123;<br>	color:skyblue<br>&#125;<br></code></pre></td></tr></table></figure>
<p>4）ID选择器:用来选择用id命名的标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>#content &#123;<br>	align:center;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>5）派出选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>.content p &#123;<br>	display: inline-block;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>6）伪类选择器<br>7) 伪元素选择器</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS选择器的分组</strong>
</div>

<p>让多个选择器具有相同的样式，一般用于设置公共样式。用逗号隔开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>.box,p,div &#123;<br>	background-color : green;<br>&#125;<br></code></pre></td></tr></table></figure>



</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>选择器的继承</strong>

</div>

<p>子元素可以继承父元素的样式，反之不可以</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS优先级</strong>
</div>

<p>多重样式：如果外部样式、内部样式和内联样式同时应用于同一元素，就是使用多重样式的情况。一般<br>情况下，优先级如下：（外部样式）&lt;（内部样式）&lt;（内联样式）</p>
<p>优先值权：</p>
<ul>
<li>!important,加在样式属性值后，权重值为10000</li>
<li>内联样式，如: style=””,权重值为1000</li>
<li>ID选择器，如: #content,权重值为100</li>
<li>类、伪类选择器，属性选择器，如: .content、 :hover权重值为10</li>
<li>标签选择器，如: div、p权重值为1</li>
</ul>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS字体</strong>
</div>

<p>1）font-size:字号（px/%）<br>2）font-family:字体<br>3）font-style:字体样式(normal/italic/oblique)<br>4）font-weight:文字加粗(normal/bold/bolder/lighter/100-900)<br>5）line-height:行高(px/数字/em等)<br>6）color:文字的颜色(颜色的单词/rgb()/16进制)<br>7）text-decoration:文字修饰(none/underline/overline/line-through)<br>8）text-align:文本的对齐方式(left/right/center)<br>9）text-transform:字母大小写(capitalize/uppercase/lowercase/none)<br>10）text-indent:文本缩进(px/em/%/pt等)</p>
<p>Tip(技巧)<br>font复合属性：<br>font:font-style  font-variant font-weight font-size/line-height font-family;</p>
<p>注意:<br>1)属性值得位置顺序<br>2)除了font-size和font-family之外，其他任何一个属性值都可以省略<br>3)font-variant: normal/small-caps(让大写字母变得小一些)</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS背景</strong>
</div>

<p>1）background-color:背景色(transparent(透明色)/color)<br>2）background-image:背景图(none/url)<br>3）background-repeat:背景图像铺排方式(repeat/no-repeat/repeat-x/repeat-y)<br>4）background-positon:设置对象的背景图像位置({x-number |top|center|bottom} {y-number|left|center|right})<br>5）background-attachment:背景图像滚动位置(scroll/fixed)<br>6）background:设置背景的复合写法<br>background: color image repeat  attachment position</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS伪类元素选择器</strong>

</div>

<p>伪类:专门用来表示元素的一种特殊状态<br>常用的伪类选择器</p>
<p>1）a标签的伪类：<br>:link(初始a标签的显示)/:visited(a标签访问之后)/:hover(鼠标经过a标签)/:active(激活，也就是点击a标签)<br>2）:focus 获取焦点，常用于表单元素<br>3）:first-child/:last-child/:nth-child(number)</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>属性选择器</strong>
</div>

<p>属性选择器<br>[属性名]：包含有指定属性名的元素(常用)<br>[属性名=值]：属性名的值为指定值得元素(常用)<br>[属性名<code>~</code>=值]：属性名的值包含指定值得元素<br>[属性名^=值]：属性名的值以指定值的开头的元素<br>[属性名$=值]：属性名的值以指定值得结尾的元素</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>关系选择器</strong>
</div>

<p>1)空格: 后代选择器<br>2)&gt;: 只选择儿子元素<br><strong>3)+: 紧邻的兄弟选择器 (重要)</strong><br>2 的字体颜色为红色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;style&gt;<br>       ul li+p &#123;<br>           color: red;<br>       &#125;<br>   &lt;&#x2F;style&gt;<br><br>  &lt;ul&gt;<br>	&lt;li&gt;1&lt;&#x2F;li&gt;<br>	&lt;p&gt;2&lt;&#x2F;p&gt;<br>	&lt;p&gt;3&lt;&#x2F;p&gt;<br>	&lt;p&gt;4&lt;&#x2F;p&gt;<br>	&lt;p&gt;5&lt;&#x2F;p&gt;<br> &lt;&#x2F;ul&gt;<br></code></pre></td></tr></table></figure>

<p><strong>3)~: 后面所有的兄弟选择器 (重要)</strong><br>2,3,4,5 的字体颜色为红色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;style&gt;<br>       ul li+p &#123;<br>           color: red;<br>       &#125;<br>   &lt;&#x2F;style&gt;<br><br>  &lt;ul&gt;<br>	&lt;li&gt;1&lt;&#x2F;li&gt;<br>	&lt;p&gt;2&lt;&#x2F;p&gt;<br>	&lt;p&gt;3&lt;&#x2F;p&gt;<br>	&lt;p&gt;4&lt;&#x2F;p&gt;<br>	&lt;p&gt;5&lt;&#x2F;p&gt;<br> &lt;&#x2F;ul&gt;<br></code></pre></td></tr></table></figure>

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS伪元素选择器</strong>

</div>

<p>伪元素：<br>:before/:after/:first-letter(第一个字)/:first-line(第一行):前面可以是1一个冒号也可以是双冒号。<br>::selection/::placeholder/::backdrop :前面只能是双冒号</p>
<p>CSS伪元素和伪类的区别<br><img src="/image/htmlSummary/25.png" style="width: 1360"></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS浮动以及清除浮动的三种方法</strong>
</div>

<ol>
<li><p>什么是浮动<br>浮动就是让块级标签不独占一行，目的(使用场景)：把块级标签元素可以排在一行上</p>
</li>
<li><p>浮动的原理<br>就是让元素脱离文档流，不占有标准流<br>解释一下什么叫标准流：</p>
</li>
<li><p>float的属性值<br>left:左浮动<br>right:右浮动<br>none:默认值，不浮动</p>
</li>
<li><p>浮动后，后面的元素不管是块级还是行级元素，不会显示在一行</p>
</li>
<li><p>清除浮动<br>目的：让后面的元素自动掉到下一行<br>方法：<br>1)添加空标签，并设置样式：clear:both;<br>clear:left;   清除左浮动<br>clear:right;  清除右浮动<br>clear:both;   清除左右浮动<br>clear:none;   左右浮动都不清除</p>
</li>
</ol>
<img src="/image/htmlSummary/26.png" style="width: 1360">


<p>2)在要清除浮动的父级添加样式: overflow:hidden;<br>overflow:hidden;  超出部分隐藏，也可以用来实现清除浮动</p>
<img src="/image/htmlSummary/27.png" style="width: 1360">


<p>3)在要清除浮动的父级添加伪类元素，并设定的样式:<br>父元素: after {<br>    content: “”;<br>    display: block;<br>    clear: both;<br>}</p>
<img src="/image/htmlSummary/28.png" style="width: 1360">


<p><strong>在开发中我们常用 overflow: hidden;</strong></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS盒子模型</strong>
</div>


<p>每一个元素都是一个盒子，一个盒子由margin（外边距），border(边框线)，padding(内边距)和content（内容）组成。</p>
<p>区别外边距和内边距是以边框为参照。</p>
<p>系统默认外边距为8px</p>
<p>1)外边距（margin）：指元素边框线之外的距离。<br>margin-left:左边距<br>margin-right:右边距<br>margin-top:上边距<br>margin-bottom:下边距</p>
<p>margin：可用来设置任意一个边的边距，可带1至4个参数</p>
<p>1个（apx）:表示上下左右都有这样的外边距apx<br>2个（apx bpx）:表示上下外边距为apx,左右外边距为bpx<br>3个（apx bpx cpx）:表示上外边距，下外边距cpx，左右外边距bpx<br>4个（apx bpx cpx dpx）:表示上为apx,右为bpx,下为cpx,左为dpx</p>
<p>2)内边距（padding）:指元素的文本内容与边框之间的距离<br>它的用法与margin完全一样</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>diplay属性</strong>
</div>

<p>display属性：用来设置元素的显示方式<br>属性值<br>none:不显示元素<br>block:块显示，在元素前后设置换行符。目的:将行级标签转换为块级标签（因为行级标签不识别宽高，<br>而块级标签识别，转换后，行级标签也可以设置宽高）<br>inline:行内显示，将块级标签转换为行级标签<br>inline-block:将块级或行级标签转换为行内块级标签</p>
<p><strong>display:table-cell的妙用</strong><br>我们想要实现这个垂直居中和水平居中的效果<br><img src="/image/htmlSummary/29.png" style="width: 1360"></p>
<p>实际代码<br><img src="/image/htmlSummary/30.png" style="width: 1360"></p>
<br/>
<strong>display:table和display:table-cell实现单行，多行文本垂直居中</strong>

<p>需要实现如下图所示的效果<br>一个栏目的信息标题有长有短，短的一行，长的两行，但都要求垂直居中<br><img src="/image/htmlSummary/31.png" style="width: 1360"><br><img src="/image/htmlSummary/32.png" style="width: 1360"></p>
<p>实际代码<br><img src="/image/htmlSummary/33.png" style="width: 1360"></p>
<p>如果父元素不加display:table，实际效果如图所示<br><img src="/image/htmlSummary/34.png" style="width: 1360"></p>
<div style="color: red; font-weight: 700">
    发现一个小问题，如果一个元素写了display: table-cell;然后又写了 margin: 100px auto;
这个 margin: 100px auto; 是不会有作用的
</div>


</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>table样式</strong>
</div>

<p>table一般不用来布局，主要用于来格式化数据<br>属性：<br>width:宽度<br>height:高度<br>border-collapse:collapse; 单线边框<br>border:边框线</p>
<p>td,tr 属性:</p>
<p>width:宽度<br>height:高度<br>border:边框线<br>text-aligin:文本左右对齐（left（默认）/center/right）<br>vertical-align:文本垂直对齐（top/middle(默认)bottom）</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>列表样式</strong>
</div>

<p>列表样式：不是描述性的文本的任何内容都可以认为是列表。比如：菜单、商品列表等<br>1）列表类型<br>无序（ul）、有序（ol）和自定义列表（dl）。<br>ul和ol的列表项都是用li表示的，而dl是由一个dt和一个或者多个dd组成的。<br>dl一般用来设定一个定义，比如名词解释等。dt:标题，dd:描述，用来对dt的内容进行解释并说明的。<br>2）样式（用来修饰标识类型）<br>list-style-image:用图像表示标识</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">list-style-image&#x2F;list-style: url(&quot;图片路径&quot;)<br>将li前面的小圆点变成图片<br></code></pre></td></tr></table></figure>
<p>list-style-position:标识的位置(inside/outside(默认值))</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">list-style-position&#x2F;list-style:outside  默认不变<br>list-style-position&#x2F;list-style:inside  小圆点离文字有点距离<br></code></pre></td></tr></table></figure>
<p>list-style-type:标识的类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">list-style-type&#x2F;list-style:none  取消小圆点<br></code></pre></td></tr></table></figure>

<p>简写：list-type: list-style-image list-style-position list-style-type;<br>list-type的值可以按任意顺序列出，而且可以任意省略，只要提供一个值，其它的都自动默认。</p>
<p>list-style-type的属性值：<br>a）无序<br>disc(默认的)/circle/aquare</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">list-style-type&#x2F;list-style:disc 实心小圆点<br>list-style-type&#x2F;list-style:circle 空心小圆点<br></code></pre></td></tr></table></figure>
<p>b）有序<br>decimal（默认的1,2,3）/decimal-leading-zero（01,02,03）/lower-roman（小写罗马）/upper-roman（大写罗马）/lower-alpha（小写字母）/upper-alpha（大写字母）/<br>lower-greek/lower-latin/upper-latin</p>
<p>有序和无序：<br>none</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>轮播图</strong>
</div>

<p>轮播图<br>作用：主要用于产品或公司相关宣传。<br>组成：<br>1)轮播的组图（至少两张以上，不能太多）<br>2)控制器<br>3)计数器</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>CSS定位</strong>
</div>

<ol>
<li><p>定位(position)<br>设定元素在文档中的位置，会将标签(元素)转换为块级。</p>
</li>
<li><p>定位分类（属性值）</p>
</li>
</ol>
<p>1)static:静态定位</p>
<div style="text-indent:2em">
    默认值，没有定位，不能设置偏移值(left/top/right/bottom)占用标准流(文档流)
</div>

<p>2)relative:相对定位</p>
<div style="text-indent:2em">
    占用标准流(文档流)，它会出现在文档流中它该出现的位置。可以通过设置偏移值改变其位置。
它相对自身所占的位置做偏移。
</div>

<p>3)absolute:绝对定位</p>
<div style="text-indent: 2em">
    脱离文档流，相对于body做偏移
绝对定位一般与相对定位结合使用，它相对的父级是relative定义的元素做偏移，relative的元素必须是absolute的父级。在项目开发中，一般使用relative+absolute结合使用。
</div>

<p>4)fixed:固定定位</p>
<div style="text-indent: 2em">
    脱离文档流，相对于浏览器窗口左上角（0,0）做偏移，它与relative设定的对象没有关系，也就是说
它跟父级的定位没有任何的关系。
一般在开发中用来固定导航栏。
</div>

<ol start="3">
<li>z-index<div style="text-indent:2em">
 当多个元素添加绝对定位，元素将会叠加在一起，使用z-index可以设置元素显示的层次。
 文档流默认的z-index的值是0.
 用在static和relative元素上是无效的。
</div>

</li>
</ol>
</p>


<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>网站开发策略</strong>
</div>

<p>网站开发策略：先整体再局部，至顶向下，逐步细化</p>
</p>


<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>双飞翼布局</strong>
</div>

<p><strong>双飞翼布局：由三列组成，两端固定，中间自适应</strong></p>
<p>双飞翼布局的优点：<br>(1)兼容性好，兼容所有主流浏览器，包括万恶的IE6<br>(2)因为在DOM中center_panel在三列结构的最前面，因此可以实现主要内容的优先加载。</p>
<p>效果图展示<br><img src="/image/htmlSummary/01.gif" style="width: 1360"></p>
<p>实际代码<br><img src="/image/htmlSummary/35.png" style="width: 1360"></p>
<p>难理解的部分就是<br>margin-left=-100% ; margin-left=-300px<br>双飞翼布局的左右两侧是叠加到中间的部分上面的</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>圣杯布局</strong>
</div>

<p>圣杯布局：<br>由三列组成，两端固定，中间自适应。外观与双飞翼布局一样。<br>布局时与双飞翼比增加了定位和偏移设置。</p>
<p>效果图展示<br><img src="/image/htmlSummary/02.gif" style="width: 1360"></p>
<p>实际代码<br><img src="/image/htmlSummary/36.png" style="width: 1360"></p>
<p>难理解的部分就是<br>padding: 0 200px ; position:relative</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>两栏布局</strong>
</div>

<p>1)左侧固定，右侧自适应布局<br>效果图展示<br><img src="/image/htmlSummary/03.gif" style="width: 1360"></p>
<p>实际代码<br><img src="/image/htmlSummary/37.png" style="width: 1360"></p>
<p>难理解的部分：<br>  margin-right: -150px;<br>  position: relative;</p>
<p>2)左侧自适应，右侧固定</p>
<p>效果图展示<br><img src="/image/htmlSummary/04.gif" style="width: 1360"></p>
<p>实际代码<br><img src="/image/htmlSummary/38.png" style="width: 1360"></p>
<p>难理解的部分：<br> margin-left: -150px;</p>
<p>3)左侧固定，右侧固定</p>
<p>效果图展示<br><img src="/image/htmlSummary/05.gif" style="width: 1360"></p>
<p>实际代码<br><img src="/image/htmlSummary/39.png" style="width: 1360"></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>三栏布局</strong>
</div>

<p>1)左右两侧固定，中间自适应的布局</p>
<p>效果图展示<br><img src="/image/htmlSummary/06.gif" style="width: 1360"></p>
<p>实际代码<br><img src="/image/htmlSummary/40.png" style="width: 1360"></p>
<p>2)左自适应的布局  右侧中间固定</p>
<p>效果图展示<br><img src="/image/htmlSummary/07.gif" style="width: 1360"></p>
<p>实际代码<br><img src="/image/htmlSummary/41.png" style="width: 1360"></p>
<p>难以理解的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">.right &#123;<br>           float: right;<br>           height: 200px;<br>           width: 150px;<br>           line-height: 200px;<br>       &#125;<br><br>       .left &#123;<br>           width: 100%;<br>           float: left;<br>           margin-right: -300px;<br>           background-color: lightgreen;<br>       &#125;<br></code></pre></td></tr></table></figure>


<p>3)左侧中间固定，右侧适应的布局</p>
<p>效果图展示<br><img src="/image/htmlSummary/08.gif" style="width: 1360"></p>
<p>实际代码<br><img src="/image/htmlSummary/42.png" style="width: 1360"></p>
<p>难以理解的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">.content &#123;<br>       margin-left: 400px;<br>   &#125;<br><br>   .right &#123;<br>       float: right;<br>       width: 100%;<br>       height: 200px;<br>       line-height: 150px;<br>       background-color: mediumblue;<br>       margin-left: -400px;<br>   &#125;<br></code></pre></td></tr></table></figure>


</p>


<hr>
<p id="aa"  style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>BFC规范</strong>
</div>

<p>5.BFC&amp;IFC<br>FC:Fomatting Context(格式上下文)。它是CSS2.1规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。分为:BFC和IFC。<br>1)BFC:块级格式上下文<br>a）形成BFC的条件<br>i)浮动元素（float除none以外的值)<br>ii）定位元素（position(absolute/fixed))<br>iii) display（值为inline-block/table-cell/table-caption时)<br>iv) overflow（值为hidden/auto/scroll时)</p>
<p>b）BFC特性<br>i)内部的盒子会在垂直方向上一个接一个的放置<br>ii)垂直方向上的距离会叠加，值由最大margin值决定（如果不要叠加，就需要将该盒子变成一个独立的盒子<br>iii)BFC的区域不会float元素区域重叠<br>iv)计算BFC的高度时，浮动元素也参与计算<br>v)BFO就是页面上的一个独立的容器，容器里面的子元素不会影响到外面的元素</p>
<p>c）BFC的作用<br>i)解决margin重叠的问题（添加独立BFC）<br>ii)解决浮动高度塌陷的问题（在父级添加overflow: hidden)<br>iii)解决侵占浮动元素的问题（添加overflow:hidden清除浮动)</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>IFC规范</strong>
</div>

<p>2) IFC:内联（行级）格式上下文<br>a）形成IFC的条件<br>i)font-size<br>ii)line-height<br>iii) height<br>iv)vertical-align<br>b）IFC特性（规则)<br>i)IFC的元素会在一行中从左至右排列<br>ii)在一行上的所有元素会在该区域形成一个行框<br>iii)行宽的高度为包含框的高度，高度为行框中最高元素的高度<br>iv)浮动的元素不会在行框中，并且浮动元素会压缩行框的宽度<br>v)行框的宽度容纳不下子元素时，子元素会换下一行显示，并且会产生新行框<br>vi)行框的元素内遵循text-align和vertical-align</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>容器的高度</strong>
</div>

<p>height = line-height  + vertical-align</p>
</p>

<hr>
</div>]]></content>
      <categories>
        <category>CSS复习</category>
      </categories>
      <tags>
        <tag>CSS学习</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML总复习</title>
    <url>/2020/ckpf35kke000yjov4evocdx6w/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">HTML总复习</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
HTML总复习
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>动态网页和静态网页</strong>

</div>

<ol>
<li>静态网页：HTML代码和内容书写完毕之后，页面的内容和显示效果基本就不会变化了。</li>
<li>动态网页：页面代码虽然没有变化，但是显示的内容却是可以随着时间、环境或者数据库操作的结果而发生改变的。</li>
</ol>
<p><strong>注意： 不要将动态网页和页面内容是否有动画效果混为一谈，比如网页中幻灯片效果，文字滚动效果。<br>如果内容本身没有发生变化，那么也属于静态网页。</strong></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>五大主流浏览器</strong>

</div>

<ol>
<li>Internet Explorer (IE)</li>
<li>FireFox(火狐)</li>
<li>Chrome(谷歌)</li>
<li>Opera(欧朋)</li>
<li>Safari(苹果)</p>

</li>
</ol>
<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>HTML结构的样式</strong>

</div>
<img src="/image/htmlSummary/01.png" style="width: 1360">
<img src="/image/htmlSummary/02.png" style="width: 1360">

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>基本标签</strong>

</div>

<ol>
<li>div标签 <code>&lt;div&gt;&lt;/div&gt;</code></li>
<li>hx(x = 1-6)标题标签 <code>&lt;h1&gt;&lt;/h1&gt;</code></li>
<li>p段落标签 <code>&lt;p&gt;&lt;/p&gt;</code></li>
<li>br换行标签 <code>&lt;br&gt;</code></li>
<li>hr水平线标签,起修饰作用 <code>&lt;hr color=&quot;red&quot; width=&quot;50%&quot; height=&quot;2px&quot; align=&quot;center&quot;&gt;</code></li>
<li>a标签实现链接跳转<code>&lt;a href=&quot;&quot; title=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;</code></li>
<li>img加载外部图片<code>&lt;img src=&quot;&quot; alt=&quot;&quot; title=&quot;&quot;&gt;</code></li>
<li>span作用和div一样，用来布局，div是块级元素，span是行内元素（内联）</li>
<li>ul/ol列表标签，前者是无序的，后者是有序的。<code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code> <code>&lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt;</code></p>

</li>
</ol>
<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>标签属性</strong>

</div>

<ol>
<li>通常由属性名=”属性值”组成</li>
<li>起附加信息作用。</li>
<li>不是所有的标签都有属性，比如 br 标签<br><code>&lt;p title=&quot;段落&quot; class=&quot;content&quot; id=&quot;content&quot;&gt;&lt;/p&gt;</code></p>

</li>
</ol>
<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>文本格式化标签</strong>

</div>

<ol>
<li>b和strong:都有加粗的作用，都是行级标签，但是strong除了加粗还有强调作用。</li>
<li>i和em标签:使文字倾斜，都是行级标签，em具有<code>强调作用</code>，如果只是简单的倾斜效果用i标签就好了，比如添加图标等。</li>
<li>pre预格式化文本，保留换行和空格及宽度，文字的字号会小一号（块级标签）<code>&lt;pre&gt;&lt;/pre&gt;</code></li>
<li>small和big:分别让文字缩小一号，或者放大一号（行级标签）。big在HTML5中淘汰了，但是并没有删除，在开发中尽量不使用 <code>&lt;small&gt;&lt;/small&gt;</code>  <code>&lt;big&gt;&lt;/big&gt;</code></li>
<li>sub和sup:设置文本为下标和上标，用来调整文本正常现实的基线。且文字会自动小一号<br><code>&lt;sub&gt;&lt;/sub&gt;</code>  <code>&lt;sup&gt;&lt;/sup&gt;</code><br><code>注：强调主要用于SEO时，便于提升网站优化的排名</code></p>

</li>
</ol>
<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>单双标签</strong>

</div>

<ul>
<li><p>单标签(单标签后面加反斜杠，养成良好的习惯)<br>换行符: <code>&lt;br/&gt;</code><br>水平线: <code>&lt;hr/&gt;</code><br>图片标签: <code>&lt;img src=&quot;&quot;/&gt;</code><br>文本标签: <code>&lt;input type=&quot;&quot; name=&quot;&quot;/&gt;</code><br>link标签: <code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&quot;/&gt;</code><br>元信息标签: <code>&lt;meta charset=&quot;utf-8&quot;/&gt;</code></p>
</li>
<li><p>双标签<br><code>&lt;div&gt;&lt;/div&gt;</code><br><code>&lt;span&gt;&lt;/span&gt;</code><br><code>&lt;h1&gt;&lt;/h1&gt;</code><br><code>&lt;table&gt;&lt;/table&gt;</code><br><code>&lt;title&gt;&lt;/title&gt;</code><br><code>&lt;head&gt;&lt;/head&gt;</code></p>
</li>
</ul>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>HTML实体转义</strong>

</div>
在HTML中，内容编辑时，如果是通过空格键编辑的多个空格，网页只会显示成一个，而小于号（<）和大于号(>)，网站则会认为是标签而无法直接显示在页面中。而这些都可以通过实体字符来解决。

<table>
<thead>
<tr>
<th align="left">实体字符</th>
<th align="left">编译后字符</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>&amp;lt;</code></td>
<td align="left">小于号(&lt;)</td>
</tr>
<tr>
<td align="left"><code>&amp;gt;</code></td>
<td align="left">大于号(&gt;)</td>
</tr>
<tr>
<td align="left"><code>&amp;amp;</code></td>
<td align="left">与号(&amp;)</td>
</tr>
<tr>
<td align="left"><code>&amp;nbsp;</code></td>
<td align="left">空格</td>
</tr>
<tr>
<td align="left"><code>&amp;copy;</code></td>
<td align="left">版权符号</td>
</tr>
<tr>
<td align="left"><code>&amp;times;</code></td>
<td align="left">乘号(x)</td>
</tr>
<tr>
<td align="left"><code>&amp;divide;</code></td>
<td align="left">除号</td>
</tr>
</tbody></table>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>块级元素和行内元素</strong>

</div>

<p>&lt;一&gt;块级元素（相当于执行了display:block;操作）<br>1）独占一行<br>2）宽度和高度是可控的，如果没有设置其宽度，将默认铺满整行<br>3）其内可以包括块级和行级元素<br><code>&lt;p style=&quot;width: 300px; height: 300px;display: line &quot;&gt;块级标签转行级标签&lt;/p&gt;</code></p>
<p>&lt;一&gt;行级元素（相当于执行了display:line;操作）<br>1）不会独占一行，与相邻的行级元素占同一行，知道行占满，会自动掉到下一行<br>2）宽度和高度是不可控的<br>3）其内可以包括行级元素</p>
<p><code>&lt;span style=&quot;width: 300px; height: 300px;display: block &quot;&gt;行级标签转块级标签&lt;/span&gt;</code></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>W3C标准</strong>

</div>

<p>W3C又称万网联盟</p>
<p>W3C标准有结构标准、表现标准、形为标准三部分组成。</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>标签嵌套规则</strong>

</div>

<ol>
<li>块级元素可以包含内联元素或者某些块级元素，但是内联元素却不能包含块级元素，它只能包含内联元素。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>&lt;div&gt;&lt;h1&gt;&lt;&#x2F;h1&gt;&lt;p&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;------对<br>&lt;a href&#x3D;&quot;#&quot;&gt; &lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;---对<br> &lt;span&gt; &lt;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;span&gt;-------错<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>块级元素不能放在<code>&lt;p&gt;</code>里面</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>&lt;p&gt;&lt;ol&gt;&lt;li&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ol&gt;&lt;&#x2F;p&gt;--错<br>&lt;p&gt;&lt;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;---------错<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>有几个特殊的块级元素只能包含内嵌元素，不能再包含块级元素，这几个是：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"> <br>h1 h2 h3 h4 h5 h6 p dt<br></code></pre></td></tr></table></figure>

<ol start="4">
<li>块级元素和块级元素并列、内嵌元素与内嵌元素并列(XHTMLStrict中这样使用，HTML5中可以随便写的)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>&lt;div&gt;&lt;h1&gt;&lt;&#x2F;h1&gt;&lt;p&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;----------------对<br>&lt;div&gt; &lt;a href&#x3D;&quot;#&quot;&gt;&lt;&#x2F;a&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;--对<br>&lt;div&gt;&lt;h1&gt;&lt;&#x2F;h1&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;----------错<br></code></pre></td></tr></table></figure>

<p><strong>第四点需要注意:<br>XHTMLStrict是一个很严格的标准，现在不是很常用，甚至可以认为已经被弃用了。<br>目前主流的HTML5的规则是：随便写。</strong></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>HTML语义化标签</strong>

</div>

<img src="/image/htmlSummary/03.png" style="width: 1360">
<img src="/image/htmlSummary/04.png" style="width: 1360">
<img src="/image/htmlSummary/05.png" style="width: 1360">
<img src="/image/htmlSummary/06.png" style="width: 1360">

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>文件命名规范</strong>

</div>

<table>
<thead>
<tr>
<th align="left">页面</th>
<th align="left">命名规范</th>
</tr>
</thead>
<tbody><tr>
<td align="left">首页</td>
<td align="left">index.html</td>
</tr>
<tr>
<td align="left">公司介绍</td>
<td align="left">about.html</td>
</tr>
<tr>
<td align="left">新闻列表</td>
<td align="left">news.html</td>
</tr>
<tr>
<td align="left">新闻详情页</td>
<td align="left">news_details.html</td>
</tr>
<tr>
<td align="left">产品列表</td>
<td align="left">product.html</td>
</tr>
<tr>
<td align="left">产品详情页</td>
<td align="left">pro_details.html</td>
</tr>
<tr>
<td align="left">联系我们</td>
<td align="left">contact.html</td>
</tr>
</tbody></table>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>标签通用属性</strong>

</div>

<ol>
<li><p>标签是由标签名、标签属性、和文本内容三部分组成（单标签没有文本内容）</p>
</li>
<li><p>标签属性是对标签的一种描述方式</p>
</li>
<li><p>标签属性分为通用属性、自有属性和自定义属性</p>
</li>
<li><p>通用属性:所有标签都具有的属性</p>
<pre style="color: skyblue">
    通用属性有：
       id：用来给标签取一个唯一的名称。id名称在一个网页必须是唯一的。
       class：用来给标签取一个类名。
       style：用来设置该标签的行内样式。
       title: 当鼠标移到该标签，所显示的提示内容。
</pre>
</li>
<li><p>自定义属性标签属性：通常用来传值或用于图片懒加载等方面<br>格式： data-*<br><code>&lt;img data-src=&quot;图片名&quot; alt=&quot;提示文本&quot;&gt;</code><br><code>&lt;p data-id=&quot;goodsid&quot;&gt;....&lt;/p&gt;</code></p>
</li>
</ol>
<hr>
<div style="text-align: center; color: red">
    <strong>table标签</strong>

</div>

<ol start="6">
<li>table主要用于呈现格式化数据。表格是由行和列组成<br>格式：<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>&lt;table&gt;<br>	&lt;tr&gt;<br>&lt;th&gt;&lt;&#x2F;th&gt;  &#x2F;&#x2F; th:表头，主要用于对下面的内容起说明作用，th的内容会自动加粗和居中显示<br>		&lt;td&gt;&lt;&#x2F;td&gt;<br>		....<br>	&lt;&#x2F;tr&gt;<br>	.....<br>&lt;&#x2F;table&gt;<br></code></pre></td></tr></table></figure>
<ol start="7">
<li>table属性<br>border：表格边框，默认单位是像素<br>width：表格宽度，默认单位是像素<br>align：表格的对齐方式（left(默认)/center/right）<br>cellpadding:单元格文本与边框的距离<br>cellspacing:单元格边框间距</li>
</ol>
</li>
</ol>
<img src="/image/htmlSummary/07.png" style="width: 1360">

<ol start="8">
<li>表格的rowspan和colspan合并单元格属性的使用</li>
</ol>
<p>rowspan：跨行合并（row：一行）<br>rowspan=”2” 合并单元格的个数<br>align:水平方向移动<br>valign:垂直方向移动 top/middle/bottom<br><img src="/image/htmlSummary/08.png" style="width: 1360"></p>
<p>  colspan：跨列合并<br>  colspan=”2” 合并单元格的个数<br>  valign:垂直方向移动 top/middle/bottom</p>
<img src="/image/htmlSummary/09.png" style="width: 1360">

<ol start="9">
<li><p>完整表格组成：caption（标题）、thead（表头）、tbody（标体）和tfoot（表尾）四部分组成</p>
</li>
<li><p>form表单标签是所有标签最核心标签之一。它是用来实现前后端交互的一个重要标签。<br>常用属性：<br>name：表单名称<br>action：表单数据提交的地方（通常是一个后台文件名(.jsp/.php)，或者网址）如果是#表示当前文件下。<br>method：前端提交数据到后端的方法，主要有：get和post，默认时get。</p>
</p>

</li>
</ol>
<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>input标签</strong>

</div>

<p>1）input类：主用于来输入，选择或发出指令。<br>type：text/password/radio/checkbox/file/button/image/submit/reset</p>
<p>a:text:单行文本输入框 type=”text”可以不写，默认值<br>属性： placeholder(提示)/name(命名)/minlength和maxlength(最少/多输入的字符个数)<br>/disable(失效)/readonly(只读)/value(默认值)/pattern(正则匹配)</p>
<p>b:password:密码框  属性与text一样</p>
<p>c:radio:单选按钮，通常是两项以上，多选一。常用属性有：name（必须要有）/value/checked(选中)<br>/disable(失效)/readonly(只读)</p>
<p>name的值要相同才可以多选一<br><img src="/image/htmlSummary/10.png" style="width: 1360"></p>
<p>d:checkbox:复选框，可以用来选择0选、1项或者多项。<br>常用属性有：name（必须要有/disable(失效)/readonly(只读)</p>
<p>name的值要相同才可以多选多<br><img src="/image/htmlSummary/11.png" style="width: 1360"></p>
<p>e:file:文件上传按钮<br><img src="/image/htmlSummary/12.png" style="width: 1360"></p>
<p>f:button:普通按钮，通常用它去调用脚本代码。<br>常用属性有：value（按钮的标题）/disable（失效）<br><img src="/image/htmlSummary/13.png" style="width: 1360"></p>
<p>g:image:图片按钮，用法与button一样。有一个特殊属性：src（用来加载提示图片，用它替换了value）<br>它有提交功能，与submit功能一样。<br><img src="/image/htmlSummary/14.png" style="width: 1360"></p>
<p>h:submit:提交按钮，用来将表单数据提交到后台。<br>常用属性有：value(按钮的标题)/disable(失效)<br><img src="/image/htmlSummary/15.png" style="width: 1360"></p>
<p>j:reset:重置按钮，将表单所有组件输入的内容全部清空，还原为初始状态。<br>常用属性有：value（按钮的标题）/disable(失效)<br><img src="/image/htmlSummary/16.png" style="width: 1360"></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>textarea类</strong>
</div>
文本域（也可以叫多行文本框），主要用于输入大批量的内容
常用属性有：name/id/cols(列数)/rows(行数)/placeholder/minlength/maxlength/required(必须输入)/value
<img src="/image/htmlSummary/17.png" style="width: 1360">

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>select类</strong>
</div>

<p>下拉列表框，默认为用于单项选择，用于option呈现每一个选项<br>mltiple属性：表示可以多选，这时的下拉列表框变成了列表框<br>size：最多显示的行数</p>
<img src="/image/htmlSummary/18.png" style="width: 1360">

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>button类</strong>
</div>
普通按钮，具有提交功能。可以单独使用，不写在form元素中；如果写在form中，有提交功能。

<img src="/image/htmlSummary/19.png" style="width: 1360">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


</div>]]></content>
      <categories>
        <category>HTML复习</category>
      </categories>
      <tags>
        <tag>HTML学习</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6语法学习</title>
    <url>/2020/ckpf35kju000mjov47sk16dyq/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">ES6语法学习</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
ES6语法学习
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align:center; color: red">es6数组合并arr1 = [...arr1,...arr2] | push()</div>

<p>push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度，不是创建一个新的数组，而是在<code>原数组</code>上修改。<br>注意：该方法会改变数组的长度。<br>unshift() 方法可向数组的开头添加一个或多个元素。<br><a href="Array.prototype.push()">官方细解Array.prototype.push()</a></p>
<p>ES6方法 arr1 = […arr1,…arr2]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F;合并两个数组<br>var arr1&#x3D; [1,2,3]<br>var arr2&#x3D; [4,5,6]<br>arr1.push(...arr2) &#x3D;  arr1 &#x3D; [...arr1,...arr2]<br><br>arr1.push(...arr2)&#x2F;&#x2F;或者arr1 &#x3D; [...arr1,...arr2]<br></code></pre></td></tr></table></figure>

<hr>
<div style="text-align:center; color: red">es6数组去重Array.from()和new Set()的用法</div>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener">官方细解Array.from()</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener">官方细解Array.from()</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F;去重<br>let arr &#x3D; [12,12,45,97,9797,564,134,45642]<br>let set &#x3D; new Set(arr)   &#123;12,45,97,9797,564,134,4562&#125;  &#x2F;&#x2F;去重<br>console.log(Array.from(set))  &#x2F;&#x2F; [ 12, 45, 97, 9797, 564, 134, 45642 ]<br><br>let arr &#x3D; [12,12,45,97,9797,564,134,45642]<br>let arr3 &#x3D; Array.from(new Set(arr1))   &#x2F;&#x2F;let arr3 &#x3D; [...new Set(arr1)]<br></code></pre></td></tr></table></figure>

<p>Array.from()和new Set()的用法详解</p>
<p><code>Array.from()方法就是将一个类数组对象或者可遍历对象转换成一个真正的数组。</code><br>那么什么是类数组对象呢？所谓类数组对象，最基本的要求就是具有length属性的对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">let arrayLike &#x3D; &#123;<br>    0: &#39;tom&#39;, <br>    1: &#39;65&#39;,<br>    2: &#39;男&#39;,<br>    3: [&#39;jane&#39;,&#39;john&#39;,&#39;Mary&#39;],<br>    &#39;length&#39;: 4<br>&#125;<br>let arr &#x3D; Array.from(arrayLike)<br>console.log(arr) &#x2F;&#x2F; [&#39;tom&#39;,&#39;65&#39;,&#39;男&#39;,[&#39;jane&#39;,&#39;john&#39;,&#39;Mary&#39;]]<br></code></pre></td></tr></table></figure>
<p>那么，如果将上面代码中length属性去掉呢？实践证明，答案会是一个长度为0的空数组。</p>
<p>这里将代码再改一下，就是具有length属性，但是对象的属性名不再是数字类型的，而是其他字符串型的，代码如下：<br>1、将类数组对象转换为真正数组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">let arrayLike &#x3D; &#123;<br>    &#39;name&#39;: &#39;tom&#39;, <br>    &#39;age&#39;: &#39;65&#39;,<br>    &#39;sex&#39;: &#39;男&#39;,<br>    &#39;friends&#39;: [&#39;jane&#39;,&#39;john&#39;,&#39;Mary&#39;],<br>    length: 4<br>&#125;<br>let arr &#x3D; Array.from(arrayLike)<br>console.log(arr)  &#x2F;&#x2F; [ undefined, undefined, undefined, undefined ]<br></code></pre></td></tr></table></figure>
<p>会发现结果是长度为4，元素均为undefined的数组</p>
<p>由此可见，要将一个类数组对象转换为一个真正的数组，必须具备以下条件：</p>
<ul>
<li>1、该类数组对象必须具有length属性，用于指定数组的长度。如果没有length属性，那么转换后的数组是一个空数组。</li>
<li>2、该类数组对象的属性名必须为数值型或字符串型的数字</li>
<li>ps: 该类数组对象的属性名可以加引号，也可以不加引号</li>
</ul>
<p>2、将Set结构的数据转换为真正的数组：<br><code>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">let arr &#x3D; [12,12,45,97,9797,564,134,45642]<br>let set &#x3D; new Set(arr)   &#123;12,45,97,9797,564,134,4562&#125;  &#x2F;&#x2F;去重<br>console.log(Array.from(set))  &#x2F;&#x2F; [ 12, 45, 97, 9797, 564, 134, 45642 ]<br></code></pre></td></tr></table></figure>
<p>3.　Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">let arr &#x3D; [12,45,97,9797,564,134,45642]<br>let set &#x3D; new Set(arr)<br>console.log(Array.from(set, item &#x3D;&gt; item + 1)) &#x2F;&#x2F; [ 13, 46, 98, 9798, 565, 135, 45643 ]<br></code></pre></td></tr></table></figure>
<p>将字符串转换为数组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"> let  str &#x3D; &#39;hello world!&#39;;<br>console.log(Array.from(str)) &#x2F;&#x2F; [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot; &quot;, &quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;, &quot;!&quot;]<br></code></pre></td></tr></table></figure>
<p>4、Array.from参数是一个真正的数组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">console.log(Array.from([12,45,47,56,213,4654,154]))<br></code></pre></td></tr></table></figure>
<p>像这种情况，Array.from会返回一个一模一样的新数组</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>let声明及声明特性</strong>
</div>

<p><strong>声明变量</strong><br>let a;<br>let b,d,f;<br>let h=100;<br>let m=100,c=’ninn’,w=[];</p>
<ol>
<li><p>let变量不能重复声明 var 可以<br>let star = ‘罗志祥’;<br>let star = ‘小猪’; </p>
</li>
<li><p>块级作用域 全局 函数 eval<br>if else while for<br>{<br> let girl = ‘女’;<br>}<br>console.log(girl); </p>
</li>
<li><p>不存在变量提升<br>console.log(a);<br>let a=100;</p>
</li>
<li><p>不影响作用域链</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#123;<br> let school &#x3D; &quot;青学&quot;<br> function fn()&#123;<br>     console.log(schoo) &#x2F;&#x2F;打印青学<br>       &#125;<br>      fn();<br>&#125;<br></code></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>var 和 let 的区别</strong></p>
<p>var :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">for (var i &#x3D; 0; i &lt; 2; i++) &#123;<br>    items[i].onclick &#x3D; function () &#123;<br>        items[i].style.background &#x3D; &quot;pink&quot;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>var没有块级作用域相当于执行以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#123;<br>var i&#x3D;0<br>&#125;<br><br>&#123;<br>var i&#x3D;1<br>&#125;<br><br>&#123;<br>var i&#x3D;2<br> items[i].onclick &#x3D; function () &#123;<br>                items[i].style.background &#x3D; &quot;pink&quot;<br>            &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>let:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">for (let i &#x3D; 0; i &lt; 2; i++) &#123;<br>         items[i].onclick &#x3D; function () &#123;<br>             items[i].style.background &#x3D; &quot;pink&quot;<br>         &#125;<br>     &#125;<br></code></pre></td></tr></table></figure>
<p>let具有块级作用域相对于执行下列代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#123;<br>let i&#x3D;0<br> items[0].onclick &#x3D; function () &#123;<br>                items[0].style.background &#x3D; &quot;pink&quot;<br>            &#125;<br>&#125;<br><br>&#123;<br>let i&#x3D;1<br>items[1].onclick &#x3D; function () &#123;<br>                items[1].style.background &#x3D; &quot;pink&quot;<br>            &#125;<br><br>&#125;<br><br>&#123;<br>let i&#x3D;2<br> items[2].onclick &#x3D; function () &#123;<br>                items[2].style.background &#x3D; &quot;pink&quot;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>let防止循环变量变成全局变量<br>let具有块级作用域<br>let变量不能重复声明<br>let不存在变量提升</p>
<p>let声明的变量具有暂时性死区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"> &lt;script&gt;<br>   var num &#x3D; 10<br>   if (true) &#123;<br>     console.log(num);  &#x2F;&#x2F;打印报错<br>     let num &#x3D; 10;<br>   &#125;<br> &lt;&#x2F;script&gt;<br><br>&lt;script&gt;<br>   var num &#x3D; 10<br>   if (true) &#123;<br>     console.log(num);  &#x2F;&#x2F;打印10<br>     let a &#x3D; 10;<br>   &#125;<br> &lt;&#x2F;script&gt;<br><br>  &lt;script&gt;<br>   var num &#x3D; 10<br>   if (true) &#123;<br>     console.log(num);  &#x2F;&#x2F;打印10<br>   &#125;<br> &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>


<hr>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>const声明及声明特性</strong>
</div>

<p><strong>声明变量</strong></p>
<ul>
<li><p>具有块级作用域</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  if (true) &#123;<br>    const num &#x3D; 10;<br>  &#125;<br>  console.log(num); &#x2F;&#x2F; undefined<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>
</li>
<li><p>声明常量必须赋值</p>
</li>
<li><p>常量赋值后，值不能修改（声明常量。常量就是值（内存地址）不能变化的量）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const PI &#x3D; 3.14<br>PI &#x3D; 100 ; &#x2F;&#x2F; 报错<br><br>const arr &#x3D; [100,200]<br>arr[0] &#x3D; &#39;a&#39;;<br>arr[1] &#x3D; &#39;b&#39;;<br>console.log(arr); &#x2F;&#x2F; [&#39;a&#39;,&#39;b&#39;] 没有报错是没有修改内存地址，<br>arr &#x3D; [&#39;a&#39;,&#39;b&#39;] &#x2F;&#x2F;报错，因为修改了内存地址<br></code></pre></td></tr></table></figure>

</li>
</ul>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>var let const 的总结</strong>
</div>

<p>var 不存在作用域 可以变量提升<br>let 存在作用域， 不可以变量提升 暂时性死区<br>const 具有作用域 声明变量必须赋值，常量赋值后不能修改</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>解构赋值</strong>
</div>

<p><strong>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</strong></p>
<p>数组解构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">let [a,b,c] &#x3D; [1,2,3]<br>console.log(a) &#x2F;&#x2F; 1<br>console.log(b) &#x2F;&#x2F; 2<br>console.log(c) &#x2F;&#x2F; 3<br></code></pre></td></tr></table></figure>
<p>如果解构不成功，变量的值为undefined</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">let [foo] &#x3D; []  <br>console.log(foo)  &#x2F;&#x2F; 打印 undefined<br><br>let [bar , foo] &#x3D; [1];<br>console.log(bar)&#x2F;&#x2F;打印 1 <br>console.log(foo)&#x2F;&#x2F;打印 undefined<br></code></pre></td></tr></table></figure>

<p>对象解构</p>
<p>对象解构允许我们使用变量的名字匹配对象的属性，匹配成功将对象属性的值赋值给变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">let person &#x3D; &#123;<br>	name: &#39;zs&#39;,<br>	age: 18,<br>	sex: &#39;男&#39;<br>	 &#125;;<br>let &#123;name,age,sex&#125; &#x3D; person;<br>console.log(name)  &#x2F;&#x2F; 打印&#39;zs&#39;<br>console.log(age)   &#x2F;&#x2F;打印 18<br>console.log(sex)   &#x2F;&#x2F;打印 男<br><br><br>let person &#x3D; &#123;<br>	name: &#39;zs&#39;,<br>	age: 18,<br>	sex: &#39;男&#39;<br>	 &#125;;<br>let &#123;name: myname,age: myage,sex: mysex&#125; &#x3D; person;<br>console.log(myname)  &#x2F;&#x2F; 打印&#39;zs&#39;<br>console.log(myage)   &#x2F;&#x2F;打印 18<br>console.log(mysex)   &#x2F;&#x2F;打印 男<br></code></pre></td></tr></table></figure>




</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>箭头函数</strong>
</div>

<p><strong>箭头函数是用来简化函数定义语法的</strong></p>
<blockquote>
<p>()=&gt;{}<br>const fn = ()=&gt;{}</p>
</blockquote>
<p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const sum &#x3D; (num1,num2)&#x3D;&gt; num1+num2;<br></code></pre></td></tr></table></figure>

<p>在箭头函数中，如果形参只有一个，形参外侧的小括号也是可以省略的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const fn &#x3D; v&#x3D;&gt;&#123;<br>	console.log(v) &#x2F;&#x2F;打印 20<br>&#125;<br>fn(20)<br></code></pre></td></tr></table></figure>

<p>箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">function fn ()&#123;<br>	console.log(this); &#x2F;&#x2F;打印的是 &#123;name:&#39;zs&#39;&#125;<br>	return ()&#x3D;&gt;&#123;<br>		console.log(this)  &#x2F;&#x2F;打印的是 &#123;name:&#39;zs&#39;&#125;<br>	&#125;<br>&#125;<br>const obj &#x3D; &#123;name: &#39;zs&#39;&#125;<br>fn.call(obj);<br></code></pre></td></tr></table></figure>

<p>箭头函数的面试题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var obj &#123;<br>	age : 20<br>	say: ()&#x3D;&gt;&#123;<br>		alert(this.age) &#x2F;&#x2F;弹出 undefined<br>	&#125;<br>&#125;<br>obj.say()<br><br>对象是没有作用域的，所以箭头函数定义在全局作用域下，也就是window里面。<br><br>var age &#x3D; 100；<br>var obj &#123;<br>	age : 20<br>	say: ()&#x3D;&gt;&#123;<br>		alert(this.age) &#x2F;&#x2F;弹出 100<br>	&#125;<br>&#125;<br>obj.say()<br>window.age &#x3D; 100<br></code></pre></td></tr></table></figure>

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

 <div style="text-align: center; color: red">
    <strong>剩余参数</strong>
</div>

<p><strong>剩余参数语法允许我们将一个不定数量的参数表示为一个数组</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">function sum (first, ...args)&#123;<br>	console.log(first); &#x2F;&#x2F; 10<br>	console.log(args); &#x2F;&#x2F; [20,30]<br>&#125;<br>sum(10,20,30)<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const sum &#x3D; (...args)&#x3D;&gt;&#123;<br>	let total &#x3D; 0;<br>	args.forEach(item&#x3D;&gt;total+&#x3D;item);<br>	return total;<br>&#125;<br><br><br>console.log(sum(10,20))<br></code></pre></td></tr></table></figure>


</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>剩余参数和解构配合使用</strong>
</div>

<p><strong></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">let arr1 &#x3D; [&#39;zs&#39;,&#39;ww&#39;,&#39;ls&#39;]<br>let [a1,...a2 ] &#x3D; arr1<br>console.log(a1) &#x2F;&#x2F;打印 &#39;zs&#39;<br>console.log(a2) &#x2F;&#x2F;打印 [&#39;ww&#39;,&#39;ls&#39;]<br></code></pre></td></tr></table></figure>

</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>Array扩展的方法</strong>
</div>

<p><strong>扩展运算符可以将数组拆分成以逗号分隔的参数序列</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">let arr &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]<br>...arr &#x2F;&#x2F; &#39;a&#39;,&#39;b&#39;,&#39;c&#39;<br>console.log(...arr)  &#x2F;&#x2F; a b c<br>console.log(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) &#x2F;&#x2F; a b c<br></code></pre></td></tr></table></figure>
<p>扩展运算符可以应用于合并数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">方法一<br>let arr1 &#x3D; [1,2,3];<br>let arr2 &#x3D; [4,5,6];<br>let arr3 &#x3D; [...arr1,...arr2]; &#x2F;&#x2F; [1,2,3,4,5,6]<br><br>方法二<br>let arr1 &#x3D; [1,2,3];<br>let arr2 &#x3D; [4,5,6];<br>let arr1.push(...arr2)<br>console.log(arr1)  &#x2F;&#x2F; [1,2,3,4,5,6]<br></code></pre></td></tr></table></figure>

<p>将伪数组转换成真正的数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var arr1 &#x3D; 伪数组<br>var ary &#x3D; [...arr1]<br>ary.push(&#39;a&#39;)<br></code></pre></td></tr></table></figure>

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>构造函数方法: Array.from()</strong>
</div>

<p><strong>将伪数组或可遍历对象转换为真正的数组</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  let obj &#x3D; &#123;<br>    0: &quot;a&quot;,<br>    1: &quot;b&quot;,<br>    length: 2,<br>  &#125;;<br>  let arr &#x3D; Array.from(obj);<br>  console.log(arr);  &#x2F;&#x2F;) [&quot;a&quot;, &quot;b&quot;]<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

<p>Array.from()方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理。<br>将处理后的值放入返回的数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var arr1 &#x3D; &#123;<br>	&quot;0&quot;: 1,<br>	&quot;1&quot;: 2,<br>	&quot;length&quot;: 2<br>&#125;<br>var arr2 &#x3D; Array.from(arr1,item&#x3D;&gt;item*2)<br>console.log(arr2) &#x2F;&#x2F; [2,4]<br></code></pre></td></tr></table></figure>


</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>Array的拓展方法：find方法</strong>
</div>

<p><strong>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">let ary &#x3D;[&#123;<br>	id:1,<br>	name:&#39;zs&#39;<br>	&#125;,&#123;<br>		id:2,<br>		name:&#39;ls&#39;<br>		&#125;]<br>let target &#x3D; ary.find((item,index)&#x3D;&gt;item.id &#x3D;&#x3D; 2  )<br>console.log(target)  &#x2F;&#x2F; object  &#123;id:2,name:&#39;ls&#39;&#125;<br></code></pre></td></tr></table></figure>

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>Array的拓展方法：findIndex方法</strong>
</div>

<p><strong>用于找出第一个符合条件的数组成员位置，如果没有找到返回-1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">let ary &#x3D; [1,5,10,15]<br>let index &#x3D; ary.findIndex((value,index)&#x3D;&gt;value&gt;9 )<br>console.log(index)  &#x2F;&#x2F; 2<br></code></pre></td></tr></table></figure>


</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>Array的拓展方法：includes方法</strong>
</div>

<p><strong>表示某一个数组是否包含给定的值，返回布尔值</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">[1,2,3].includes(2)  &#x2F;&#x2F; true<br>[1,2,3].includes(4)  &#x2F;&#x2F; false<br></code></pre></td></tr></table></figure>

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>String的扩展方法模板字符串</strong>
</div>

<p><strong>模板字符中可以解析变量</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">let name &#x3D; &#39;我的名字是&#39;<br>let names &#x3D; &#96;$&#123;name&#125;张三&#96;<br>console.log(names)<br></code></pre></td></tr></table></figure>

<p><strong>模板字符中可以换行</strong></p>
<p><strong>模板字符中可以调用函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const fn &#x3D; ()&#x3D;&#123;<br>	return &#39;我是函数&#39;<br>&#125;<br>let html &#x3D; &#96;我是模板字符串 $&#123;fn ()&#125;&#96;<br>console.log(html) &#x2F;&#x2F; 我是模板字符串 我是函数<br></code></pre></td></tr></table></figure>

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>String的扩展方法startsWith()和endsWith()</strong>
</div>

<strong>
startsWith(): 表示参数字符串是否在原字符串的头部，返回布尔值    
endsWith(): 表示参数字符串是否在原字符串的尾部，返回布尔值    
</strong>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">let str &#x3D; &#39;Hello world!&#39;<br>str.startsWith(&#39;Hello&#39;) &#x2F;&#x2F; true<br>str.endsWith(&#39;!&#39;) &#x2F;&#x2F; true<br></code></pre></td></tr></table></figure>

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>String的扩展方法repeat()</strong>
</div>

<p><strong>repeat方法表示将原字符串重复n次，返回一个新的字符串</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#39;x&#39;.repeat(3) &#x2F;&#x2F; &#39;xxx&#39;<br>&#39;hello&#39;.repear(2) &#x2F;&#x2F; &#39;hellohello&#39;<br></code></pre></td></tr></table></figure>

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>set数据结构</strong>
</div>

<p><strong>ES6提供了新的数据结构Set,它类似于数组，但是成员的值都是唯一的，没有重复的值。</strong><br>Set 本身是一个构造函数，用来生成Set数据结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const s &#x3D; new Set()<br></code></pre></td></tr></table></figure>

<p>Set函数可以接受一个数组作为参数，用来初始化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const set &#x3D; new Set([1,2,3,4,4,4,4])<br>console.log(set.size) &#x2F;&#x2F; 4<br></code></pre></td></tr></table></figure>

<p><strong>Set 数组去重的方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  const set &#x3D; new Set([1, 2, 3, 4, 4, 4])<br>  let ary &#x3D; [...set]<br>  console.log(ary);   &#x2F;&#x2F; [1,2,3,4]<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

<p><strong>Set实例方法</strong></p>
<p>Set 是一个对象</p>
<ul>
<li>add(value): 添加某个值，返回Set结构本身</li>
<li>delete(value): 删除某个值，返回一个布尔值，表示删除是否成功</li>
<li>has(value): 返回一个布尔值，表示该值是否为Set的成员</li>
<li>clear(): 清除所有成员，没有返回值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const s &#x3D; new Set();   <br>s.add(&#39;a&#39;).add(&#39;b&#39;).add(&#39;c&#39;); &#x2F;&#x2F;向set结构中添加值<br>s.delete(&#39;a&#39;)                &#x2F;&#x2F;删除set结构中的 &#39;a&#39;值<br>s.has(&#39;c&#39;)                  &#x2F;&#x2F;表示set结构是否有 &#39;c&#39; 返回布尔值<br>s.clear()                  &#x2F;&#x2F;清除set结构中的所有值<br></code></pre></td></tr></table></figure>
<p><strong>Set遍历</strong><br>Set结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const s &#x3D; new Set([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]);<br>s.forEach(value&#x3D;&gt;&#123;<br>	console.log(value)  &#x2F;&#x2F; a  b  c<br>	&#125;)<br></code></pre></td></tr></table></figure>


</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong></strong>
</div>

<p><strong></strong></p>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong></strong>
</div>

<p><strong></strong></p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong></strong>
</div>

<p><strong></strong></p>
</p>




</div>]]></content>
      <categories>
        <category>ES6语法学习</category>
      </categories>
      <tags>
        <tag>ES6语法</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马商城vue</title>
    <url>/2020/ckpf35ksp009qjov4gwwd8g7o/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">黑马商城vue</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
黑马商城vue
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<h2 style="text-align: center">第一天学习内容</h2>
1.项目的初始化 <br>
2.项目初始化到远程仓库<br>
3.项目托管到码云中<br>
4.登录与退出功能的实现<br>
5.登录前的预验证<br>
6.根据预验证是否发起请求(token)<br>
7.登录成功与登录失败的弹窗提示<br>
8.路由导航守卫控制访问权限<br>
9.退出功能实现原理<br>
10.提交登录功能代码

<hr>
<h3 style="text-align: center;">初始化到远程仓库</h3>
1.操作流程如下图所示
<img src="/image/git/01.png"><br>
<img src="/image/git/02.png"><br>
<img src="/image/git/03.png"><br>
<img src="/image/git/04.png"><br>
<img src="/image/git/05.png"><br>
<img src="/image/git/06.png"><br>
<img src="/image/git/07.png"><br>
<img src="/image/git/08.png"><br>
<img src="/image/git/09.png"><br>
<img src="/image/git/10.png"><br>
<img src="/image/git/11.png"><br>

<hr>
<h3 style="text-align: center;">提交登录功能代码</h3>
<h6 style="color: red">
1.操作流程如下图所示<br>
把源代码提交到云端仓储中进行保存，同时我们也将login分支保存到云端仓储中<br>
今后只要是写的源代码经过测试之后没问题，一定要先合并到主分支，然后再将主分支提交到云端仓<br>库中，同时要将新建的子分支一并推送到云端的仓库中
</h6>
<img src="/image/git/12.png"><br>
<img src="/image/git/13.png"><br>
<img src="/image/git/14.png"><br>
<img src="/image/git/15.png"><br>
<img src="/image/git/16.png"><br>
<img src="/image/git/17.png"><br>
<img src="/image/git/18.png"><br>
<img src="/image/git/19.png"><br> 
<img src="/image/git/20.png"><br>
<img src="/image/git/21.png"><br>
<img src="/image/git/22.png"><br>

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>



</div>]]></content>
  </entry>
  <entry>
    <title>cookie-token-session</title>
    <url>/2020/ckpf35kqc0072jov4dfal2npn/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">cookie-token-session</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
cookie-token-session
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>HTTP是无状态的，无法识别用户的身份</p>
<ul>
<li>通过cookie在客户端记录状态</li>
<li>通过session在服务端记录状态</li>
<li>通过token方式维持状态</li>
</ul>
<p>1.不跨域时，我们可以通过cookie和session结合来识别用户的登录状态的<br>2.跨域处理时，通过token的方式来维持登录状态</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><b>token登录原理的分析图解</b><br><img src="/image/token/01.png"></p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>



</div>]]></content>
  </entry>
  <entry>
    <title>bootstrap项目的解析</title>
    <url>/2020/ckpf35kq9006yjov42v6ehmyv/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>bootstrap项目上传到码云</title>
    <url>/2020/ckpf35kqb0071jov4f7y2fai7/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1856413370,456944799&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">bootstrap项目上传到码云</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
第一个bootstrap的项目，最近完成并且上传到了码云，记录一下上传的路径。
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
准备工作：  需要下载git软件    需要码云注册账号 <br>
git 可以把我们的本地网站提交上传到远程仓库（码云 gitee）里面类似以前的ftp<br>
码云就是远程仓库,类似服务器 <br>
</p>

<p style="text-indent: 2em;color: red;font-size: 13px">
<b>1:码云创建新的仓库。   bootstrap项目</b>
<img src="/image/mayunpush/01.png">
<br>
<br>
<br>
<br>
<b>2:点进来之后，如图操作 ，创建完创库后</b>
<img src="/image/mayunpush/02.png">
<img src="/image/mayunpush/03.png">
<br>
<br>
<br>
<br>
<b>3:利用git 提交 把本地网站提交到 码云新建的仓库里面</b><br>
在网站根目录右键– Git Bash Here
<img src="/image/mayunpush/04.png">

<p><code>如果是第一次利用git提交，请配置好全局选项</code><br>在如下图所示的界面输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git config --global user.name &quot;用户名&quot;<br>git config --global user.email &quot;你的邮箱地址&quot;<br></code></pre></td></tr></table></figure>
<img src="/image/mayunpush/05.png">


<ul>
<li><p>不是第一次的不话，依次输入以下命令符（第一次的话，输入上面的命令后，还需继续输入以下命令）</p>
</li>
<li><p>初始化仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git init<br></code></pre></td></tr></table></figure></li>
<li><p>把本地文件放到暂存区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git add .<br></code></pre></td></tr></table></figure></li>
<li><p>把本地文件放到本地仓库里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git commit -m &#39;提交bootstarp项目&#39;<br></code></pre></td></tr></table></figure></li>
<li><p>链接远程仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git remote add origin 你新建的仓库地址<br></code></pre></td></tr></table></figure>
<p><code>你新建的仓库地址</code>在你创建仓库后会跳到这个界面有 <code>你新建的仓库地址</code><br>仓库地址在下图的位置</p>
<img src="/image/mayunpush/06.png">


</li>
</ul>
<p>最后输入这个命令符</p>
<ul>
<li>把本地仓库的文件推送到远程仓库 push<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">git push -u origin master<br></code></pre></td></tr></table></figure>

</li>
</ul>
<p>推送完毕后，我们在这个网页进行刷新<br><img src="/image/mayunpush/07.png"></p>
<p>可以看到所有的项目文件都上传到码云了<br><img src="/image/mayunpush/08.png"></p>
<p><strong>到这一步，我就把项目文件传送码云上面了</strong></p>
<hr>
<br>
<br>
<br>
<b>码云部署发布静态网站</b><br>
在当前仓库中，点击  “服务”   菜单 选择 Gitee Pages


<img src="/image/mayunpush/09.png">
进来之后，我们可以点击启动即可
<br>
<br>
<img src="/image/mayunpush/11.png">

<p>会生成一个网址，我们进去网址就可以看到我们写的静态界面<br><br><br><br><br><img src="/image/mayunpush/10.png"></p>
<p><strong>但是，1个小时内，只能上传 20个以内的文件， 前端人员，git必备技能</strong></p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>



</div>]]></content>
  </entry>
  <entry>
    <title>vue案例解说</title>
    <url>/2020/ckpf35kqn007kjov4dh1m7yj8/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">vue案例解说</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
用来加强自己的vue学习
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>vue Tab栏切换案例</strong><br>具体效果如下图所示:<br><img src="/image/vueanli/01.gif"></p>
<p>具体代码如下<br><img src="/image/vueanli/01.png"></p>
<p>案例总结</p>
<div style="color: red">

<ol>
<li>用到了v-for循环 list 的数组，:key=’item.id’</li>
<li>用到了@click=”change(index)” 把数组里面的 index 拿到，通过（index）传参给 点击函数</li>
<li>通过绑定类名属性 用三元表达式给 button 和 div 分别添加背景颜色和 display:block 的类名。</li>
<li>最重要的是 currentIndex 的设置，然后用change函数通过 this.currentIndex=index 重新赋值。</div>
</p>

</li>
</ol>
<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>vue 跑马灯案例</strong><br>具体效果如下图所示:<br><img src="/image/vueanli/02.gif"><br>具体代码如下<br><img src="/image/vueanli/02.png"></p>
<p>案例总结：</p>
<div style="color: red">

<ol>
<li>用到了定时器函数 setInterval(function(){}，1000) </li>
<li>用到了substring()截图字符。</li>
<li>if (this.intervalId != null) return; 是为了防止<code>连续按下按钮</code>一直触发跑马灯（定时器函数）</li>
<li>this.intervalId = null; 是为了防止按下<code>低调的按钮</code>，停止跑马灯后，再次按下浪起来<br><code>跑马灯不继续跑起来</code>。</div>

</li>
</ol>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>vue 图书管理</strong><br>总体的具体效果如下图所示:<br><img src="/image/vueanli/03.gif"><br>在讲解案列之前我要写一些关于vue数组方法的笔记<br><strong>变更方法</strong><br>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice()</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
<p><strong>替换数组</strong><br>变更方法，顾名思义，会变更调用了这些方法的原始数组。相比之下，也有非变更方法，例如 filter()、concat() 和 slice()。它们不会变更原始数组，而总是返回一个新数组。当使用非变更方法时，可以用新数组替换旧数组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">example1.items &#x3D; example1.items.filter(function (item) &#123;<br>  return item.message.match(&#x2F;Foo&#x2F;)<br>&#125;)<br></code></pre></td></tr></table></figure>
<p>你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的启发式方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。<br><a href="https://cn.vuejs.org/v2/guide/list.html#变更方法" target="_blank" rel="noopener">VUE官方详情解释链接</a></p>
<p><strong>修改响应式数据</strong><br><img src="/image/vueanli/03.png"><br>这两个方法既可以修改数组也可以修改对象<br>具体代码如下图所示<br><img src="/image/vueanli/04.png"></p>
<p>具体功能实现：<br><strong>第一步添加图书的功能</strong><br>效果图如图所示:<br><img src="/image/vueanli/04.gif"><br>具体现实代码如图所示<br><img src="/image/vueanli/05.png"></p>
<p>案例总结：</p>
<div style="color: red">

<ol>
<li>v-model的双向数据绑定 </li>
<li>v-for数组数据的循环</li>
<li>@click=’handle’点击事件的绑定</li>
<li>注意事项：<code>&lt;a href=&quot;&quot; @click.prevent&gt;</code>修改</a><br>   事件绑定时，可以只添加修饰符，而不绑定事件函数,防止点击 修改 页面刷新</li>
<li>点击提交按钮触发 methods </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">handle: function()&#123;<br>         &#x2F;&#x2F; 添加图书<br>         var book &#x3D; &#123;&#125;;<br>         book.id &#x3D; this.id;  &#x2F;&#x2F;将输入框输入的 ID 给 book对象<br>         book.name &#x3D; this.name; &#x2F;&#x2F;将输入框输入的 name 给 book对象<br>         book.date &#x3D; &#39;&#39;;  &#x2F;&#x2F; 日期暂时设为空<br>         this.books.push(book); &#x2F;&#x2F; 把对象book push 到books数组里面<br>         &#x2F;&#x2F; 添加图书后，然后清空输入框表单<br>         this.id &#x3D; &#39;&#39;;<br>         this.name &#x3D; &#39;&#39;;<br>       &#125;<br></code></pre></td></tr></table></figure>
<p><strong>JavaScript push() 方法</strong></p>
<p>实例<br>数组中添加新元素：<br><code>var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</code><br><code>fruits.push(&quot;Kiwi&quot;)</code><br>fruits 结果输出：<br><code>Banana,Orange,Apple,Mango,Kiwi</code></p>
<p>添加一个以上元素<br><code>var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</code><br><code>fruits.push(&quot;Kiwi&quot;,&quot;Lemon&quot;,&quot;Pineapple&quot;)</code><br>以上实例将输出<br><code>Banana,Orange,Apple,Mango,Kiwi,Lemon,Pineapple</code></p>
</div>
<div style="color: blue">

<p>定义和用法<br>push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。<br>注意： 新元素将添加在数组的末尾。<br>注意： 此方法改变数组的长度。<br>提示： 在数组起始位置添加元素请使用 unshift() 方法。</p>
<p><strong>第二步修改图书的功能</strong><br>效果图如图所示:<br><img src="/image/vueanli/05.gif"><br>具体现实代码如图所示<br><img src="/image/vueanli/06.png"></p>
</div>
案例总结：
<div style="color: red">

<ol>
<li>数组索引的传递  @click.prevent=’toEdit(item.id)</li>
<li>filter的使用</li>
<li>some的使用</li>
<li>flag配置disable禁用按钮的使用</li>
<li>箭头函数的this指向问题</div>
<div style="color: blue">
filter() 方法创建一个新副本，其包含通过所提供的功能实现的测试的所有元素。

</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const words &#x3D; [&#39;spray&#39;, &#39;limit&#39;, &#39;elite&#39;, &#39;exuberant&#39;, &#39;destruction&#39;, &#39;present&#39;];<br><br>const result &#x3D; words.filter(word &#x3D;&gt; word.length &gt; 6);<br><br>console.log(result);<br>&#x2F;&#x2F; expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]<br></code></pre></td></tr></table></figure>
<p>语法</p>
<blockquote>
<p>var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])</p>
</blockquote>
<p>参数<br>callback<br><code>返回true表示该元素通过测试，保留该元素，false则不保留。</code>它接受以下三个参数：<br>element<br>斑点中当前正在处理的元素。<br>index任选<br>正在处理的元素在细分中的索引。<br>array任选<br>称为了filter的本身。<br>thisArg任选<br>执行callback时，用于this的值。</p>
<p>返回值<br>一个新的，由通过测试的元素组成的副本，如果没有任何细分元素通过测试，则返回空数组。<br><a  style="color: red" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#返回值" target="_blank" rel="noopener">官方细解filter() 方法</a></p>
<p>Array.prototype.some（）</p>
<p>some() 方法测试枚中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个布尔类型的值</p>
<blockquote>
<p>注意：如果用一个空副本进行测试，在任何情况下它返回的都是false。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const array &#x3D; [1, 2, 3, 4, 5];<br><br>&#x2F;&#x2F; checks whether an element is even<br>const even &#x3D; (element) &#x3D;&gt; element % 2 &#x3D;&#x3D;&#x3D; 0;<br><br>console.log(array.some(even));<br>&#x2F;&#x2F; expected output: true<br></code></pre></td></tr></table></figure>

<p>语法</p>
<blockquote>
<p>arr.some(callback(element[, index[, array]])[, thisArg])</p>
</blockquote>
<p>参数<br>callback<br>用来测试每​​个元素的函数，接受三个参数：<br>element<br>斑点中正在处理的元素。<br>index 任选<br>斑点中正在处理的元素的索引值。<br>array任选<br>some()被调用的副本。<br>thisArg任选<br>执行callback时使用的 this 值。</p>
<p>返回值<br>斑点中有至少一个元素通过替代函数的测试就会返回true；所有元素都没有通过串行函数的测试返回值才会为false</p>
<p><a  style="color: red" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">官方细解some() 方法</a></p>
<p><strong>第三步删除图书的功能</strong><br>效果图如图所示:<br><img src="/image/vueanli/06.gif"><br>具体现实代码如图所示<br><img src="/image/vueanli/07.png"></p>
</div>
案例总结：
<div style="color: red">

<ol>
<li>findIndex（）方法的调用和splice结合进行删除数组。</li>
<li>filter() 方法的如果是true返回保留该元素。</li>
</ol>
</div>
<div style="color: blue">
Array.prototype.findIndex（）
该findIndex()方法返回满足提供的测试功能的数组中<b>第一个元素的索引</b>。否则，返回，表明没有元素通过测试。-1

<p><code>const array1 = [5, 12, 8, 130, 44];</code><br><code>const isLargeNumber = (element) =&gt; element &gt; 13;</code><br><code>console.log(array1.findIndex(isLargeNumber));</code><br><code>// expected output: 3</code></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex" target="_blank" rel="noopener">官方细解findIndex() 方法</a></p>
<p>Array.prototype.find（）<br>该find()方法返回提供的数组中满足提供的测试功能的<b>第一个元素的值</b>。如果没有值满足测试功能，undefined则返回。</p>
<p><code>const array1 = [5, 12, 8, 130, 44];</code><br><code>const found = array1.find(element =&gt; element &gt; 10);</code><br><code>console.log(found);</code><br><code>// expected output: 12</code></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find" target="_blank" rel="noopener">官方细解find() 方法</a></p>
<p>Array.prototype.splice（）<br>该splice()方法通过删除或替换现有元素和/或在适当位置添加新元素来更改数组的内容。</p>
<p><code>const months = [&#39;Jan&#39;, &#39;March&#39;, &#39;April&#39;, &#39;June&#39;];</code><br><code>months.splice(1, 0, &#39;Feb&#39;);</code><br><code>// inserts at index 1</code><br><code>console.log(months);</code><br><code>// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</code></p>
<p><code>months.splice(4, 1, &#39;May&#39;);</code><br><code>// replaces 1 element at index 4</code><br><code>console.log(months);</code><br><code>// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</code></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">官方细解splice() 方法</a></p>
</div>    

<p><strong>第四步计算图书数目，验证书名，时间过滤，自定义指令（焦点）的功能</strong><br>效果图如图所示:<br><img src="/image/vueanli/07.gif"><br>具体现实代码如图所示<br><img src="/image/vueanli/08.png"></p>
<p>案例总结：</p>
<div style="color: red">

<ol>
<li>计算组件的computed使用<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;div class&#x3D;&quot;total&quot;&gt;<br>      &lt;span&gt;图书总数：&lt;&#x2F;span&gt;<br>      &lt;span&gt;&#123;&#123;total&#125;&#125;&lt;&#x2F;span&gt;<br>    &lt;&#x2F;div&gt;<br><br>    computed: &#123;<br>      total: function()&#123;<br>        &#x2F;&#x2F; 计算图书的总数<br>        return this.books.length; &#x2F;&#x2F; 计算数组的长度<br>      &#125;<br>    &#125;,<br></code></pre></td></tr></table></figure></li>
<li>过滤器是使用的一个封装的现成的方法。</li>
<li>监听器的使用</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;label for&#x3D;&quot;name&quot;&gt;<br>              名称：<br>            &lt;&#x2F;label&gt;<br>            &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;name&quot; v-model&#x3D;&#39;name&#39;&gt;<br>            &lt;button @click&#x3D;&#39;handle&#39; :disabled&#x3D;&quot;submitFlag&quot;&gt;提交&lt;&#x2F;button&gt;<br><br><br><br>      var vm &#x3D; new Vue(&#123;<br>      el: &#39;#app&#39;,<br>      data: &#123;<br>        flag: false,<br>        submitFlag: false,<br>        id: &#39;&#39;,<br>        name: &#39;&#39;,<br>        books: []<br>      &#125;,<br>      watch: &#123;<br>      	&#x2F;&#x2F;name 对应 data: &#123; name: &#39;&#39; &#125;; v-model&#x3D;&#39;name&#39; &#x3D;&#x3D; val  <br>         name: function(val) &#123;    <br>          &#x2F;&#x2F; 验证图书名称是否已经存在<br>          var flag &#x3D; this.books.some(function(item)&#123;<br>            return item.name &#x3D;&#x3D; val;<br>          &#125;);<br>          if(flag) &#123;<br>            &#x2F;&#x2F; 图书名称存在<br>            this.submitFlag &#x3D; true;<br>          &#125;else&#123;<br>            &#x2F;&#x2F; 图书名称不存在<br>            this.submitFlag &#x3D; false;<br>          &#125;<br>        &#125;<br>      &#125;,<br></code></pre></td></tr></table></figure>
</div>
</div>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>



</div>]]></content>
  </entry>
  <entry>
    <title>ES6模块化</title>
    <url>/2020/ckpf35kk3000rjov42qqk9hxv/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>第三方模块nrm(第三方模块下载器的选择)</title>
    <url>/2020/ckpf35ksl009ijov43fj56afj/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">第三方模块nrm</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
nrm用来选择第三方模块的下载路径。优先选择淘宝的模块。
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<img src="/image/nrm/01.png">
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<img src="/image/nrm/02.png">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<img src="/image/nrm/03.png">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>



</div>]]></content>
  </entry>
  <entry>
    <title>jsonp的请求原理</title>
    <url>/2020/ckpf35kqh007ajov495j42ait/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1500960775,766444135&fm=11&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">jsonp跨域原理解析</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
jsonp跨域原理解析细解
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>背景：</strong><br>由于浏览器同源策略的限制，非同源下的请求，都会产生跨域问题，jsonp即是为了解决这个问题出现的一种简便解决方案。</p>
<ul>
<li><p>同源策略即：同一协议，同一域名，同一端口号。当其中一个不满足时，我们的请求即会发生跨域问题。</p>
</li>
<li><p>同源政策的目的</p>
</li>
<li><p>同源政策是为了保证用户信息的安全，防止恶意的网站窃取数据。最初的同源政策是指 A</p>
</li>
<li><p>网站在客户端设置的 Cookie，B网站是不能访问的。</p>
</li>
</ul>
<p>举个简单的例子：</p>
<p><code>1.http://www.abc.com:3000到https://www.abc.com:3000的请求会出现跨域（域名、端口相同但协议不同）</code><br><code>2.http://www.abc.com:3000到http://www.abc.com:3001的请求会出现跨域（域名、协议相同但端口不同）</code><br><code>3.http://www.abc.com:3000到http://www.def.com:3000的请求会出现跨域（域名不同）</code><br><br><br><br><br><br><br><br></p>
<ul>
<li>突破同源策略限制：<br>现在知道了同源策略，那我们就来看下jsonp是如何突破同源策略的限制实现跨域的</li>
</ul>
<p>首先，不知道大家有没有注意，不管是我们的script标签的src还是img标签的src，或者说link标签的href他们没有被同源策略所限制，比如我们有可能使用一个网络上的图片，就可以请求得到。<br>我们拿到的图片是其他服务器给我们提供的，不是我们自己服务器里面的数据</p>
<p><code>&lt;img src=&quot;https://ss3.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/image/h%3D300/sign=6d0bf83bd215d9.jpg&quot;&gt;</code></p>
<p>src或href链接的静态资源，本质上来说也是一个get请求，拿csdn上的静态资源举例：<br><img src="/image/jsonp/01.png"></p>
<p>可以看到，确实是个get请求无疑。同理img标签的src和link标签的href也会发送一个get请求去请求静态资源。那么我们通过这点，是不是发现了点什么，这些标签的src和link属性，并没有受同源策略的限制。说到这里jsonp的实现原理就浮出水面了。</p>
<br>
<br>
<br>
<br>

<p><strong>jsonp就是使用同源策略这一“漏洞”，实现的跨域请求（<code>这也是jsonp跨域只能用get请求的原因所在</code>）。想象一下，既然是个get请求，那么服务端一定可以接收到，并做出反馈。ok，知道这两点之后，我们开始具体使用jsonp进行跨域请求。</strong></p>
<br>
<br>
<br>

<p><strong>JSONP跨域实现：</strong><br>根据上边所说的，我们要用过利用img、srcipt，link标签的src或href属性（到底使用那个标签无所谓）来实现，那么我们如何做呢，我们来看一段简单的代码，为了方便，我这里使用jQuery：</p>
<p><code>$(&#39;#btn&#39;).click(function(){</code><br>            <code>var frame = document.createElement(&#39;script&#39;);</code><br>            <code>frame.src = &#39;http://localhost:3000/article-list?name=leo&amp;age=30&amp;callback=func&#39;;</code><br>            <code>$(&#39;body&#39;).append(frame);</code><br>        <code>});</code></p>
<p>可以看到，让我们点击按钮的时候，创建了一个script标签(即会发送一个get请求到src指向的地址)，src地址是”localhost:3000/article-list”,这个src地址，就是我们请求的服务端接口。注意，这里我们有是那个参数，name,age和callback，name和age不说了，这跟我们平时普通的get请求参数无异。主要说下callback这个参数，callback参数就是核心所在。<code>为什么要定义callback呢？</code>首先我们知道，<code>这个get请求已经被发出去了，那么我们如何接口请求回来的数据呢，callback=func则可以帮我们做这件事。</code>我们继续看下边的代码 </p>
<p><code>&lt;button id=&quot;btn&quot;&gt;点击&lt;/button&gt;</code><br>  <code>&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;</code><br>  <code>&lt;script&gt;</code><br>    <code>$(&#39;#btn&#39;).click(function(){</code><br>            <code>var frame = document.createElement(&#39;script&#39;);</code><br>            <code>frame.src = &#39;http://localhost:3000/article-list?name=leo&amp;age=30&amp;callback=func&#39;;</code><br>            <code>$(&#39;body&#39;).append(frame);</code><br>        <code>});</code><br>        <code>function func(res){</code><br>            <code>alert(res.message+res.name+&#39;你已经&#39;+res.age+&#39;岁了&#39;);</code><br>        <code>}</code></p>
<p>这里可以看到，我们声明了一个func函数，但没有执行，你可以想一下，如果服务端接口到get请求，返回的是func({message:’hello’})，这样的话在服务端不就可以把数据通过函数执行传参的方式实现数据传递了吗。</p>
<p>服务端代码实现：<br>接下来，我们看服务端应该如何实现：<br><code>router.get(&#39;/article-list&#39;, (req, res) =&gt; {</code><br> <code>console.log(req.query, &#39;123&#39;);</code><br>  <code>let data = {</code><br>  <code>message: &#39;success!&#39;,</code><br>  <code>name: req.query.name,</code><br>   <code>age: req.query.age</code><br> <code>}</code><br> <code>data = JSON.stringify(data)</code><br> <code>res.end(&#39;func(&#39; + data + &#39;)&#39;);</code><br><code>});</code></p>
<p>ok，接下来当我们点击提交的时候，就获取到了服务端反回的数据。如下：</p>
<img src="/image/jsonp/02.png">


<p>这样下来，就完成了实现jsonp的跨域</p>
<p><strong>总结：</strong><br>需要注意的是，callback参数定义的方法是需要前后端定义好的，具体什么名字，商讨好就可以了。其实jsonp的整个过程就类似于前端声明好一个函数，后端返回执行函数。执行函数参数中携带所需的数据<br>  </script></p>
<hr>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>callback参数定义的方法也是可以不需要前后端定义好的，只需要前端自己定义就好了。</strong><br>客户端代码<br><img src="/image/Ajax/74.png"></p>
<p>服务端代码实现：<br>接下来，我们看服务端应该如何实现：<br><img src="/image/Ajax/75.png"></p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>



</div>]]></content>
  </entry>
  <entry>
    <title> retun-ture和return-false的区别 </title>
    <url>/2020/ckpf35kqk007gjov4glvkggz5/</url>
    <content><![CDATA[<p><strong>retrun true； 返回正确的处理结果。把控制权返回给页面，页面默认事件继续执行。</strong><br><code>&lt;a href=&quot;http://www.baidu.com&quot; onclick=&quot;alert(11);return true;alert(22)&quot;&gt;链接&lt;/a&gt;</code><br>会执行alert（11）;再执行百度页面跳转</p>
<p><strong>return false;在大多数情况下,为事件处理函数返回false,可以防止默认的事件行为<br>相当于终止符，干了3件事，阻止默认行为，取消事件冒泡，以及停止回调执行立即返回；</strong><br><code>&lt;a href=&quot;http://www.baidu.com&quot; onclick=&quot;alert(11);return false;alert(22)&quot;&gt;链接&lt;/a&gt;</code><br>仅执行alert（11）后续命令不再执行；</p>
<p><strong>return：停止回调执行立即返回；</strong></p>
<p><strong>在阻止表单默认提交的时候，使用return false</strong><br><code>&lt;form action=&quot;http://www.baidu.com&quot; method=&quot;post&quot; onsubmit=&quot;return submitTest();&quot;&gt;</code><br>       <code>&lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;</code><br>    <code>&lt;/form&gt;</code><br>   <code>&lt;script type=&quot;text/javascript&quot;&gt;</code><br>      <code>function submitTest() {</code><br>           <code>alert(0)</code><br>            <code>return false;</code><br>       <code>}</code><br>   <code>&lt;/script&gt;</code></p>
<p>点击提交按钮，会弹出 0 ，不会刷新页面。（使用submit提交时会刷新页面的）</p>
<p><strong>return false和return true在一定使用上是类似的用法，但是return false有阻止默认行为的作用</strong></p>
<img src="/image/return/01.png">

<p><strong>这个代码里面使用return true和return false 结果都是打印 ‘1111’,跳出了函数，直接执行函数外面的打印内容。</strong></p>
]]></content>
  </entry>
  <entry>
    <title>ES6模块化和webpack打包</title>
    <url>/2020/ckpf35kjo000jjov4a3op7dft/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">ES6模块化和webpack打包</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
ES6模块化和webpack打包
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center"><h2>ES6模块化</h2></div> 
<strong> ES6 模块化的基本语法</strong>
1. 默认导出 与 默认导入

<ul>
<li>默认导出语法 export default 默认导出的成员</li>
<li>默认导入语法 import 接收名称 from ‘模块标识符’</li>
</ul>
<div style="background-color: skyblue ; color: black">
// 导出模块成员
// 当前文件模块为 m1.js  <br>
// 定义私有成员 a 和 c   <br>
let a = 10  <br>
let c = 20  <br>
// 外界访问不到变量 d ,因为它没有被暴露出去<br>
let d = 30<br>
function show() {}<br>
// 将本模块中的私有成员暴露出去，供其它模块使用<br>
export default {<br>
 a,<br>
 c,<br>
 show<br>
}<br>


</div>

<div style="background-color: skyblue; color: black">

<p> // 导入模块成员<br> import m1 from ‘./m1.js’<br> console.log(m1)<br> // 打印输出的结果为：<br> // { a: 10, c: 20, show: [Function: show] }</p>
</div>
<div style="color: orange">
注意：每个模块中，只允许使用唯一的一次 export default，否则会报错！
</div>

<hr>
<ol start="2">
<li>按需导出 与 按需导入</li>
</ol>
<ul>
<li>按需导出语法 export let s1 = 10</li>
<li>按需导入语法 import { s1 } from ‘模块标识符’</li>
</ul>
<div style="background-color: skyblue; color: black">

<p>// 当前文件模块为 m1.js<br>// 向外按需导出变量 s1<br>export let s1 = ‘aaa’<br>// 向外按需导出变量 s2<br>export let s2 = ‘ccc’<br>// 向外按需导出方法 say<br>export function say = function() {}</p>
</div>

<div style="background-color: skyblue; color: black">

<p>// 导入模块成员<br> import { s1, s2 as ss2, say } from ‘./m1.js’<br> console.log(s1) // 打印输出 aaa<br> console.log(ss2) // 打印输出 ccc<br> console.log(say) // 打印输出 [Function: say]</p>
</div>


<div style="color: orange">
注意：每个模块中，可以使用多次按需导出
</div>

<hr>
<img src="/image/ES6/01.png">
<img src="/image/ES6/02.png" >

<hr>
<ol start="3">
<li>直接导入并执行模块代码</li>
</ol>
<p>有时候，我们<code>只想单纯执行某个模块中的代码，并不需要得到模块中向外暴露的成员</code>，此时，可以直接导入并执行模块代码。</p>
<div style="background-color: skyblue ; color: black">

<p>// 当前文件模块为 m2.js<br>// 在当前模块中执行一个 for 循环操作<br>for(let i = 0; i &lt; 3; i++) {<br> console.log(i)<br>}</p>
</div>

<div style="background-color: skyblue; color: black">

<p>// 直接导入并执行模块代码<br> import ‘./m2.js’</p>
<p>//控制台输出 0 1 2 </p>
</div>

<hr>
<div style="text-align: center"><h2>webpack</h2></div>

<p><strong>当前 Web 开发面临的困境</strong></p>
<ul>
<li>文件依赖关系错综复杂</li>
<li>静态资源请求效率低</li>
<li>模块化支持不友好</li>
<li>浏览器对高级 Javascript 特性兼容程度较低</li>
<li>etc…</li>
</ul>
<p><code>webpack</code> 是一个流行的<code>前端项目构建工具（打包工具</code>），可以解决当前 web 开发中所面临的困境。<br>webpack 提供了<code>友好的模块化支持</code>，以及<code>代码压缩混淆、处理 js 兼容问题、性能优化</code>等强大的功能，从而让程序员把<br>工作的重心放到具体的功能实现上，提高了开发效率和项目的可维护性。</p>
<p>目前绝大多数企业中的前端项目，都是基于 webpack 进行打包构建的。<br><img src="/image/webpack/01.png"></p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>



</div>
]]></content>
  </entry>
  <entry>
    <title>CSS前端面试题讲解</title>
    <url>/2020/ckpf35kjh000bjov4f43cgzfn/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">CSS前端面试题讲解</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
加强CSS基础
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>CSS绘制三角形<br><img src="/image/cssProgress/01.png"></p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

</div>
]]></content>
  </entry>
  <entry>
    <title>vue前后端交互</title>
    <url>/2020/ckpf35kql007jjov42vj01y27/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3647099666,2758135680&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">VUE常用特性学习记录</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
这里不写笔记，只写VUE有哪些知识点
<br>
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>前后端交互概述与URL地址格式</strong><br>前后端交互<br>url地址格式</p>
<hr>
<p><strong>接口调用的方式</strong></p>
<h6>1.原生ajax</h6>
<h6>2.基于jQuery的ajax</h6>
<h6>3.Fetch</h6>
<h6>4.Promise</h6>

<hr>
<p><strong>url 地址格式</strong></p>
<h6>1.传统的url</h6> 
<img src="/image/vue/04/01.png">
<img src="/image/vue/04/02.png">

<hr>
<h6>2.Restful形式的url</h6>
<img src="/image/vue/04/03.png">

<hr>
<p><strong>异步编程问题与Promise概述</strong><br>异步<br>promise</p>
<p><strong>jS中常见的异步调用</strong><br>定时任何 –<br>ajax<br>事件函数</p>
<img src="/image/vue/04/04.png">


<p><strong>Promise解决了什么问题</strong><br>主要解决异步深层嵌套<br>语法更加简洁</p>
<hr>
<p><strong>Promise基本用法</strong><br><img src="/image/vue/04/05.png"><br><img src="/image/vue/04/06.png"></p>
<hr>
<p><strong>Promise发送Ajax请求并处理回调地狱问题</strong><br><img src="/image/vue/04/07.png"><br><strong>Promise发送多次Ajax请求并处理回调地狱问题</strong><br><img src="/image/vue/04/08.png"><br><img src="/image/vue/04/09.png"></p>
<hr>
<p><strong>Promise的then方法参数中的函数的返回值</strong><br>1.返回Promise实例对象</p>
<p>  返回的该实例对象会调用下一个then</p>
<p>2.返回普通值</p>
<p>  返回的普通值会直接传递给下一个then，通过then参数中函数的参数接收该值</p>
<img src="/image/vue/04/10.png">

<hr>
<p><strong>Promise常用的API(实例对象)</strong><br>.then()<br>得到异步任务正确的结果<br>.catch()<br>获取异常信息<br>.finally()<br>成功与否都会执行（不是正式标准）</p>
<img src="/image/vue/04/11.png">

<hr>
<p><strong>Promise常用的API(对象方法)</strong><br>.all()<br>Promise.all 方法接受一个数组作参数，数组中的对象（p1、p2、p3）均为promise实例（如果不是一个<br>promise，该项会被用 Promise.resolve 转换为一个promise)。它的状态由这三个promise实例决定</p>
<p>.race()<br>Promise.race 方法同样接受一个数组作参数。当p1, p2, p3中有一个实例的状态发生改变（变为 fulfilled<br>或 rejected ），p的状态就跟着改变。并把第一个改变状态的promise的返回值，传给p的回调函数</p>
<img src="/image/vue/04/12.png">

<hr>
<p><strong>FetchAPI概述与基本使用</strong><br>fetch<br>Fetch API是新的ajax解决方案 Fetch会返回Promise<br>fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。<br><img src="/image/vue/04/13.png"></p>
<hr>
<p><strong>fetch请求参数</strong><br><strong>1.常用配置选项</strong></p>
<ul>
<li>method（String）:HTTP请求方法，默认GET（GET、POST、PUT、DELETE）</li>
<li>body（String）:HTTP请求方法</li>
<li>headers（Object）:HTTP请求头，默认为{}<img src="/image/vue/04/14.png">

</li>
</ul>
<p><strong>2.GET请求方式的参数传递</strong><br><img src="/image/vue/04/15.png"><br>服务器路由设置<br><code>app.get(&#39;/books&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;传统的URL传递参数!&#39; + req.query.id)</code><br><code>})</code></p>
<p><code>app.get(&#39;/books/:id&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;Restful形式的URL传递参数!&#39; + req.params.id)</code><br><code>})</code></p>
<p><strong>3.DELETE请求方式的参数传递</strong><br><img src="/image/vue/04/16.png"><br>服务器路由设置<br><code>app.delete(&#39;/books/:id&#39;, (req, res) =&gt; {</code><br> <code>res.send(&#39;DELETE请求传递参数!&#39; + req.params.id)</code><br><code>})</code></p>
<p><strong>4.POST请求方式的参数传递</strong><br><img src="/image/vue/04/17.png"><br><img src="/image/vue/04/18.png"><br>服务器路由设置<br><code>app.post(&#39;/books&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;POST请求传递参数!&#39; + req.body.uname + &#39;---&#39; + req.body.pwd)</code><br><code>})</code></p>
<p><strong>5.PUT请求方式的参数传递</strong><br><img src="/image/vue/04/19.png"><br>服务器路由设置<br><code>app.put(&#39;/books/:id&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;PUT请求传递参数!&#39; + req.params.id + &#39;---&#39; + req.body.uname + &#39;---&#39; + req.body.pwd)</code><br><code>})</code></p>
<img src="/image/vue/04/20.png">

<hr>
<p><strong>响应数据格式</strong></p>
<ul>
<li>text(): 将返回体处理成字符串类型</li>
<li>json(): 返回结果和JSON.parse(responseText)一样<img src="/image/vue/04/21.png">

</li>
</ul>
<img src="/image/vue/04/22.png">

<p>服务器路由设置<br><code>app.get(&#39;/json&#39;, (req, res) =&gt; {</code><br> <code>res.json({</code><br>    <code>uname: &#39;lisi&#39;,</code><br>   <code>age: 13,</code><br>   <code>gender: &#39;male&#39;</code><br> <code>});</code><br><code>})</code></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>axios的基本用法</strong><br><img src="/image/vue/04/23.png"><br><img src="/image/vue/04/24.png"></p>
<p><code>app.get(&#39;/adata&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;Hello axios!&#39;)</code><br><code>})</code></p>
<p><strong>axios的常用API</strong></p>
<ul>
<li>get: 查询数据</li>
<li>post: 添加数据</li>
<li>put: 修改数据</li>
<li>delete: 删除数据</li>
</ul>
<p><strong>1.GET传递参数</strong></p>
<ul>
<li>通过URL传递参数</li>
<li>通过params 选项传递参数<img src="/image/vue/04/25.png">
<img src="/image/vue/04/26.png">

</li>
</ul>
<p>对应的三个服务器端的路由设置<br><code>app.get(&#39;/axios&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;axios get 传递参数&#39; + req.query.id)</code><br><code>})</code></p>
<p><code>app.get(&#39;/axios/:id&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;axios get (Restful) 传递参数&#39; + req.params.id)</code><br><code>})</code></p>
<p><code>app.get(&#39;/axios&#39;, (req, res) =&gt; {</code><br> <code>res.send(&#39;axios get 传递参数&#39; + req.query.id)</code><br><code>})</code></p>
<p><strong>2.DELETE传递参数</strong></p>
<ul>
<li>参数传递方式与GET类似<img src="/image/vue/04/28.png">

</li>
</ul>
<img src="/image/vue/04/27.png">
对应的三个服务器端的路由设置
`app.delete('/axios', (req, res) => {`
  `res.send('axios delete 传递参数' + req.query.id)`
`})`

<p><code>app.delete(&#39;/axios/:id&#39;, (req, res) =&gt; {</code><br> <code>res.send(&#39;axios delete 传递参数&#39; + req.params.id)</code><br><code>})</code></p>
<p><code>app.delete(&#39;/axios&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;axios delete 传递参数&#39; + req.query.id)</code><br><code>})</code></p>
<p><strong>3.POST传递参数</strong></p>
<ul>
<li>通过选项传递参数（默认传递的是json格式的数据） <img src="/image/vue/04/29.png">
<img src="/image/vue/04/30.png">
对应的服务器端的路由设置

</li>
</ul>
<p><code>app.post(&#39;/axios&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;axios post 传递参数&#39; + req.body.uname + &#39;---&#39; + req.body.age)</code><br><code>})</code></p>
<ul>
<li>通过URLSearchParams传递参数（application/x-www-form-urlencoded）<img src="/image/vue/04/31.png">
<img src="/image/vue/04/32.png">
对应的服务器端的路由设置

</li>
</ul>
<p><code>app.post(&#39;/axios&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;axios post 传递参数&#39; + req.body.uname + &#39;---&#39; + req.body.age)</code><br><code>})</code></p>
<p><strong>4.PUT传递参数</strong></p>
<ul>
<li>参数传递方式与POST类似<img src="/image/vue/04/33.png">
<img src="/image/vue/04/34.png">

</li>
</ul>
<p>对应的服务器端的路由设置</p>
<p><code>app.put(&#39;/axios/:id&#39;, (req, res) =&gt; {</code><br> <code>res.send(&#39;axios put 传递参数&#39; + req.params.id + &#39;---&#39; + req.body.uname + &#39;---&#39; + req.body.pwd)</code><br><code>})</code></p>
<hr>
<p><strong>axios的响应结果</strong></p>
<ul>
<li>data：实际响应回来的数据</li>
<li>headers：响应头信息</li>
<li>status：响应状态码</li>
<li>statusText：响应状态信息<img src="/image/vue/04/35.png">

</li>
</ul>
<p>对应的服务器端的路由设置</p>
<p><code>app.get(&#39;/axios-json&#39;, (req, res) =&gt; {</code><br>  <code>res.json({</code><br>   <code>uname: &#39;lisi&#39;,</code><br>   <code>age: 12</code><br> <code>});</code><br><code>})</code></p>
<p><strong>axios的全局配置</strong></p>
<ul>
<li>axios.defaults.timeout = 3000; //超时时间</li>
<li>axios.defaults.baseURL = ‘<a href="http://localhost:3000/app&#39;" target="_blank" rel="noopener">http://localhost:3000/app&#39;</a>; //默认地址</li>
<li>axios.defaults.headers[‘mytoken’] = ‘aqwerqwqw’ //设置请求头<img src="/image/vue/04/36.png">

</li>
</ul>
<p>对应的服务器端的路由设置</p>
<p><code>app.get(&#39;/axios-json&#39;, (req, res) =&gt; {</code><br>  <code>res.json({</code><br>   <code>uname: &#39;lisi&#39;,</code><br>   <code>age: 12</code><br> <code>});</code><br><code>})</code></p>
<hr>
<p><strong>axios请求拦截器</strong><br><img src="/image/vue/04/37.png"></p>
<img src="/image/vue/04/38.png">

<p><strong>axios响应拦截器</strong><br><img src="/image/vue/04/39.png"></p>
<img src="/image/vue/04/40.png">

<ul>
<li>相当于进行下图的代码处理，两个打印的数据都是一样的。<img src="/image/vue/04/41.png">

</li>
</ul>
<hr>
<p><strong>async/await 的基本用法</strong></p>
<ul>
<li>async/await是ES7引入的新语法，可以更加方便的进行异步操作</li>
<li>async关键字用于函数上 (async函数的返回值是Promise实例对象)</li>
<li>await关键字用于async函数当中 (await可以得到异步的结果)</li>
</ul>
<img src="/image/vue/04/42.png">
<img src="/image/vue/04/43.png">


<p><strong>async/await 处理多个异步请求</strong><br><img src="/image/vue/04/44.png"><br><img src="/image/vue/04/45.png"></p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
</div>]]></content>
  </entry>
  <entry>
    <title>vue组件的使用</title>
    <url>/2020/ckpf35kr4007tjov49y018vl0/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3647099666,2758135680&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">VUE学习记录</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
这里不写笔记，只写VUE有哪些知识点
<br>
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>vue组件的基本使用</strong><br>全局组件注册语法</p>
<img src="/image/vue/03/01.png">

<h3>组件用法</h3>
<img src="/image/vue/03/02.png">

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br><br>    &lt;head&gt;<br>        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>        &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>        &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>        &lt;title&gt;Document&lt;&#x2F;title&gt;<br>        &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;&#x2F;head&gt;<br><br>    &lt;body&gt;<br><br>        &lt;div id&#x3D;&quot;app&quot;&gt;<br>            &lt;div&gt;<br>                &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;<br>                &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;<br>                &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;<br>            &lt;&#x2F;div&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;script&gt;<br> Vue.component(&#39;button-counter&#39;,&#123;<br>        data: function()&#123;<br>            return &#123;<br>                count:0<br>            &#125;<br>        &#125;,<br>        template: &#39;&lt;button @click&#x3D;&quot;handle&quot;&gt;点击了&#123;&#123;count&#125;&#125;次&lt;&#x2F;button&gt;&#39;,<br>        methods: &#123;<br>            handle: function()&#123;<br>                this.count+&#x3D;2;<br>            &#125;<br>        &#125;<br>    &#125;)<br><br>        var vm&#x3D;new Vue(&#123;<br>           el:&#39;#app&#39;,<br>           data:&#123;&#125;,<br>           methods:&#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>    &lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<p><strong>组件注册注意事项</strong></p>
<ol>
<li>data必须是一个函数<br>分析函数与普通对象的对比</li>
<li>组件模板内容必须是单个跟元素<br>分析演示实际的效果</li>
<li>组件模板内容可以是模板字符串<br>模板字符串需要浏览器提供支持（ES6语法）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>    &lt;head&gt;<br>        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>        &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>        &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>        &lt;title&gt;Document&lt;&#x2F;title&gt;<br>        &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;&#x2F;head&gt;<br>    &lt;body&gt;<br>        &lt;div id&#x3D;&quot;app&quot;&gt;<br>            &lt;div&gt;<br>                &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;<br>                &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;<br>                &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;<br>            &lt;&#x2F;div&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;script&gt;<br> Vue.component(&#39;button-counter&#39;,&#123;<br>        data: function()&#123;<br>            return &#123;<br>                count:0<br>            &#125;<br>        &#125;,<br>        template: <br>        &#96;&lt;div&gt; <br>       &lt;button @click&#x3D;&quot;handle&quot;&gt;点击了&#123;&#123;count&#125;&#125;次&lt;&#x2F;button&gt;<br>       &lt;button&gt;测试&lt;&#x2F;button&gt;<br>       &lt;&#x2F;div&gt;&#96;,<br>        methods: &#123;<br>            handle: function()&#123;<br>                this.count+&#x3D;2;<br>            &#125;<br>        &#125;<br>    &#125;)<br>        var vm&#x3D;new Vue(&#123;<br>           el:&#39;#app&#39;,<br>           data:&#123;&#125;,<br>           methods:&#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>    &lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<p><strong>组件命名方式</strong><br> 短横线方式<br><code>Vue.component(&#39;my-component&#39;, { /* ... */ })</code><br> 驼峰方式<br><code>Vue.component(&#39;MyComponent&#39;, { /* ... */ })</code></p>
<p> 组件注册注意事项<br>如果使用驼峰式命名组件，那么在使用组件的时候，只能在<code>字符串模板</code>中用驼峰的方式使用组件，但是<br>在普通的标签模板中，必须使用短横线的方式使用组件(首字母小写)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>    &lt;head&gt;<br>        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>        &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>        &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>        &lt;title&gt;Document&lt;&#x2F;title&gt;<br>        &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;&#x2F;head&gt;<br>    &lt;body&gt;<br>        &lt;div id&#x3D;&quot;app&quot;&gt;<br>            &lt;div&gt;<br>                &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;<br>                &lt;hello-word&gt;&lt;&#x2F;hello-word&gt;<br>            &lt;&#x2F;div&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;script&gt;<br>  Vue.component(&#39;HelloWord&#39;,&#123;<br>                data: function()&#123;<br>                    return &#123;<br>                        msg:&#39;hello word&#39;<br>                    &#125;<br>                &#125;,<br>                template:&#39;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;div&gt;&#39;<br>            &#125;)<br><br> Vue.component(&#39;button-counter&#39;,&#123;<br>        data: function()&#123;<br>            return &#123;<br>                count:0<br>            &#125;<br>        &#125;,<br>        template: <br>        &#96;&lt;div&gt; <br>       &lt;button @click&#x3D;&quot;handle&quot;&gt;点击了&#123;&#123;count&#125;&#125;次&lt;&#x2F;button&gt;<br>       &lt;button&gt;测试&lt;&#x2F;button&gt;<br>       &lt;HelloWord&gt;&lt;&#x2F;HelloWord&gt;<br>       &lt;&#x2F;div&gt;&#96;,<br>        methods: &#123;<br>            handle: function()&#123;<br>                this.count+&#x3D;2;<br>            &#125;<br>        &#125;<br>    &#125;)<br>        var vm&#x3D;new Vue(&#123;<br>           el:&#39;#app&#39;,<br>           data:&#123;&#125;,<br>           methods:&#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>    &lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>局部组件注册</strong></p>
<p><code>var ComponentA = { /* ... */ }</code><br><code>var ComponentB = { /* ... */ }</code><br><code>ar ComponentC = { /* ... */ }</code><br><code>new Vue({</code><br><code>el: &#39;#app&#39;</code><br><code>components: {</code><br><code>&#39;component-a&#39;: ComponentA,</code><br><code>&#39;component-b&#39;: ComponentB,</code><br><code>&#39;component-c&#39;: ComponentC,</code><br><code>}</code><br><code>})</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;hello-word&gt;&lt;&#x2F;hello-word&gt;<br>        &lt;test-com&gt;&lt;&#x2F;test-com&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        &#x2F;&#x2F; 局部组件注册<br>        &#x2F;&#x2F; 局部组件只能在注册它的父组件中使用<br>        Vue.component(&#39;test-com&#39;, &#123;<br>            template: &#39;&lt;div&gt;测试&lt;hello-word&gt;&lt;&#x2F;hello-word&gt;&lt;&#x2F;div&gt;&#39;<br>        &#125;)<br>        var HelloWord &#x3D; &#123;<br>            data: function () &#123;<br>                return &#123;<br>                    msg: &#39;你好啊&#39;<br>                &#125;<br>            &#125;,<br>            template: &#39;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;&#39;<br>        &#125;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;&#125;,<br>            methods: &#123;&#125;,<br>            components: &#123;<br>                &#39;hello-word&#39;: HelloWord<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>父组件向子组件传值</strong><br><img src="/image/vue/03/03.png"><br><img src="/image/vue/03/04.png"></p>
<hr>
<p><strong>props属性名规则</strong><br>在props中使用驼峰形式，模板中需要使用短横线的形式<br> 字符串形式的模板中没有这个限制<br><img src="/image/vue/03/05.png"><br><img src="/image/vue/03/06.png"></p>
<hr>
<p><strong>props属性值类型</strong><br>字符串 String<br>⚫ 数值 Number<br>⚫ 布尔值 Boolean<br>⚫ 数组 Array<br>⚫ 对象 Object<br><img src="/image/vue/03/07.png"></p>
<p><strong>props是单项数据流，只能父组件传值给子组件</strong></p>
<hr>
<p><strong>子组件向父组件传值</strong><br><img src="/image/vue/03/08.png"><br><img src="/image/vue/03/09.png"></p>
<p><strong>子组件向父组件传具体的值</strong><br><img src="/image/vue/03/10.png"><br><img src="/image/vue/03/11.png"></p>
<hr>
<p><strong>非父子组件间传值</strong><br><img src="/image/vue/03/12.png"><br><img src="/image/vue/03/13.png"></p>
<hr>
<p><strong> 组件插槽的作用:父组件向子组件传递内容</strong><br><img src="/image/vue/03/14.png"></p>
<p><strong>组件插槽基本用法</strong></p>
<img src="/image/vue/03/15.png">
<img src="/image/vue/03/16.png">

<hr>
<p><strong>具名插槽的用法</strong><br><img src="/image/vue/03/17.png"><br><img src="/image/vue/03/18.png"></p>
<hr>
<p><strong>作用域插槽使用方法</strong><br><img src="/image/vue/03/19.png"><br><img src="/image/vue/03/20.png"></p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

</div>]]></content>
  </entry>
  <entry>
    <title>VUE常用特性学习记录</title>
    <url>/2020/ckpf35knq004hjov4fug884t3/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3647099666,2758135680&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">VUE常用特性学习记录</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
这里不写笔记，只写VUE有哪些知识点
<br>
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>表单操作 (input type=”radio”, type=”text” ,type=”checkbox”, select ,textarea)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>  &lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot; &#x2F;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;<br>      form div &#123;<br>        height: 40px;<br>        line-height: 40px;<br>      &#125;<br>      form div:nth-child(4) &#123;<br>        height: auto;<br>      &#125;<br>      form div span:first-child &#123;<br>        display: inline-block;<br>        width: 100px;<br>      &#125;<br>    &lt;&#x2F;style&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>  &lt;&#x2F;head&gt;<br>  &lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>      &lt;form action&#x3D;&quot;http:&#x2F;&#x2F;itcast.cn&quot;&gt;<br>        &lt;div&gt;<br>          &lt;span&gt;姓名：&lt;&#x2F;span&gt;<br>          &lt;span&gt;<br>            &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;uname&quot; &#x2F;&gt;<br>          &lt;&#x2F;span&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;div&gt;<br>          &lt;span&gt;性别：&lt;&#x2F;span&gt;<br>          &lt;span&gt;<br>            &lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;male&quot; value&#x3D;&quot;1&quot; v-model&#x3D;&quot;gender&quot; &#x2F;&gt;<br>            &lt;label for&#x3D;&quot;male&quot;&gt;男&lt;&#x2F;label&gt;<br>            &lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;female&quot; value&#x3D;&quot;2&quot; v-model&#x3D;&quot;gender&quot; &#x2F;&gt;<br>            &lt;label for&#x3D;&quot;female&quot;&gt;女&lt;&#x2F;label&gt;<br>          &lt;&#x2F;span&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;div&gt;<br>          &lt;span&gt;爱好：&lt;&#x2F;span&gt;<br>          &lt;input value&#x3D;&quot;1&quot; v-model&#x3D;&quot;hobble&quot; type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;ball&quot; &#x2F;&gt;<br>          &lt;label for&#x3D;&quot;ball&quot;&gt;篮球&lt;&#x2F;label&gt;<br>          &lt;input value&#x3D;&quot;2&quot; v-model&#x3D;&quot;hobble&quot; type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;sing&quot; &#x2F;&gt;<br>          &lt;label for&#x3D;&quot;sing&quot;&gt;唱歌&lt;&#x2F;label&gt;<br>          &lt;input value&#x3D;&quot;3&quot; v-model&#x3D;&quot;hobble&quot; type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;code&quot; &#x2F;&gt;<br>          &lt;label for&#x3D;&quot;code&quot;&gt;写代码&lt;&#x2F;label&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;div&gt;<br>          &lt;span&gt;职业：&lt;&#x2F;span&gt;<br>          &lt;select v-model&#x3D;&quot;action&quot; multiple&#x3D;&quot;true&quot;&gt;<br>            &lt;option value&#x3D;&quot;0&quot;&gt;请选择职业...&lt;&#x2F;option&gt;<br>            &lt;option value&#x3D;&quot;1&quot;&gt;教师&lt;&#x2F;option&gt;<br>            &lt;option value&#x3D;&quot;2&quot;&gt;软件工程师&lt;&#x2F;option&gt;<br>            &lt;option value&#x3D;&quot;3&quot;&gt;律师&lt;&#x2F;option&gt;<br>          &lt;&#x2F;select&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;div&gt;<br>          &lt;span&gt;个人简介：&lt;&#x2F;span&gt;<br>          &lt;textarea v-model&#x3D;&quot;desc&quot;&gt;&lt;&#x2F;textarea&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;div&gt;<br>          &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot; @click.prevent&#x3D;&quot;handle&quot; &#x2F;&gt;<br>        &lt;&#x2F;div&gt;<br>      &lt;&#x2F;form&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>      var vm &#x3D; new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>          uname: &quot;张三&quot;,<br>          gender: 2,<br>          hobble: [&quot;2&quot;, &quot;3&quot;, &quot;1&quot;],<br>          &#x2F;&#x2F;   action: 1,<br>          action: [&quot;2&quot;, &quot;3&quot;],<br>          desc: &quot;nihao&quot;,<br>        &#125;,<br>        methods: &#123;<br>          handle: function () &#123;<br>            console.log(this.action.toString());<br>            console.log(this.desc);<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &lt;&#x2F;script&gt;<br>  &lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>文本域修饰符 .number .trim .lazy</strong><br>.number:把input表单的输入的字符串数字转换为数字类型<br>.trim: 去除input表单里面的开始和结尾的空格<br>.lazy: 将input 事件切换为change 事件。双向绑定事件，改为input输入框失去焦点触发。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div&gt;<br>            &lt;span&gt;&lt;input type&#x3D;&quot;text&quot; v-model.number&#x3D;&quot;num1&quot;&gt;&lt;&#x2F;span&gt;<br>            &lt;span&gt;&lt;input type&#x3D;&quot;text&quot; v-model.trim&#x3D;&quot;info&quot;&gt;&lt;&#x2F;span&gt;<br>            &lt;span&gt;&lt;input type&#x3D;&quot;text&quot; v-model.lazy&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;span&gt;<br>            &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;<br>            &lt;span&gt;<br>                &lt;button @click&#x3D;&quot;handle&quot;&gt;点击&lt;&#x2F;button&gt;<br>            &lt;&#x2F;span&gt;<br>        &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                num1: &#39;&#39;,<br>                info: &#39;&#39;,<br>                msg: &#39;&#39;<br>            &#125;,<br>            methods: &#123;<br>                handle: function () &#123;<br>                    console.log(this.num1 + 12);<br>                    console.log(this.info.length);<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>自定义属性 v-focus</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; v-focus&gt;&lt;&#x2F;div&gt;<br>        &lt;div&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; v-focus&gt;&lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        &#x2F;&#x2F;   注册一个全局自定义指令 &#96;v-focus&#96;<br>        Vue.directive(&#39;focus&#39;, &#123;<br>            &#x2F;&#x2F;当被绑定的元素插入到 DOM 中时……<br>            inserted: function (el) &#123;<br>                &#x2F;&#x2F; 聚焦元素<br>                el.focus()<br>            &#125;<br>        &#125;);<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;&#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<img src="\image\vue\07.png">

<hr>
<p><strong>自定义全局属性 v-color</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; v-color&#x3D;&#39;msg&#39;&gt;&lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        &#x2F;&#x2F;   注册一个全局自定义指令 &#96;v-focus&#96;<br>        Vue.directive(&#39;color&#39;, &#123;<br>            inserted: function (el, binding) &#123;<br>                console.log(binding.value)<br>                el.style.backgroundColor &#x3D; binding.value.color;<br>            &#125;<br>        &#125;);<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                msg: &#123;<br>                    color: &#39;red&#39;<br>                &#125;<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<img src="\image\vue\08.png">


<hr>
<p><strong>自定义局部属性 v-color</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; v-color&#x3D;&#39;msg&#39;&gt;&lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                msg: &#123;<br>                    color: &#39;red&#39;<br>                &#125;<br>            &#125;,<br>            methods: &#123;<br>            &#125;,<br>            &#x2F;&#x2F;   注册一个局部自定义指令 &#96;v-color&#96;<br>            directives: &#123;<br>                color: &#123;<br>                    bind: function (el, binding) &#123;<br>                        console.log(binding.value)<br>                        el.style.backgroundColor &#x3D; binding.value.color;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<img src="\image\vue\09.png">

<hr>
<p><strong>计算属性</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;<br>        &lt;div&gt;&#123;&#123;reverseString&#125;&#125;&lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                msg: &#39;hello&#39;<br>            &#125;,<br>            methods: &#123;&#125;,<br>            computed: &#123;<br>                reverseString: function () &#123;<br>                    return this.msg.split(&#39;&#39;).reverse().join(&#39;&#39;)<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<img src="\image\vue\10.png">

<p><code>computed: {</code><br>                <code>reverseString: function () {</code><br>                   <code>return this.msg.split(&#39;&#39;).reverse().join(&#39;&#39;)</code><br>              <code>}</code></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>computerd 计算属性 和 methods 方法的区别</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;<br>        &lt;div&gt;&#123;&#123;reverseString&#125;&#125;&lt;&#x2F;div&gt;<br>        &lt;div&gt;&#123;&#123;reverseString&#125;&#125;&lt;&#x2F;div&gt;<br>        &lt;div&gt;&#123;&#123;reverseMessage()&#125;&#125;&lt;&#x2F;div&gt;<br>        &lt;div&gt;&#123;&#123;reverseMessage()&#125;&#125;&lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                msg: &#39;hello&#39;<br>            &#125;,<br>            methods: &#123;<br>                reverseMessage: function () &#123;<br>                    console.log(&#39;message&#39;) &#x2F;&#x2F;打印两次message<br>                    return this.msg.split(&#39;&#39;).reverse().join(&#39;&#39;)<br>                &#125;<br>            &#125;,<br>            computed: &#123;<br>                reverseString: function () &#123;<br>                    console.log(&#39;computer&#39;); &#x2F;&#x2F; 打印一次 computer<br>                    return this.msg.split(&#39;&#39;).reverse().join(&#39;&#39;)<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p>从打印结果可以看出 computer 具有缓存功能，再次调用时会直接获取第一次缓存的结果。<br>computer 可以节省一定的性能</p>
<img src="\image\vue\11.png">

<hr>
<p><strong>侦听器的使用和计算属性的使用对比</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div&gt;<br>            &lt;span&gt;名&lt;&#x2F;span&gt;<br>            &lt;span&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; v-model&#x3D;&quot;firstName&quot;&gt;&lt;&#x2F;span&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;div&gt;<br>            &lt;span&gt;姓&lt;&#x2F;span&gt;<br>            &lt;span&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; v-model&#x3D;&quot;lastName&quot;&gt;&lt;&#x2F;span&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;div&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                firstName: &#39;Jim&#39;,<br>                lastName: &#39;Gim&#39;,<br>                &#x2F;&#x2F; fullName: &#39;Jim Gim&#39;<br>            &#125;,<br>            methods: &#123;&#125;,<br>            &#x2F;&#x2F; 计算属性的使用<br>            computed: &#123;<br>                fullName: function () &#123;<br>                    return this.firstName + &#39; &#39; + this.lastName;<br>                &#125;<br><br>            &#125;,<br>            &#x2F;&#x2F; 侦听器的使用<br>            &#x2F;&#x2F; watch: &#123;<br>            &#x2F;&#x2F;     firstName: function (val) &#123;<br>            &#x2F;&#x2F;         this.fullName &#x3D; val + &#39; &#39; + this.lastName;<br>            &#x2F;&#x2F;     &#125;,<br>            &#x2F;&#x2F;     lastName: function (val) &#123;<br>            &#x2F;&#x2F;         this.fullName &#x3D; this.firstName + &#39; &#39; + val;<br>            &#x2F;&#x2F;     &#125;<br><br>            &#x2F;&#x2F; &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<img src="\image\vue\12.png">

<hr>
<p><strong>案例验证用户名是否可以用</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div&gt;<br>            &lt;span&gt;用户名:&lt;&#x2F;span&gt;<br>            &lt;span&gt;<br>                &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; v-model&#x3D;&quot;uname&quot;&gt;<br>            &lt;&#x2F;span&gt;<br>            &lt;span&gt;&#123;&#123;tip&#125;&#125;&lt;&#x2F;span&gt;<br>        &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                uname: &#39;&#39;,<br>                tip: &#39;&#39;<br>            &#125;,<br>            methods: &#123;<br>                checkName: function (uname) &#123;<br>                    var that &#x3D; this;<br>                    setTimeout(function () &#123;<br>                        if (uname &#x3D;&#x3D; &#39;admin&#39;) &#123;<br>                            that.tip &#x3D; &#39;用户名 已存在，请更换&#39;<br>                        &#125; else &#123;<br>                            that.tip &#x3D; &#39;用户名可以使用&#39;<br>                        &#125;<br>                    &#125;, 2000)<br>                &#125;<br>            &#125;,<br>            watch: &#123;<br>                uname: function (val) &#123;<br>                    this.checkName(val);<br>                    this.tip &#x3D; &#39;正在验证....&#39;;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>


<p><strong>过滤器</strong></p>
<ol>
<li>过滤器的作用<br>格式化数据，比如将字符串格式化为首字母大写，将日期格式化为指定的格式等</li>
</ol>
<img src="\image\vue\13.png">
<img src="\image\vue\14.png">
<img src="\image\vue\15.png">


<hr>
<p><strong>带参数的过滤器</strong></p>
<img src="\image\vue\17.png">

<img src="\image\vue\16.png">



<hr>
<p><strong> 生命周期</strong></p>
<ol>
<li>主要阶段</li>
</ol>
<ul>
<li>挂载（初始化相关属性）<br>① beforeCreate<br>② created<br>③ beforeMount<br>④ mounted</li>
<li>更新（元素或组件的变更操作）<br>① beforeUpdate<br>② updated</li>
<li>销毁（销毁相关属性）<br>① beforeDestroy<br>② destroyed</li>
</ul>
<ol start="2">
<li>Vue实例的产生过程</li>
</ol>
<p>① beforeCreate 在实例初始化之后，数据观测和事件配置之前被调用。<br>② created 在实例创建完成后被立即调用。<br>③ beforeMount 在挂载开始之前被调用。<br>④ mounted el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。<br>⑤ beforeUpdate 数据更新时调用，发生在虚拟DOM打补丁之前。<br>⑥ updated 由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。<br>⑦ beforeDestroy 实例销毁之前调用。<br>⑧ destroyed 实例销毁后调用。</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
</div>]]></content>
  </entry>
  <entry>
    <title>JS方法集合</title>
    <url>/2020/ckpf35kl8001rjov480bpdj07/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JS方法集合</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
一点一点学习js方法
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>str.includes</strong>

</div>
查找字符串是否包含 "Runoob":

<p><code>var str = &quot;Hello world, welcome to the Runoob。&quot;;</code><br><code>var n = str.includes(&quot;world&quot;);</code><br>n 输出结果:<br>true</p>
<p>定义和用法<br>includes() 方法用于判断字符串是否包含指定的子字符串。<br>如果找到匹配的字符串则返回 true，否则返回 false。<br>注意： includes() 方法区分大小写。</p>
<h2>语法</h2>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">string.includes(searchvalue, start)<br></code></pre></td></tr></table></figure>


<h2>参数值</h2>

<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">searchvalue</td>
<td align="center">必需，要查找的字符串。</td>
</tr>
<tr>
<td align="center">start</td>
<td align="center">可选，设置从那个位置开始查找，默认为 0。</td>
</tr>
</tbody></table>
<h2>返回值</h2>    

<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Boolean</td>
<td align="center">如果找到匹配的字符串返回 true，否则返回 false。</td>
</tr>
</tbody></table>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<div style="text-align: center; color: red">
    <strong>Object.assign</strong>

</div>

<p>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const target &#x3D; &#123; a: 1, b: 2 &#125;;<br>const source &#x3D; &#123; b: 4, c: 5 &#125;;<br><br>const returnedTarget &#x3D; Object.assign(target, source);<br><br>console.log(target);<br>&#x2F;&#x2F; expected output: Object &#123; a: 1, b: 4, c: 5 &#125;<br><br>console.log(returnedTarget);<br>&#x2F;&#x2F; expected output: Object &#123; a: 1, b: 4, c: 5 &#125;<br></code></pre></td></tr></table></figure>
<p>语法<br>Object.assign(target, …sources)</p>
<p>target<br>目标对象。<br>sources<br>源对象。</p>
<p><strong>示例</strong><br>复制一个对象<br>const obj = { a: 1 };<br>const copy = Object.assign({}, obj);<br>console.log(copy); // { a: 1 }<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">具体说明，浅拷贝与深拷贝</a></p>
<p><a href="https://github.com/ruanyf/es6tutorial/blob/14a4724b859ed0f119b58e91f939ffe6dc040c0d/docs/object-methods.md" target="_blank" rel="noopener">具体说明，浅拷贝与深拷贝</a></p>
<hr>
<div style="text-align: center; color: red">
    <strong>JavaScript split() 方法</strong>

</div>
语法
string.split(separator,limit)



<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">separator</td>
<td align="left">可选。字符串或正则表达式，从该参数指定的地方分割 string Object。</td>
</tr>
<tr>
<td align="left">limit</td>
<td align="left">可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</td>
</tr>
</tbody></table>
<p>实例<br>把一个字符串分割成字符串数组:</p>
<p>var str=”How are you doing today?”;<br>var n=str.split(“ “);<br>n 输出一个数组的值:</p>
<p>How,are,you,doing,today?</p>
<table>
<thead>
<tr>
<th align="left">定义用法</th>
</tr>
</thead>
<tbody><tr>
<td align="left">split() 方法用于把一个字符串分割成字符串数组。</td>
</tr>
<tr>
<td align="left">提示： 如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。</td>
</tr>
<tr>
<td align="left">注意： split() 方法不改变原始字符串。</td>
</tr>
</tbody></table>
<p>实例<br>使用 limit 参数:</p>
<p>var str=”How are you doing today?”;<br>var n=str.split(“ “,3);<br>n 将输出3个数组的值:</p>
<p>How,are,you</p>
<p><strong>str.split(“public”)[1];</strong><br><img src="/image/jsMethod/01.png"><br><img src="/image/jsMethod/02.png"></p>
<p><strong style="color: red">案例: 想要把网易云音乐的 ? 后面的参数拿到</strong><br>如图所示：  <img src="/image/jsMethod/04.png"></p>
<p>实际操作如下<br><img src="/image/jsMethod/05.png"></p>
<img src="/image/jsMethod/06.png">


<hr>
<div style="text-align: center; color: red">
    <strong>JavaScript substring() 方法</strong>
</div>

<p>定义和用法<br>substring() 方法用于提取字符串中介于两个指定下标之间的字符。</p>
<p><code>提示和注释</code><br><code>重要事项：与 slice() 和 substr() 方法不同的是，substring() 不接受负的参数。</code></p>
<p>例子 1<br>在本例中，我们将使用 substring() 从字符串中提取一些字符：</p>
<p>从第三个字符开始截取到最后</p>
<p>(0)H (1)e (2)l (3)lo world  所以是 lo world</p>
<p><code>var str=&quot;Hello world!&quot;</code><br><code>document.write(str.substring(3))</code></p>
<p>输出：</p>
<p>lo world!</p>
<p>在本例中，我们将使用 substring() 从字符串中提取一些字符：<br><code>var str=&quot;Hello world!&quot;</code><br><code>document.write(str.substring(3,7))</code></p>
<p>输出：</p>
<p>lo w</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>Array.map()</strong>

</div>

<p>Array.map()<br><code>map() 方法通过对每个数组元素执行函数来创建新数组。</code></p>
<p>map() 方法不会对没有值的数组元素执行函数。</p>
<p>map() 方法不会更改原始数组。</p>
<p>这个例子将每个数组值乘以2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var numbers1 &#x3D; [45, 4, 9, 16, 25];<br>var numbers2 &#x3D; numbers1.map(myFunction);<br><br>function myFunction(value, index, array) &#123;<br>  return value * 2;<br>&#125;<br></code></pre></td></tr></table></figure>

<div style="text-align: center; color: red">
    <strong>JavaScript join() </strong>

</div>

<p>定义和用法<br>join() 方法用于把数组中的所有元素放入一个字符串。</p>
<p>元素是通过指定的分隔符进行分隔的。</p>
<p>语法<br>arrayObject.join(separator)</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">separator</td>
<td align="left">可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符。</td>
</tr>
</tbody></table>
<p>返回值<br>返回一个字符串。该字符串是通过把 arrayObject 的每个元素转换为字符串，然后把这些字符串连接起来，在两个元素之间插入 separator 字符串而生成的。</p>
<p>在本例中，我们将使用分隔符来分隔数组中的元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;<br><br>var arr &#x3D; new Array(3)<br>arr[0] &#x3D; &quot;George&quot;<br>arr[1] &#x3D; &quot;John&quot;<br>arr[2] &#x3D; &quot;Thomas&quot;<br><br>document.write(arr.join(&quot;.&quot;))<br><br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>
<p>输出：</p>
<p>George.John.Thomas</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
    <strong>Array.map()和JavaScript join() 方法结合使用 </strong>

</div>

<img src="/image/jsMethod/03.png">


</p>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 18px">

<div style="text-align: center; color: red">
    <strong>Array.prototype.filter() </strong>

</div>

<p>filter() 方法创建一个新副本，其包含通过所提供的功能实现的测试的所有元素。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const words &#x3D; [&#39;spray&#39;, &#39;limit&#39;, &#39;elite&#39;, &#39;exuberant&#39;, &#39;destruction&#39;, &#39;present&#39;];<br><br>const result &#x3D; words.filter(word &#x3D;&gt; word.length &gt; 6);<br><br>console.log(result);<br>&#x2F;&#x2F; expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]<br></code></pre></td></tr></table></figure>
<p>语法</p>
<blockquote>
<p>var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])</p>
</blockquote>
<p>参数<br>callback<br><code>返回true表示该元素通过测试，保留该元素，false则不保留。</code>它接受以下三个参数：<br>element<br>斑点中当前正在处理的元素。<br>index任选<br>正在处理的元素在细分中的索引。<br>array任选<br>称为了filter的本身。<br>thisArg任选<br>执行callback时，用于this的值。</p>
<p>返回值<br>一个新的，由通过测试的元素组成的副本，如果没有任何细分元素通过测试，则返回空数组。<br><a  style="color: red" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#返回值" target="_blank" rel="noopener">官方细解filter() 方法</a></p>
</div>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 18px">

<div style="text-align: center; color: red">
    <strong>Array.prototype.indexof() </strong>

</div>

<p>indexOf()方法返回在副本中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p>
<p>语法<br>arr.indexOf(searchElement[, fromIndex])</p>
<p>参数<br>searchElement<br>要查找的元素<br>fromIndex 任选<br>开始查找的位置。如果该索引值大于或等于分段长度，则意味着不会在分段里查找，返回-1。如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个替换，即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找，以此类推。注意：如果参数中提供的索引值是一个负值，并不改变其查找顺序，查找顺序如果替换后的索引值仍小于0，则整个多重都将会被查询。其替换为0。<br>返回值</p>
<p><code>首个被找到的元素在数组中的索引位置; 若没有找到则返回-1</code></p>
<p>使用indexOf<br>以下示例使用indexOf方法确定多个值在数组中的位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var array &#x3D; [2, 5, 9];<br>array.indexOf(2);     &#x2F;&#x2F; 0<br>array.indexOf(7);     &#x2F;&#x2F; -1<br>array.indexOf(9, 2);  &#x2F;&#x2F; 2<br>array.indexOf(2, -1); &#x2F;&#x2F; -1<br>array.indexOf(2, -3); &#x2F;&#x2F; 0<br>&#96;<br></code></pre></td></tr></table></figure>


<p>发现指定元素出现的所有位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var indices &#x3D; [];<br>var array &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;a&#39;, &#39;c&#39;, &#39;a&#39;, &#39;d&#39;];<br>var element &#x3D; &#39;a&#39;;<br>var idx &#x3D; array.indexOf(element);<br>while (idx !&#x3D; -1) &#123;<br>  indices.push(idx);<br>  idx &#x3D; array.indexOf(element, idx + 1);<br>&#125;<br>console.log(indices);<br>&#x2F;&#x2F; [0, 2, 4]<br></code></pre></td></tr></table></figure>



</div>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 18px">

<div style="text-align: center; color: red">
    <strong>Array.prototype.filter()和Array.prototype.indexOf()</strong>

</div>

</div>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 18px">

<div style="text-align: center; color: red">
    <strong>Array.prototype.some() </strong>

</div>

<p>Array.prototype.some（）</p>
<p>some() 方法测试枚中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个布尔类型的值</p>
<blockquote>
<p>注意：如果用一个空副本进行测试，在任何情况下它返回的都是false。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const array &#x3D; [1, 2, 3, 4, 5];<br><br>&#x2F;&#x2F; checks whether an element is even<br>const even &#x3D; (element) &#x3D;&gt; element % 2 &#x3D;&#x3D;&#x3D; 0;<br><br>console.log(array.some(even));<br>&#x2F;&#x2F; expected output: true<br></code></pre></td></tr></table></figure>

<p>语法</p>
<blockquote>
<p>arr.some(callback(element[, index[, array]])[, thisArg])</p>
</blockquote>
<p>参数<br>callback<br>用来测试每​​个元素的函数，接受三个参数：<br>element<br>斑点中正在处理的元素。<br>index 任选<br>斑点中正在处理的元素的索引值。<br>array任选<br>some()被调用的副本。<br>thisArg任选<br>执行callback时使用的 this 值。</p>
<p>返回值<br>斑点中有至少一个元素通过替代函数的测试就会返回true；所有元素都没有通过串行函数的测试返回值才会为false</p>
<p><a  style="color: red" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">官方细解some() 方法</a></p>
</div>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 18px">

<div style="text-align: center; color: red">
    <strong>Array.prototype.splice </strong>

</div>

<p>splice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。<code>此方法会改变原数组</code>。</p>
<p>语法</p>
<blockquote>
<p>array.splice(start[, deleteCount[, item1[, item2[, …]]]])</p>
</blockquote>
<p>参数<br>start​<br>指定修改的开始位置（从0计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从-1计数，这意味着-n是倒数第n个元素并且等价于array.length-n）；如果负数的绝对值大于数组的长度，则表示开始位置为第0位。</p>
<p>deleteCount 可选<br>整数，表示要移除的数组元素的个数。<br>如果 deleteCount 大于 start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）。<br>如果 deleteCount 被省略了，或者它的值大于等于array.length - start(也就是说，如果它大于或者等于start之后的所有元素的数量)，那么start之后数组的所有元素都会被删除。<br>如果 deleteCount 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素。</p>
<p>item1, item2, … 可选<br>要添加进数组的元素,从start 位置开始。如果不指定，则 splice() 将只删除数组元素。<br>返回值<br>由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。</p>
<p>示例<br>从第 2 位开始删除 0 个元素，插入“drum”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var myFish &#x3D; [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;];<br>var removed &#x3D; myFish.splice(2, 0, &quot;drum&quot;);<br><br>&#x2F;&#x2F; 运算后的 myFish: [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]<br>&#x2F;&#x2F; 被删除的元素: [], 没有元素被删除<br></code></pre></td></tr></table></figure>

<p>从第 2 位开始删除 0 个元素，插入“drum” 和 “guitar”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var myFish &#x3D; [&#39;angel&#39;, &#39;clown&#39;, &#39;mandarin&#39;, &#39;sturgeon&#39;];<br>var removed &#x3D; myFish.splice(2, 0, &#39;drum&#39;, &#39;guitar&#39;);<br><br>&#x2F;&#x2F; 运算后的 myFish: [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;guitar&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]<br>&#x2F;&#x2F; 被删除的元素: [], 没有元素被删除<br></code></pre></td></tr></table></figure>

<p>从第 3 位开始删除 1 个元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var myFish &#x3D; [&#39;angel&#39;, &#39;clown&#39;, &#39;drum&#39;, &#39;mandarin&#39;, &#39;sturgeon&#39;];<br>var removed &#x3D; myFish.splice(3, 1);<br><br>&#x2F;&#x2F; 运算后的 myFish: [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;sturgeon&quot;]<br>&#x2F;&#x2F; 被删除的元素: [&quot;mandarin&quot;]<br></code></pre></td></tr></table></figure>

<p>从第 2 位开始删除 1 个元素，插入“trumpet”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var myFish &#x3D; [&#39;angel&#39;, &#39;clown&#39;, &#39;drum&#39;, &#39;sturgeon&#39;];<br>var removed &#x3D; myFish.splice(2, 1, &quot;trumpet&quot;);<br><br>&#x2F;&#x2F; 运算后的 myFish: [&quot;angel&quot;, &quot;clown&quot;, &quot;trumpet&quot;, &quot;sturgeon&quot;]<br>&#x2F;&#x2F; 被删除的元素: [&quot;drum&quot;]<br></code></pre></td></tr></table></figure>

<p>从第 0 位开始删除 2 个元素，插入”parrot”、”anemone”和”blue”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var myFish &#x3D; [&#39;angel&#39;, &#39;clown&#39;, &#39;trumpet&#39;, &#39;sturgeon&#39;];<br>var removed &#x3D; myFish.splice(0, 2, &#39;parrot&#39;, &#39;anemone&#39;, &#39;blue&#39;);<br><br>&#x2F;&#x2F; 运算后的 myFish: [&quot;parrot&quot;, &quot;anemone&quot;, &quot;blue&quot;, &quot;trumpet&quot;, &quot;sturgeon&quot;]<br>&#x2F;&#x2F; 被删除的元素: [&quot;angel&quot;, &quot;clown&quot;]<br></code></pre></td></tr></table></figure>

<p>从第 2 位开始删除 2 个元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var myFish &#x3D; [&#39;parrot&#39;, &#39;anemone&#39;, &#39;blue&#39;, &#39;trumpet&#39;, &#39;sturgeon&#39;];<br>var removed &#x3D; myFish.splice(myFish.length - 3, 2);<br><br>&#x2F;&#x2F; 运算后的 myFish: [&quot;parrot&quot;, &quot;anemone&quot;, &quot;sturgeon&quot;]<br>&#x2F;&#x2F; 被删除的元素: [&quot;blue&quot;, &quot;trumpet&quot;]<br></code></pre></td></tr></table></figure>

<p>从倒数第 2 位开始删除 1 个元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var myFish &#x3D; [&#39;angel&#39;, &#39;clown&#39;, &#39;mandarin&#39;, &#39;sturgeon&#39;];<br>var removed &#x3D; myFish.splice(-2, 1);<br><br>&#x2F;&#x2F; 运算后的 myFish: [&quot;angel&quot;, &quot;clown&quot;, &quot;sturgeon&quot;]<br>&#x2F;&#x2F; 被删除的元素: [&quot;mandarin&quot;]<br></code></pre></td></tr></table></figure>

<p>从第 2 位开始删除所有元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var myFish &#x3D; [&#39;angel&#39;, &#39;clown&#39;, &#39;mandarin&#39;, &#39;sturgeon&#39;];<br>var removed &#x3D; myFish.splice(2);<br><br>&#x2F;&#x2F; 运算后的 myFish: [&quot;angel&quot;, &quot;clown&quot;]<br>&#x2F;&#x2F; 被删除的元素: [&quot;mandarin&quot;, &quot;sturgeon&quot;]<br></code></pre></td></tr></table></figure>
<p><a  style="color: red" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">官方细解splice() 方法</a></p>
</div>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 18px">

<div style="text-align: center; color: red">
    <strong>Array.prototype.slice </strong>

</div>

<p>slice() 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括end）。原始数组不会被改变。</p>
<p>语法</p>
<blockquote>
<p>arr.slice([begin[, end]])</p>
</blockquote>
<p>参数<br>begin 可选<br>提取起始处的索引（从 0 开始），从该索引开始提取原数组元素。<br>如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。<br>如果省略 begin，则 slice 从索引 0 开始。<br>如果 begin 超出原数组的索引范围，则会返回空数组。<br>end 可选<br>提取终止处的索引（从 0 开始），在该索引处结束提取原数组元素。slice 会提取原数组中索引从 begin 到 end 的所有元素（包含 begin，但不包含 end）。<br>slice(1,4) 会提取原数组中从第二个元素开始一直到第四个元素的所有元素 （索引为 1, 2, 3的元素）。<br>如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1) 表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。<br>如果 end 被省略，则 slice 会一直提取到原数组末尾。<br>如果 end 大于数组的长度，slice 也会一直提取到原数组末尾。<br>返回值<br>一个含有被提取元素的新数组。</p>
<p>描述<br><code>slice 不会修改原数组</code>，只会返回一个<code>浅复制</code>了原数组中的元素的一个新数组。原数组的元素会按照下述规则拷贝：</p>
<p>如果该元素是个对象引用 （不是实际的对象），slice 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。<br>对于字符串、数字及布尔值来说（不是 String、Number 或者 Boolean 对象），slice 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组。<br>如果向两个数组任一中添加了新元素，则另一个不会受到影响。</p>
<p>示例<br>返回现有数组的一部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var fruits &#x3D; [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;, &#39;Apple&#39;, &#39;Mango&#39;];<br>var citrus &#x3D; fruits.slice(1, 3);<br><br>&#x2F;&#x2F; fruits contains [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;, &#39;Apple&#39;, &#39;Mango&#39;]<br>&#x2F;&#x2F; citrus contains [&#39;Orange&#39;,&#39;Lemon&#39;]<br></code></pre></td></tr></table></figure>

<p>类数组（Array-like）对象<br>slice 方法可以用来将一个类数组（Array-like）对象/集合转换成一个新数组。你只需将该方法绑定到这个对象上。 一个函数中的  arguments 就是一个类数组对象的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">function list() &#123;<br>  return Array.prototype.slice.call(arguments);<br>&#125;<br><br>var list1 &#x3D; list(1, 2, 3); &#x2F;&#x2F; [1, 2, 3]<br></code></pre></td></tr></table></figure>

<p><a  style="color: red" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">官方细解slice() 方法</a></p>
</div>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 18px">

<div style="text-align: center; color: red">
    <strong>Array.prototype.splice 和  Array.prototype.slice的区别 </strong>

</div>

<ol>
<li>Array.prototype.splice会改变原数组，Array.prototype.slice不会改变原数组</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>   var arr1 &#x3D; [&quot;111&quot;, &quot;222&quot;, &quot;333&quot;]<br>   var arr2 &#x3D; arr1.splice(1)<br><br>   console.log(arr2); &#x2F;&#x2F;被删除的数组 [&quot;222&quot;,&quot;333&quot;]<br>   console.log(arr1); &#x2F;&#x2F;删除后剩余的数组[&quot;111&quot;]<br> &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  var arr1 &#x3D; [&quot;111&quot;, &quot;222&quot;, &quot;333&quot;]<br>  var arr2 &#x3D; arr1.slice(1)<br><br>  console.log(arr2); &#x2F;&#x2F;被删除的数组 [&quot;222&quot;,&quot;333&quot;]<br>  console.log(arr1); &#x2F;&#x2F;原来的数组[&quot;111&quot;,&quot;222&quot;,&quot;333&quot;]<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

<ol start="2">
<li><p>Array.prototype.slice可以截取字符串,Array.prototype.splice只能操作数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  var arr1 &#x3D; &quot;heiil&quot;<br>  var arr2 &#x3D; arr1.slice(0, 2)<br><br>  console.log(arr2); &#x2F;&#x2F;被删除的字符串 he<br>  console.log(arr1); &#x2F;&#x2F;原来的字符串 heill<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>
</li>
<li><p>Array.prototype.slice只能删除数组或字符串,Array.prototype.splice既能删除数组，但是可以增加数组。</p>
</li>
</ol>
</div>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 18px">

<div style="text-align: center; color: red">
<strong>Array.prototype.substring Array.prototype.slice 和 Array.prototype.substr()区别 </strong>

</div>

<p>首先substring  slice substr 都是用来截取字符串的长度的</p>
<p>字符串中的slice()方法<br>可以从字符串中截取指定的内容<br>不会影响原字符串，而是截取到内容返回<br>参数<br>　第一个，开始位置的索引（包括开始位置）<br>　第二个，结束位置的索引（不包括结束位置）<br>　如果省略第二个参数，则会截取到后边所有的<br>　也<code>可以传递一个负数作为参数</code>，<code>负数的话将会从后边计算</code></p>
<img src="/image/jsMethod/07.png">

<p>另外，字符串中的substring()方法也可以截取字符串，跟slice()类似<br>参数<br>　　第一个，开始位置的索引（包括开始位置）<br>　　第二个，结束位置的索引（不包括结束位置）<br><code>不同的是这个方法不能直接接受负值作为参数</code>，<code>如果传递了一个负值，则默认使用0</code></p>
<p>另外，substr()方法也可以用来截取字符串<br>参数<br>　　 第一个，用来截取字符串<br>　　<code>第二个，截取的长度</code></p>
<img src="/image/jsMethod/08.png">

<p>参考博客<a href="https://www.cnblogs.com/whkl-m/p/13330771.html" target="_blank" rel="noopener">https://www.cnblogs.com/whkl-m/p/13330771.html</a></p>
<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 18px">

<div style="text-align: center; color: red">
    <strong>Array.prototype.findIndex() </strong>

</div>
</div>

<hr>
<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 18px">

<div style="text-align: center; color: red">
    <strong>Array.prototype.find() </strong>

</div>
</div>



<div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 18px">

<div style="text-align: center; color: red">
  <strong>JavaScript concat() 方法 </strong>

</div>

<p>定义和用法<br>concat() 方法用于连接两个或多个数组。</p>
<p>该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p>
<p>语法<br>arrayObject.concat(arrayX,arrayX,……,arrayX)</p>
<p>实例<br>例子 1<br>在本例中，我们将把 concat() 中的参数连接到数组 a 中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;<br><br>var a &#x3D; [1,2,3];<br>document.write(a.concat(4,5));<br><br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">1,2,3,4,5<br></code></pre></td></tr></table></figure>

<p>例子 2<br>在本例中，我们创建了两个数组，然后使用 concat() 把它们连接起来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;<br><br>var arr &#x3D; new Array(3)<br>arr[0] &#x3D; &quot;George&quot;<br>arr[1] &#x3D; &quot;John&quot;<br>arr[2] &#x3D; &quot;Thomas&quot;<br><br>var arr2 &#x3D; new Array(3)<br>arr2[0] &#x3D; &quot;James&quot;<br>arr2[1] &#x3D; &quot;Adrew&quot;<br>arr2[2] &#x3D; &quot;Martin&quot;<br><br>document.write(arr.concat(arr2))<br><br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">George,John,Thomas,James,Adrew,Martin<br></code></pre></td></tr></table></figure>

<p>例子 3<br>在本例中，我们创建了三个数组，然后使用 concat() 把它们连接起来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;<br><br>var arr &#x3D; new Array(3)<br>arr[0] &#x3D; &quot;George&quot;<br>arr[1] &#x3D; &quot;John&quot;<br>arr[2] &#x3D; &quot;Thomas&quot;<br><br>var arr2 &#x3D; new Array(3)<br>arr2[0] &#x3D; &quot;James&quot;<br>arr2[1] &#x3D; &quot;Adrew&quot;<br>arr2[2] &#x3D; &quot;Martin&quot;<br><br>var arr3 &#x3D; new Array(2)<br>arr3[0] &#x3D; &quot;William&quot;<br>arr3[1] &#x3D; &quot;Franklin&quot;<br><br>document.write(arr.concat(arr2,arr3))<br><br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">George,John,Thomas,James,Adrew,Martin,William,Franklin<br></code></pre></td></tr></table></figure>

<p><a href="https://www.w3school.com.cn/jsref/jsref_concat_array.asp" target="_blank" rel="noopener">详细解释</a></p>
</div>


</div>]]></content>
      <categories>
        <category>JS方法细解</category>
      </categories>
      <tags>
        <tag>JS方法集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Express处理请求</title>
    <url>/2020/ckpf35kjx000ojov4ca8w116a/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3647099666,2758135680&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">Express处理请求</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
Express处理请求

</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>Express框架特性</strong><br>1.提供了方便简洁的路由定义方式<br>2.对获取HTTP请求参数进行了简化处理<br>3.对模板引擎支持程度高，方便渲染HTML页面<br>4.提供了中间机制有效控制HTTP请求<br>5.拥有大量第三方中间件对功能进行扩展</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>如何利用express框架开启服务器</strong><br>1.代码如下图所示<br><img src="\image\express\01.png"><br>2.界面展示情况<br><img src="\image\express\02.png"><br><strong>注意:每次修改代码都需要重新开启服务器</strong></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>中间件</strong><br>1.什么是中间件<br>中间件就是一堆方法，可以接受客户端发来的请求，可以对请求做出响应，也可以将请求继续交给下一个中间件继续处理。<br>2.详情如图所示<br><img src="\image\express\03.png"><br>3.中间件主要由两部分构成，中间件方法以及请求处理函数<br>4.中间件方法由Express提供，负责拦截请求，请求处理函数由开发人员提供，负责处理请求。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">app.get(&#39;请求路径&#39;,&#39;处理函数&#39;)  &#x2F;&#x2F; 接收并处理get请求<br>app.post(&#39;请求路径&#39;,&#39;处理函数&#39;) &#x2F;&#x2F; 接收并处理post请求<br></code></pre></td></tr></table></figure>
<p>5.针对同一个请求设置多个中间件，对同一个请求进行多次处理，默认情况下，请求从上到下依次匹配中间件，一旦匹配成功，终止匹配。<br><strong>可以调用next方法将请求的控制权交给下一个中间件，直到遇到结束请求的中间件</strong></p>
<p><strong>中间件的语法使用</strong><br>1.详情代码如下所示<br><img src="\image\express\04.png"><br>2.网页效果图如下<br><img src="\image\express\05.png"></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>app.use中间件用法</strong><br>1.app.use 匹配所有的请求方式，可以直接传入请求处理函数，代表接收所有的请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">app.use((req,res,next)&#x3D;&gt;&#123;<br>	console.log(req.url);<br>	next();<br>	&#125;);<br></code></pre></td></tr></table></figure>
<p>2.app.use 第一个参数也可以传入请求地址，代表不论什么请求方式，只要是这个请求地址就接收这个请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">app.use((req,res,next)&#x3D;&gt;&#123;<br>	console.log(req.url)<br>	next();<br>	&#125;);<br></code></pre></td></tr></table></figure>
<p>3.实现代码<br><img src="\image\express\06.png"></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>中间件的应用</strong><br>1.路由保护，客户在访问需要登录的页面时，可以先使用中间件判断用户登录状态，用户如果未登录，则拦截请求，直接响应，禁止用户进入需要登录的页面<br><img src="\image\express\07.png"><br>2.网站维护公告，在所有路由的最上面定义接收所有请求的中间件，直接为客户端做出响应，网站正在维护中。<br><img src="\image\express\08.png"><br>3.定义404页面<br><img src="\image\express\09.png"></p>
</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>错误处理中间件</strong><br>程序在执行的过程中，不可避免的会出现一些无线预料的错误，比如文件读取失败，数据库连接失败。<br>错误处理中间件是一个集中处理错误的地方。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">app.use((err,req,res,next)&#x3D;&gt;&#123;<br>	res.status(500).send(&#39;服务器发生未知错误&#39;);<br>	&#125;)<br></code></pre></td></tr></table></figure>

<p>当程序出现错误时，调用next()方法，并且将错误信息通过参数形式传递给next()方法，即可触发错误处理中间件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">app.get(&#39;&#x2F;index&#39;, (req, res, next) &#x3D;&gt; &#123;<br>    fs.readFile(&#39;.&#x2F;01.js&#39;, &#39;utf8&#39;, (err, result) &#x3D;&gt; &#123;<br>        if (err !&#x3D; null) &#123;<br>            next(err)<br>        &#125; <br>    &#125;);<br>    &#x2F;&#x2F; throw new Error(&#39;程序发生了错误&#39;)<br>    &#x2F;&#x2F;res.send(&#39;程序没有出错&#39;)<br>&#125;);<br></code></pre></td></tr></table></figure>

<hr>
</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>捕获错误中间件(待写)651</strong></p>
</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
</div>]]></content>
  </entry>
  <entry>
    <title>ajax基础</title>
    <url>/2020/ckpf35kq7006wjov47kheeqnf/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3647099666,2758135680&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">AJAX学习</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
学习AJAX
<br>
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>Ajax的应用场景</strong><br>1.页面上拉加载更多数据<br>2.列表数据无刷新分页<br>3.表单项离开焦点数据验证<br>4.搜索框提示文字下拉列表</p>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>Ajax运用</strong><br>1.代码编写<br><img src="\image\Ajax\01.png"><br>2.public下面的html文件<br><img src="\image\Ajax\02.png"><br>3.服务器请求的地址，展示的界面<br><img src="\image\Ajax\03.png"></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>Ajax运行原理</strong><br>Ajax相当于浏览器发送请求与接收响应的代理人，以实现在不影响用户浏览页面的情况下，局部更新页面数据，从而提高用户体验。<br><img src="\image\Ajax\04.png"></p>
<hr>
<p><strong>Ajax的实现步骤</strong><br>1.创建Ajax对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var xhr &#x3D; new XMLHttpRuquest();<br></code></pre></td></tr></table></figure>
<p>2.告诉Ajax请求地址以及请求方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">xhr.open(&#39;get&#39;,&#39;http:&#x2F;&#x2F;www.example.com&#39;);<br></code></pre></td></tr></table></figure>
<p>3.发送请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">xhr.send();<br></code></pre></td></tr></table></figure>
<p>4.获取服务器端与客户端的响应数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">xhr.oload &#x3D; function()&#123;<br>	console.log(xhr.responseText);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>具体代码书写如下:<br>客户端代码:<br><img src="\image\Ajax\05.png"><br>服务器端代码:<br><img src="\image\Ajax\06.png"></p>
<hr>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>服务器端响应的数据格式</strong><br>在真实的项目中，服务器大多数情况下会以JSON对象作为响应数据的格式。当客户拿到响应数据时，<br>要将JSON数据和HTML字符进行拼接，然后将拼接的结果展示在页面中。</p>
<p>在http请求与响应的过程中，无论是请求参数还是响应内容，如果是对象类型，最终都会被转换为对象字符串进行传输。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">JSON.parse()&#x2F;&#x2F;将json 字符串转为json对象<br></code></pre></td></tr></table></figure>
<p>具体代码书写如下:<br>客户端代码:<br><img src="\image\Ajax\07.png"><br>服务器端代码:<br><img src="\image\Ajax\08.png"></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>请求参数的传递</strong><br>1.客户端发送给服务器端，最后把提交到服务器的数据打印到客户端界面<br>客户端代码<br><img src="\image\Ajax\09.png"><br><img src="\image\Ajax\10.png"><br>服务器端代码:<br><img src="\image\Ajax\11.png"><br>界面端的展示<br><img src="\image\Ajax\12.png"><br><strong>需要注意的是: req.query 表示的是客户端发送的数据</strong></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>传递post请求参数</strong><br>1.post请求参数和get请求参数对比<br><img src="\image\Ajax\13.png"><br>2.需要安装中间件插件 body-parser</p>
<p>客户端代码<br><img src="\image\Ajax\14.png"><br><img src="\image\Ajax\15.png"><br>服务器端代码:<br><img src="\image\Ajax\16.png"><br>界面端的展示<br><img src="\image\Ajax\17.png"></p>
<p><strong>注意:在HTTP请求和响应的过程中传递的数据块就叫报文。<br>报文分为报文头和报文体<br>报文头存储的是一些键值对信息，可以理解为客户端向服务器端说的一些话。 “Content-Type”属于报文头<br>报文体主要存储一些内容，post请求参数就存储在报文体中。<br>报文头和报文体在请求的过程，整体发送到服务器端<br></strong></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>向服务器端传递JSON格式的请求参数</strong><br>客户端代码<br><img src="\image\Ajax\18.png"></p>
<p>服务器端代码:<br><img src="\image\Ajax\19.png"><br>界面端的展示<br><img src="\image\Ajax\20.png"><br><strong>请求参数的格式</strong><br><img src="\image\Ajax\21.png"><br>1.application/x-www-form-urlencoded</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">name&#x3D;zhangsan&amp;age&#x3D;20&amp;sex&#x3D;男<br></code></pre></td></tr></table></figure>
<p>2.application/json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#123;name:&#39;zhangsan&#39;,age:18&#125;<br></code></pre></td></tr></table></figure>
<p>在请求头中指定Content-Type 属性的值是application、json，告诉服务器端当前请求参数的格式是json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">JSON.stringify() &#x2F;&#x2F; 将json对象转换为json字符串<br></code></pre></td></tr></table></figure>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>获取服务端的响应</strong><br>在创建Ajax对象，配置Ajax对象，发送请求，以及接收完服务器端响应数据，这个过程中的每一个步骤都会对应一个数值<br>这个数值就是Ajax状态码<br>0：请求未初始化（还没有调用open）<br>1：请求已经建立，但是还没有发送（还没有调用send()）<br>2：请求已经发送<br>3：请求正在处理中，通常响应中已经有部分数据可以用了<br>4：响应已经完成，可以获取并使用服务器的响应了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">xhr.readyState   &#x2F;&#x2F;获取Ajax状态码<br></code></pre></td></tr></table></figure>

<p><strong>onreadystatechange 事件</strong><br>当Ajax状态码发生改变时，将自动触发该事件</p>
<p>客户端代码<br><img src="\image\Ajax\22.png"></p>
<p>服务器端代码:<br><img src="\image\Ajax\23.png"><br>界面端的展示<br><img src="\image\Ajax\24.png"></p>
<p><strong>获取服务端响应的两种对比  推荐 onload 代码简洁</strong><br><img src="\image\Ajax\25.png"></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong> Ajax 错误处理</strong><br><img src="\image\Ajax\26.png"><br><img src="\image\Ajax\27.png"><br>// Ajax状态码: 表示Ajax请求的过程状态 ajax对象返回的<br>// Http状态码: 表示请求的处理结果 是服务器端返回的</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong> Ajax 在低版本IE浏览器的缓存问题</strong><br><img src="\image\Ajax\28.png"><br>客户端代码<br><img src="\image\Ajax\29.png"></p>
<p>服务器端代码:<br><img src="\image\Ajax\30.png"></p>
<hr>
<p><strong> Ajax 异步请求</strong></p>
<p>客户端代码<br><img src="\image\Ajax\31.png"></p>
<p>界面显示:<br><img src="\image\Ajax\32.png"></p>
<hr>
<p><strong> Ajax 封装</strong><br>客户端代码<br><img src="\image\Ajax\33.png"></p>
<p>界面显示:<br><img src="\image\Ajax\34.png"></p>
<hr>
<p><strong> Ajax 函数封装01</strong></p>
<p>客户端代码<br><img src="\image\Ajax\35.png"><br><img src="\image\Ajax\36.png"></p>
<p>界面显示:<br><img src="\image\Ajax\37.png"><br><img src="\image\Ajax\38.png"></p>
<hr>
<p><strong> Ajax 函数封装02</strong><br>客户端代码<br><img src="\image\Ajax\39.png" style="width: 550px"><br><img src="\image\Ajax\40.png" style="width: 550px"><br><img src="\image\Ajax\41.png" style="width: 550px"></p>
<p>界面显示:<br><img src="\image\Ajax\42.png" style="width: 550px"></p>
<hr>
<p><strong> Ajax 函数封装03</strong><br>客户端代码<br><img src="\image\Ajax\43.png" style="width: 550px"><br><img src="\image\Ajax\44.png" style="width: 550px"><br><img src="\image\Ajax\45.png" style="width: 550px"></p>
<p>界面显示:<br><img src="\image\Ajax\46.png" style="width: 550px"></p>
<hr>
<p><strong> Ajax 函数封装04</strong><br>客户端代码<br><img src="\image\Ajax\47.png" style="width: 550px"><br><img src="\image\Ajax\48.png" style="width: 550px"><br><img src="\image\Ajax\49.png" style="width: 550px"></p>
<p>界面显示:<br><img src="\image\Ajax\50.png" style="width: 550px"></p>
<hr>
<p><strong> Ajax 函数封装05</strong><br>客户端代码<br><img src="\image\Ajax\51.png" style="width: 550px"><br><img src="\image\Ajax\52.png" style="width: 550px"><br><img src="\image\Ajax\53.png" style="width: 550px"></p>
<p>界面显示:<br><img src="\image\Ajax\54.png" style="width: 550px"></p>
<hr>
<p><strong> 验证邮箱地址</strong><br><img src="\image\Ajax\55.png" style="width: 550px"><br><img src="\image\Ajax\56.png" style="width: 550px"><br><img src="\image\Ajax\57.png" style="width: 550px"></p>
<hr>
<p><strong> 搜索框内容自动提示</strong><br><img src="\image\Ajax\58.png" style="width: 550px"><br><img src="\image\Ajax\59.png" style="width: 550px"><br><img src="\image\Ajax\60.png" style="width: 550px"></p>
<hr>
<p><strong>省市区联动</strong><br><img src="\image\Ajax\61.png" style="width: 550px"><br><img src="\image\Ajax\62.png" style="width: 550px"><br><img src="\image\Ajax\63.png" style="width: 550px"><br><img src="\image\Ajax\64.png" style="width: 550px"></p>
<hr>
<p><strong>FormData 对象的作用</strong><br>1.模拟HTML表单，相当于将HTML表单映射成表单对象，自动将表单对象中的数据拼接成请求参数的格式。<br>2.异步上传二进制文件</p>
<p><strong>FormData 对象的使用方法</strong><br><img src="\image\Ajax\65.png" style="width: 550px"><br><img src="\image\Ajax\66.png" style="width: 550px"></p>
<hr>
<p><strong>FormData 对象下的实例</strong><br><img src="\image\Ajax\67.png" ><br><img src="\image\Ajax\68.png" style="width: 550px"></p>
<hr>
<p><strong>FormData 对象实现二进制文件上传</strong><br><img src="\image\Ajax\69.png" ><br><img src="\image\Ajax\70.png" ></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>同源政策</strong><br>Ajax请求限制<br>Ajax 只能向自己的服务器发送请求。比如现在有一个A网站、有一个B网站，A网站中的 HTML 文件只能向A网站服务器中发送 Ajax 请求，B网站中的 HTML 文件只能向 B 网站中发送 Ajax 请求，但是 A 网站是不能向 B 网站发送 Ajax请求的，同理，B 网站也不能向 A 网站发送 Ajax请求。</p>
<p><strong>什么是同源</strong><br>如果两个页面拥有相同的协议、域名和端口，那么这两个页面就属于同一个源，其中只要有一个不相同，就是不同源。<br><code>http://www.example.com/dir/page.html</code></p>
<p><strong>同源政策的目的</strong><br>同源政策是为了保证用户信息的安全，防止恶意的网站窃取数据。最初的同源政策是指 A 网站在客户端设置的 Cookie，B网站是不能访问的。</p>
<p>随着互联网的发展，同源政策也越来越严格，在不同源的情况下，其中有一项规定就是无法向非同源地址发送Ajax 请求，如果请求，浏览器就会报错。</p>
<p><strong>使用JSONP解决同源限制的问题</strong></p>
<p>1.将不同源的服务器端请求地址写在 script 标签的 src 属性中<br> <code>&lt;script src=&quot;www.example.com&quot;&gt;&lt;/script&gt;</code><br> <code>&lt;script src=“https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;</code><br>2.服务器端响应数据必须是一个函数的调用，真正要发送给客户端的数据需要作为函数调用的参数。<br> <code>const data = &#39;fn({name: &quot;张三&quot;, age: &quot;20&quot;})&#39;;</code><br><code>res.send(data);</code><br>3.在客户端全局作用域下定义函数 fn<br> <code>function fn (data) { }</code><br>4.在 fn 函数内部对服务器端返回的数据进行处理<br> <code>function fn (data) { console.log(data); }</code></p>
<p><strong>在服务器端口为3000的文件中写入以下代码</strong><br><img src="\image\Ajax\71.png" ></p>
<br>
在script里面访问了端口为3001的服务器，在端口为3001的服务器里面配置下图所示。

<img src="\image\Ajax\72.png" >


<hr>
<p><strong>JSONP代码优化01</strong><br>1.客户端需要将函数名称传递到服务器端。<br>2.将 script 请求的发送变成动态请求。</p>
<img src="\image\Ajax\73.png" >

<p><strong>JSONP代码优化02</strong><br>1.客户端需要将函数名称传递到服务器端，需要解决函数名称传递问题。</p>
<ul>
<li><p>客户端代码</p>
<img src="\image\Ajax\74.png" >
</li>
<li><p>服务器端代码</p>
<img src="\image\Ajax\75.png" >


</li>
</ul>
<p><strong>JSONP代码优化03</strong></p>
<ul>
<li>封装 jsonp 函数，方便请求发送</li>
</ul>
<img src="\image\Ajax\76.png" >

<p><strong>JSONP服务器端代码优化</strong></p>
<img src="\image\Ajax\77.png" >


</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>访问非同源数据 服务器端解决方案</strong><br><strong>服务器端跨域请求数据</strong><br>同源政策是浏览器给予Ajax技术的限制，服务器端是不存在同源政策限制<br>访问非同源数据，绕过了浏览器，直接向服务器来发送请求。<br>安装request模块向其他服务器端请求数据的模块</p>
<p>点击按钮向一号服务器发送ajax请求，一号服务器接收ajax请求后，利用request模块向二号服务器发送请求。<br>二号服务器接收请求后，响应内容。把二号服务器的响应内容发送到一号客户端界面。</p>
<p><strong>一号客户端代码</strong><br><img src="\image\Ajax\78.png" ></p>
<p><strong>一号服务器端代码</strong><br><img src="\image\Ajax\79.png" ></p>
<p><strong>二号服务器端代码</strong><br><img src="\image\Ajax\80.png" ></p>
<hr>
<p><strong>cookie复习</strong><br>cookie服务端与客户端身份识别的技术<br>当客户端第一次访问服务器端的时候，服务器端检测当前这个客户端我并不认识，这个时候服务器端在对客户端进行相应的<br>同时，还会给客户端发送一个小卡片（服务端发给客户端的身份证，有了一个身份证就能证明客户端是谁了cookie）<br>当客户端再次访问服务器端是的时候，这个身份证也就是cookie会随着自动发给服务端，服务器端拿到这个cookie就知道<br>客户端是谁了。这样就建立了客户端与服务器端持久的联系<br><img src="\image\Ajax\81.png" ></p>
<hr>
<p><strong>withCredentials属性</strong><br>在使用Ajax技术发送跨域请求时，默认情况下不会在请求中携带cookie信息。<br>withCredentials：指定在涉及到跨域请求时，是否携带cookie信息，默认值为false<br>Access-Control-Allow-Credentials：true 允许客户端发送请求时携带cookie</p>
<p><strong>实现跨域登录功能</strong><br>一号客户端代码<br><img src="\image\Ajax\82.png" ></p>
<p>二号服务器端代码<br><img src="\image\Ajax\83.png" ></p>
<p><strong>Express Session的使用</strong></p>
<p><a href="https://blog.csdn.net/cckevincyh/article/details/79816491" target="_blank" rel="noopener">Session</a></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>jQuery 中的 Ajax</strong><br>$.ajax()方法概述<br>作用：发送Ajax请求<br><img src="\image\Ajax\84.png" ></p>
<p>客户端代码<br><img src="\image\Ajax\85.png" ></p>
<p>服务器端代码</p>
<img src="\image\Ajax\86.png" >


<hr>
<p><strong>$.ajax方法传递请求参数</strong><br>客户端代码<br><img src="\image\Ajax\87.png" ></p>
<p>服务器端代码</p>
<img src="\image\Ajax\88.png" >


<hr>
<p><strong>beforeSend方法的说明</strong></p>
<img src="\image\Ajax\89.png" >

<p><strong>serialize方法将表单内容拼接成字符串参数</strong></p>
<img src="\image\Ajax\90.png" >

<hr>
<p><strong>$.ajax方法发送jsonp请求</strong><br>客户端代码<br><img src="\image\Ajax\91.png" ><br>服务器端代码<br><img src="\image\Ajax\92.png" ></p>
<hr>
<p><strong>$.get、$.post方法的使用</strong></p>
<p>客户端代码<br><img src="\image\Ajax\93.png" ><br>服务器端代码<br><img src="\image\Ajax\94.png" ></p>
<hr>
<p><strong>全局事件待写</strong></p>
</p>
</div>]]></content>
  </entry>
  <entry>
    <title>最近梳理自己学习的东西，然后准备找工作的事情</title>
    <url>/2020/ckpf35krz008qjov4h6t535ng/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1190025235,171050128&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">梳理自己学习的东西</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
给自己最近定一个目标
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
自己目前学习了 html css(flex布局)   js基础语法 jsBOM  jsDOM  gulp打包 vue(还在学习) <br>
但是学习vue还得学习ajax才行。<br>

<p>最近学习安排就是ajax学习为主，自己慢慢在博客上面写http的笔记，还有之前学习vue笔记写上来。<br></p>
</p>

<p style="text-indent: ;color: rgb(93, 93, 93);font-size: 13px">
第一个阶段把 ajax学习完毕 然后vue学完，做一个项目。<br>
第二阶阶段把 把京东项目好好写完。<br>
第三阶阶段把 把flex布局，移动端布局好好学习<br>
第四个阶段把 算法题目多刷几遍，面试视频看一点。<br>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>



</div>]]></content>
  </entry>
  <entry>
    <title>移动端布局:flex布局</title>
    <url>/2020/ckpf35kqd0074jov4ep7t6u6m/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3953922247,2741721553&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">flex布局的学习</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
移动端布局学习之路

</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>传统布局与flex布局的比较<br><strong>传统布局:</strong><br>1.兼容性好<br>2.布局繁琐<br>3.局限性，不能再移动端很好的布局</p>
<p><strong>flex弹性布局:</strong><br>1.操作方便，布局极为简单，移动端应用很广泛<br>2.PC端浏览器支持情况极差<br>3.IE 11 或者更低版本，不支持或仅部分支持</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>Flex布局原理</strong></p>
<ul>
<li>Flex布局原理就是：给父盒子添加flex属性，来控制子盒子的位置排<br>列方式从而实现flex布局</li>
<li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和<br>vertical-align 属性将失效。</li>
<li>Flex布局又叫伸缩布局、弹性布局、伸缩盒布局、弹性盒布局、flex<br>布局</li>
</ul>
<hr>
<p><strong>常见父项属性</strong><br>以下由6个属性是对父元素设置的</p>
<ul>
<li>flex-direction：设置主轴的方向</li>
<li>justify-content：设置主轴上的子元素排列方式</li>
<li>flex-wrap：设置子元素是否换行</li>
<li>align-content：设置侧轴上的子元素的排列方式（多行）</li>
<li>align-items：设置侧轴上的子元素排列方式（单行）</li>
<li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li>
</ul>
<hr>
<p><strong>flex-direction 设置主轴的方向</strong><br>flex-direction 设置主轴的方向<br>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有 ： 行和列、x 轴和y 轴</p>
<ul>
<li><p>默认主轴方向就是 x 轴方向，水平向右</p>
</li>
<li><p>默认侧轴方向就是 y 轴方向，水平向下</p>
</li>
</ul>
<img src="/image/flex/00.png">

<p><strong> flex-direction 设置主轴的方向</strong><br>flex-direction 属性决定主轴的方向（即项目的排列方向）<br>注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的</p>
<ul>
<li><p>Flex布局中默认的主轴是row，x轴</p>
</li>
<li><p>如果想改变主轴方向可通过设置flex-direction来改变</p>
</li>
<li><p>flex-direction:row;  默认值从左到右 主轴为x轴</p>
<img src="/image/flex/01.png"></li>
<li><p>flex-direction:row- reverse; 从右到左  主轴为x轴，并且翻转</p>
<img src="/image/flex/02.png">
</li>
<li><p>flex-direction:column;  从上到下 将主轴改为y轴，纵轴</p>
<img src="/image/flex/03.png"></li>
<li><p>flex-direction:column- reverse; 从下到上 主轴为y轴，并且翻转</p>
<img src="/image/flex/04.png">

</li>
</ul>
<hr>
<p><strong>设置主轴子元素排列形式</strong></p>
<ul>
<li><p>通过justify-content能够设置主轴子元素排列形式</p>
</li>
<li><p>值为flex-start 所有子元素在主轴头部显示</p>
<img src="/image/flex/05.png">
</li>
<li><p>值为flex-end 所有子元素在主轴尾部显示</p>
<img src="/image/flex/06.png">
</li>
<li><p>值为flex-center 所有子元素在主轴居中对齐</p>
<img src="/image/flex/07.png">
</li>
<li><p>值为space-around 所有子元素平分剩余空间</p>
<img src="/image/flex/08.png">
</li>
<li><p>值为space-between 所有子元素先两边贴边在平分剩余空间</p>
<img src="/image/flex/09.png">

</li>
</ul>
<hr>
<p><strong>flex-wrap 设置子元素是否换行</strong><br>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的。<br><img src="/image/flex/10.png"></p>
<table>
<thead>
<tr>
<th align="left">属性值</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">nowrap</td>
<td align="left">默认值，不换行</td>
</tr>
<tr>
<td align="left">wrap</td>
<td align="left">换行</td>
</tr>
</tbody></table>
<ul>
<li><p>值为flex-wrap: wrap 子元素换行</p>
<img src="/image/flex/11.png">
</li>
<li><p>值为flex-wrap: nowrap 子元素不换行</p>
<img src="/image/flex/12.png">

</li>
</ul>
<hr>
<p><strong>align-items 设置侧轴上的子元素排列方式（单行 ）</strong><br>该属性是控制子项在侧轴（默认是y轴）上的排列方式 在子项为单项（单行）的时候使用</p>
<table>
<thead>
<tr>
<th align="left">属性值</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">flex-start</td>
<td align="left">默认值 从上到下</td>
</tr>
<tr>
<td align="left">flex-end</td>
<td align="left">从下到上</td>
</tr>
<tr>
<td align="left">center</td>
<td align="left">挤在一起居中（垂直居中）</td>
</tr>
<tr>
<td align="left">stretch</td>
<td align="left">拉伸</td>
</tr>
</tbody></table>
<p><strong>该属性是控制子项在侧轴（默认是y轴）上的排列方式</strong></p>
<ul>
<li>值为align-items: flex-start <img src="/image/flex/13.png">


</li>
</ul>
<ul>
<li>值为align-items: flex-end   从下到上<img src="/image/flex/14.png">


</li>
</ul>
<ul>
<li>值为align-items: center  挤在一起居中（垂直居中） <img src="/image/flex/15.png">


</li>
</ul>
<ul>
<li>值为align-items: stretch  沿着侧轴方向进行拉伸<img src="/image/flex/16.png">

</li>
</ul>
<hr>
<p><strong>align-content 设置侧轴上的子元素的排列方式（多行）</strong><br>设置子项在侧轴上的排列方式 并且只能用于子项出现 换行 的情况（多行），在<code>单行</code>下是没有效果的。</p>
<table>
<thead>
<tr>
<th align="left">属性值</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">flex-start</td>
<td align="left">默认值在侧轴的头部开始排列</td>
</tr>
<tr>
<td align="left">flex-end</td>
<td align="left">在侧轴的尾部开始排列</td>
</tr>
<tr>
<td align="left">center</td>
<td align="left">在侧轴中间显示</td>
</tr>
<tr>
<td align="left">space-around</td>
<td align="left">子项在侧轴平分剩余空间</td>
</tr>
<tr>
<td align="left">space-between</td>
<td align="left">子项在侧轴先分布在两头，再平分剩余空间</td>
</tr>
<tr>
<td align="left">stretch</td>
<td align="left">设置子项元素高度平分父元素高度</td>
</tr>
</tbody></table>
<ul>
<li>值为align-items: flex-start  默认值在侧轴的头部开始排列<img src="/image/flex/17.png">


</li>
</ul>
<ul>
<li><p>值为align-items: flex-end  在侧轴的尾部开始排列</p>
<img src="/image/flex/18.png">
</li>
<li><p>值为align-items: center  在侧轴中间显示</p>
<img src="/image/flex/19.png">
</li>
<li><p>值为align-items: space-around  子项在侧轴平分剩余空间</p>
<img src="/image/flex/20.png">
</li>
<li><p>值为align-items: space-between 子项在侧轴平分剩余空间</p>
<img src="/image/flex/21.png">



</li>
</ul>
<p><strong>align-content 和 align-items 区别</strong></p>
<ul>
<li>align-items 适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸</li>
<li>align-content 适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、 下对齐、居中、拉伸以及平均分<br>配剩余空间等属性值。</li>
<li>总结就是单行找 align-items 多行找 align-content</li>
</ul>
<hr>
<p><strong>flex-flow</strong><br>flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性<br>flex-flow:row wrap;</p>
<ul>
<li>值为flex-flow:row wrap; 是 flex-direction 和 flex-wrap 属性的复合属性(书写没有先后顺序)<img src="/image/flex/22.png">


</li>
</ul>
<ul>
<li>flex-direction：设置主轴的方向</li>
<li>justify-content：设置主轴上的子元素排列方式</li>
<li>flex-wrap：设置子元素是否换行</li>
<li>align-content：设置侧轴上的子元素的排列方式（多行）</li>
<li>align-items：设置侧轴上的子元素排列方式（单行）</li>
<li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li>
</ul>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>flex布局子项常见属性</strong></p>
<ul>
<li>flex 子项目占的份数</li>
<li>align-self 控制子项自己在侧轴的排列方式</li>
<li>order属性定义子项的排列顺序（前后顺序）</li>
</ul>
<p><strong>flex 属性</strong><br>flex 属性定义子项目分配剩余空间，用flex来表示占多少份数。</p>
<p><code>.item {</code><br><code>lex: &lt;number&gt;; /* default 0 */</code><br><code>}</code></p>
<p>经典的三栏布局<br>淘宝的<code>圣杯案例</code>：左右两栏固定宽度，中间部分自适应<br>代码显示<br><img src="/image/flex/23.png"></p>
<p>效果图显示<br><img src="/image/flex/24.png"></p>
<p>分蛋糕:1,3盒子各占一份，2号盒子占两份</p>
<p>代码  效果图显示<br><img src="/image/flex/25.png"></p>
<hr>
<p><strong> align-self 控制子项自己在侧轴上的排列方式</strong></p>
<p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。<br>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p>
<p>比如一行排列三个盒子，要让第三个盒子掉下来（控制的是侧轴的排列方式）：<br><img src="/image/flex/26.png"></p>
<p><strong>order 属性定义项目的排列顺序</strong><br>数值越小，排列越靠前，默认为0。<br>注意：和 z-index 不一样。<br>z-index 属性指定一个元素的堆叠顺序。<br>拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">.item &#123;<br>order: &lt;number&gt;;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>比如一行排列三个盒子，让二号盒子跑到一号盒子前面（控制的是侧轴的排列方式）：<br><img src="/image/flex/27.png"></p>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>



</div>]]></content>
  </entry>
  <entry>
    <title>拜读css权威指南第一遍</title>
    <url>/2020/ckpf35kru008jjov41v2p8qtw/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>gulp打包工具的学习</title>
    <url>/2020/ckpf35kqe0076jov42n1nh8pq/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3411772147,937858371&fm=11&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">gulp打包工具的学习</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">

</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>gulp可以做什么？</strong><br>1.项目上线的时候，html css js文件压缩合并<br>2.语法转换（es6 less..）转换成es5语法<br>3.公共文件抽离<br>4.修改文件浏览器自动刷新</p>
<p><strong>gulp使用</strong><br>1.使用 npm install gulp 下载gulp库文件<br>2.在项目根目录下建立gulp.js文件<br>3.重构项目的文件夹结构src 目录放置源代码文件 dist目录放置构建后文件<br>4.在gulpfile.js文件中编写任务<br>5.在命令行工具中执行gulp任务</p>
<hr>
<p><strong>使用gulp复制src下面的base.css文件到dist目录下</strong><br>1.安装一个插件   npm install gulp   和    npm install gulp-cli   -g   (注意-g表示全局安装)<br>2.创建文件夹 src (放置项目文件)  dist (放置项目压缩后的文件) 以及 gulpfile.js<br>3. gulpfile.js 编写以下代码<br><img src="\image\gulp\01.png"><br>4.执行下面代码(gulp first)，得到返回结果<br><img src="\image\gulp\02.png"><br>5.我们需要注意的是<br>1)gulp.task 里面的第一个参数是任务名称，需要执行命令的时候用到<br>2)gulp.task 里面的第二个参数是回调函数，使用的箭头函数，里面必须跟参数，否则返回结果。<br>如果执行以下任务函数，则会报错。<br>gulp.task(‘first’, () =&gt; {<br>    console.log(“第一个gulp命令被执行”);<br>    // 1.使用gulp.src 获取要处理的文件<br>    gulp.src(‘./src/css/base.css’)<br>        // 要复制的文件路径 dist/css<br>        .pipe(gulp.dest(‘dist/css’));</p>
<p>});<br>必须在箭头函数里面加参数，并且后面要调用这个函数，才可以正常使用。<br>3)如果dist 目录下没有css文件夹，会自动生成一个css文件夹，把base.css拷贝过去。</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>html文件中代码压缩的操作</strong><br>1.安装一个插件名叫 gulp-htmlmin<br>2.在gulpfile.js中写入以下代码<br><img src="\image\gulp\03.png"><br>3.在命令行窗口执行以下代码 gulp htmlmin  ,输出结果如下图所示<br><img src="\image\gulp\04.png"><br>4.需要注意的是 </p>
<p>1) 引入gulp-htmlmin模块<br>2) 写入压缩代码 （collapseWhitespace : 折叠空白，也就是去掉空格 ）<br>        .pipe(htmlmin({<br>            collapseWhitespace: true<br>        }))</p>
<hr>
<p><strong>抽取html文件中的公共代码 并且代码压缩 </strong><br>1.安装一个插件名叫 gulp-file-include<br>2.在gulpfile.js中写入以下代码<br><img src="\image\gulp\05.png"><br>3.在src文件下建立一个 common 文件夹用来放 公共的代码，然后把公共代码删除，<br>删除后 在前面要引入    @@include(‘./common/公共文件夹下面的html名称’) 如下图所示（记住删除公共代码的代码里面都要引入）<br><img src="\image\gulp\06.png"><br>4.在命令行窗口执行以下代码 gulp htmlmin  ,输出结果如下图所示<br><img src="\image\gulp\07.png"><br>5.需要注意的是</p>
<p>1) 引入gulp-file-include模块<br>2) 写入抽离代码 .pipe(fileinclude()) <strong>抽离的代码要写到压缩代码的前面</strong><br>3) 要在src下面建立一个 公共文件夹（common），里面放入 代码里面相同的代码 命名为 header.html(命名可改，要对应  @@include（./common/ ) 下面的命名<br>4）把公共的代码删除，在代码删除的位置引入 <strong>@@include(‘./common/header.html’)</strong></p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<hr>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>less代码转换为css代码 ，并且代码压缩 </strong><br>1.安装一个插件名叫 gulp-less<br>2.安装一个插件名叫 gulp-csso<br>3.在gulpfile.js中写入以下代码<br><img src="\image\gulp\08.png"><br>4.在命令行窗口执行以下代码 gulp cssmin  ,输出结果如下图所示<br><img src="\image\gulp\09.png"><br>总体说明: 把less语法转换成css语法，再css语法进行压缩。</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>ES6转换ES5再代码压缩 </strong><br>1.安装一个插件名叫 gulp-babel插件<br>2.安装一个插件名叫 gulp-uglify插件<br>3.在gulpfile.js中写入以下代码<br><img src="\image\gulp\10.png"><br>4.在命令行窗口执行以下代码 gulp jsmin  ,输出结果如下图所示<br><img src="\image\gulp\11.png"><br>总体说明: 把es6语法转换成es5语法，再js语法进行压缩。</p>
<hr>
<p><strong>复制文件夹 </strong><br>1.在gulpfile.js中写入以下代码<br><img src="\image\gulp\12.png"><br>2.在命令行窗口执行以下代码 gulp copy  ,输出结果如下图所示<br><img src="\image\gulp\13.png"></p>
<hr>
<p><strong>一次执行多次任务 构建任务</strong><br>1.在gulpfile.js中写入以下代码<br><img src="\image\gulp\14.png"><br>2.在命令行窗口执行以下代码 gulp 或者 gulp default  ,输出结果如下图所示<br><img src="\image\gulp\15.png"><br><strong>注意:执行这个多次任务，gulpfile.js要有写 htmlmin jsmin cssmin 的压缩代码</strong></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>package.json文件夹的作用</strong><br>项目描述文件，记录了当前项目信息，例如项目名称，作者，GitHub地址，当前项目依赖了哪一些第三方模块等。<br><strong>使用 npm init -y 命令快速默认生成  npm init 命令自己配置生成 </strong><br>npm init 需要自己配置name 版本号等一些操作<br><img src="\image\gulp\16.png"><br>npm init -y 自动生成默认的，不需要自己配置<br><img src="\image\gulp\17.png"><br>最终在文件夹中生成一个 package.json的文件里面内容如下图所示<br><img src="\image\gulp\18.png"><br>package.json的文件里面内容的详细介介绍<br><img src="\image\gulp\19.png"><br><strong>当下载其他模块的时候，比如 formidable mine ; package.json 会生成这两个模块的依赖</strong><br><img src="\image\gulp\20.png"></p>
<p><strong>如果我们删除了 node_modules这个文件夹时，在命令行输入 npm install会自动生成node_modules。原理是输入 npm install 时，会在 package.json 里面找的安装模块的依赖。重新下载所有模块</strong><br>输入命令行代码如图所示<br><img src="\image\gulp\21.png"><br><strong>注意:前提我们文件里面有package.json这个文件，并且文件里面有模块的依赖才可以的，不然输入 npm  inatall 是不会找到安装模块的依赖</strong></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>开发依赖</strong><br>1.项目在开发阶段需要依赖，线上运营阶段不需要依赖的第三方包，称为开发依赖<br>2.使用npm install包名 –save-dev命令将包添加到 package.json文件的devDependencies字段中<br>3.我们使用 npm install gulp –save-dev 生成以下如图<br><img src="\image\gulp\22.png"></p>
<hr>
<p><strong>项目依赖</strong><br> 在命令行工具输入  npm install –production  安装项目依赖<br> <img src="\image\gulp\23.png"><br> 在文件node_modules里面可以看到只安装了项目依赖<br> <img src="\image\gulp\24.png"></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>package-lock.json文件的作用</strong><br>1.锁定包的版本: 确保再次下载时不会因为包版本不同而产生问题<br>2.加快下载速度，因为该文件中已经记录了项目所依赖第三方包的树状结构和包的下载地址，重新安装只需下载即可，不需要做额外的工作</p>
<hr>
<p><strong>演示package.json文件中 “script”（命令的别名）的作用</strong><br>1.在命名行工具里面我们输入 nodemon app.js 会执行app.js的文件里面内容<br>2.我们在package.json文件中 “script” 添加以下代码<br> <img src="\image\gulp\25.png"><br>3.在命令行输入 npm run buld 相当于执行 nodemon app.js 的代码</p>
</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>node.js中的模块加载机制(待写)</strong></p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong></strong></p>
</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong></strong></p>
</p>
</div>



]]></content>
  </entry>
  <entry>
    <title>最近想做的事情，决定了就去淦</title>
    <url>/2020/ckpf35ks4008ujov4dixbh9po/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2530295052,1869844746&fm=15&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">想做什么就去做吧！</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
写一些有趣的事情，比如学习呀，就很有趣的！
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>明天把JS基础全部复习完毕，笔记写完，并且把笔记好好看一遍。(已完成)<br>————2020-11-24<br>今天算是把JS基础全部复习完毕了笔记写了。刚刚完成没有啥心思看的。<br>————2020-11-25</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>最近打算减肥了，减到120位目标<br>     ————2020-11-26</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>明天上午没有9点起来我就是狗（已完成）<br>     ————2020-11-28<br>     没错，我就是狗，九点起来。然后在床上心理斗争半个小时学习的狗。<br>     ————2020-11-29</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>自己打算安排八天学习完AJAX，但是一定要去复习一遍，大致看一遍。（未完成）<br>今天是学习第二天<br>    ————2020-11-29</p>
<p>没有写完笔记啊，最近给自己安排了vue学习的任务，在赶vue的任务。这有点难过。<br>   ————2020-12-05<br>        ajax         （已完成）<br>   ————2020-12-07</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>12月份复习完 web JQ  JS高级  写完京东的项目，vue 学习完毕。（未完成）<br>    ————2020-11-29</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>最近学习状态太差了，立一个flag，这周末把vue的组件化开发，和前端交互的视频看完，笔记写到博客上面。<br> ————2020-12-04</p>
<p>今天因为看比赛，没有按时完成任务，该惩罚了，惩罚最近加大学习力度。任务后期安排上。<br>  ————2020-12-06</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>最近两天完成webpack打包和vue-cli3和EL的学习<br>————2020-12-08</p>
<p>webpack打包和vue-cli3和EL的学习 （已完成）<br>————2020-12-10</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>最近把bootstrap的框架的项目学习完毕，在12月16号之前完成<br>————2020-12-11</p>
<p>bootstrap的框架的项目学习  (已完成）<br>————2020-12-14</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>把自己设置的第四个月的目标完成<br>————————————–2020-12-15</p>
<p>————————————–2020-01-15</p>
</p>


<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>用7天时间巩固自己的html，看面试题目。<br>——————–2020-12-21</p>
<p>今天任务没有完成，因为在期间又学习了其他知识点。这个没有完成任务让我明白了一些事情。<br>                                       (未完成)<br>————————————–2020-12-28</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>把JS知识复习完毕，外加flex布局，rem布局。<br>——————–2020-01-20</p>
<p>————————————–2020-01-31</p>
</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<br>
 ------------------------------------------------------- 2020.11.19.22:30。
</p>



</div>]]></content>
      <categories>
        <category>一天一个小目标</category>
      </categories>
      <tags>
        <tag>学习的小目标</tag>
      </tags>
  </entry>
  <entry>
    <title>node基础学习</title>
    <url>/2020/ckpf35kqi007cjov480o0akjo/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3528204560,2782467089&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">node.js基础学习</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
第一次接触后端，node.js语法的学习
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>Node.js模块化开发</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>模块成员的导出：<br>文件夹名字： 02.module-a.js<br>const add &#x3D; (n1, n2) &#x3D;&gt; n1 + n2;<br>exports.add &#x3D; add;<br><br><br>模块成员的导入：<br>文件夹名字： 02.module-b.js<br>const a &#x3D; require(&#39;.&#x2F;02.module-a.js&#39;);  &#x2F;&#x2F;a.js 里面的 .js 可以省略<br>console.log(a.add(10, 20));<br><br><br>模块成员导出的另一种方法：<br>文件夹名字： 03.module.exports-a.js<br>const getting &#x3D; name &#x3D;&gt; &#96;你的名字是 $&#123;name&#125; &#96;;<br>module.exports.getting &#x3D; getting;<br><br>模块成员的导出：<br>文件夹名字： 03.require-b.js<br>const a &#x3D; require(&#39;.&#x2F;03.module.exports-a.js&#39;);  &#x2F;&#x2F;a.js 里面的 .js 可以省略<br>console.log(a.getting(&#39;zhangsan&#39;));<br></code></pre></td></tr></table></figure>

<p>exports 是module.exports 的别名（地址引用关系），导出对象最终以module.exports为准<br>以下代码为参考事例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const names &#x3D; name &#x3D;&gt; &#96;你的名字是$&#123;name&#125;&#96;<br>const x &#x3D; 100;<br>exports.x &#x3D; x;<br>module.exports.names &#x3D; names;<br><br>module.exports &#x3D; &#123;<br>    name: &#39;李四&#39;<br>&#125;<br><br><br>const b &#x3D; require(&#39;.&#x2F;03.module.exports&#39;)<br>&#x2F;&#x2F; console.log(b.names(&#39;张三&#39;));<br>console.log(b);  &#x2F;&#x2F;打印结果 &#123;name: &#39;李四&#39;&#125;<br></code></pre></td></tr></table></figure>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>系统模块： fs文件读取操作</strong><br>f:file 文件 ，s:syetem 系统 ，文件操作系统</p>
<p>文件夹名字： 05.readfile.js<br>// 1.通过模块的名字fs 对模块进行引用<br>const fs = require(‘fs’);</p>
<p>//2.通过模块内部的readFile读取文件内容<br>fs.readFile(‘./01.helloworld.js’,’utf8’,(err,doc)=&gt;{<br>//如果文件读取出错err 是一个 对象 包含错误信息<br>//如果文件读取正确 err 是null<br>//doc 是文件读取的结果<br>console.log(err);<br>console.log(doc);<br>});</p>
<p>在命令窗口执行  node .\05.readfile.js<br>打印 null<br>打印 01.helloworld.js 文件里面的执行结果</p>
<hr>
<p><strong>系统模块： fs文件写入操作</strong><br>文件夹名字： 06.writefile.js<br>// 1.通过模块的名字fs 对模块进行引用<br>const fs = require(‘fs’);</p>
<p>//fs.writeFile(‘写入的文件路径(若不存在，会自动生成一个文件）’, ‘content(写入的内容)’ ,err（）<br>// err=null表示写入成功<br>fs.writeFile(‘./demo.txt’,’即将要写入的内容’,err=&gt;{<br>    if(err!=null){<br>    console.log(err);<br>    return;<br>}<br>console.log(‘文件写入成功’);<br>})</p>
<p>在命令窗口执行  node .\06.writefile.js<br>打印 文件写入成功<br>并且生成 demo.txt文件夹，里面存有文字: 即将要写入的内容</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>系统模块path 路径操作</strong><br>路径拼接语法<br>path.join(‘路径’，’路径’,…)<br>文件夹名字： 07.path.js<br>const psth = require(‘path’);<br>const finalPath = path.join(‘public’,’uploads’,’avatar’);<br>console.log(finalPath);</p>
<p>在命令窗口执行  node .\07.path.js<br>打印结果: public/uploads/avatar</p>
<p><stron>相对路径 VS 绝对路径</strong><br>在读取系统文件的时候，相对路径容易出错。如下图所示<br><img src="/image/node/xiangduilujin.png"><br>在读取系统文件的时候，最后使用绝对路径，如下图所示<br>使用  <code>__dinner</code>获取当前文件所在的绝对路径<br><img src="/image/node/juedui01.png"><br><img src="/image/node/juedui02.png"></p>
<p><stron>那么什么是相对路径，什么是绝对路径呢？</strong><br>相对路径实际就是调用当前目录下面的文件<br>相对路径：aa/Image/image1.jpg<br>只有用到了: ../ :上一级目录  ；  ./ : 当前目录  ;  /:代表文件所在的根目录  都属于相对路径</p>
<p>绝对路径跟相对路径一样调用文件，但绝对路径是一个固定地址。<br>绝对路径：C:\Documents and Settings\Administrator\桌面\aa\image\image1.jpg</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>第三方模块(指包)</strong><br><strong>获取第三方模块:</strong><br>1.下载: npm install 模块名称<br>2.卸载模块: npm uninstall   模块名称</p>
<p><strong>本地安装和全局安装</strong></p>
<ol>
<li>命令行工具: 全局安装</li>
<li>库文件: 本地安装</li>
</ol>
<p><strong>第三方模块nodemon</strong><br>使用步骤:</p>
<ol>
<li>使用 npm install nodemon -g 下载它 （-g 是全局安装）</li>
<li>在命令行工具中用 nodemon 代替node命令</li>
<li>当我们修改了文件，想要执行的时候，只需要保存文件夹，就会自动执行代码，不需要重新执行 node 文件夹名称</li>
</ol>
<p><strong>第三方模块 nrm </strong><br>nrm : npm 下载地址切换工具<br>nrm默认的下载地址在国外，国内下载速度很慢<br>使用步骤:</p>
<ol>
<li>使用 npm install nrm -g 下载它(全局安装格式 -g)  </li>
<li>查询可用下载地址列表 nrm ls</li>
<li>切换 npm 下载地址 nrm use 下载地址名称</p>


</li>
</ol>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p> ——————————————————- 2020.11.20.20:33。</p>
</p>



<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>安装</strong></p>
<p>// 临时安装 —临时下载的资源<br>npm / cnpm install <code>&lt;packageName&gt;</code> packageName</p>
<p>// 全局安装 — 任何一个目录内部都能访问到<br>npm / cnpm install <code>&lt;packageName&gt;</code> -g / –global</p>
<p>// 项目依赖<br>npm / cnpm install <code>&lt;packageName&gt;</code> -S / –save</p>
<p>// 开发依赖<br>npm / cnpm install <code>&lt;packageName&gt;</code> -D / –save-dev</p>
<p>安装指定版本的模块<br>npm / cnpm install <code>&lt;packageName@*.*.*&gt;</code> </p>
<p>更新<br> 更新指定版本的模块<br> npm / cnpm install <code>&lt;packageName@*.*.*&gt;</code> </p>
<p>删除<br> npm / cnpm uninstall <code>&lt;packageName&gt; / &lt;packageName@*.*.*&gt;&gt;</code> </p>
<p>查看模块(安装哪些npm模块)<br> npm list </p>
<p>yarn<br>    <code>https://yarn.bootcss.com/</code><br>    快速、可靠、安全的依赖管理工具。<br>    添加模块<br>        yarn add [package]<br>        yarn add [package]@[version]<br>        yarn add [package]@[tag]<br>    删除模块<br>        yarn remove [package]<br>    更新模块<br>        yarn upgrade [package]<br>        yarn upgrade [package]@[version]<br>        yarn upgrade [package]@[tag]<br>    查询模块</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p> ——————————————————- 2020.01.21.21:27</p>
</p>


</p>




</div>]]></content>
  </entry>
  <entry>
    <title>拜读红宝石第一遍</title>
    <url>/2020/ckpf35krs008ijov4bthighrb/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=859114433,2326616268&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">拜读红宝石书籍</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
一本JS最受欢迎的书籍，我来看了
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
第 1 章 什么是 JavaScript：

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>



</div>]]></content>
  </entry>
  <entry>
    <title>学习路上的小坑</title>
    <url>/2020/ckpf35krr008gjov4czv0hr7j/</url>
    <content><![CDATA[<blockquote>
<p>1.对应第三方模块的版本不合适的话，安装的时候需要指定版本安装。<br>版本的过高或过低有可能会出现运行出错，所以有时候需要安装的指定版本、</p>
</blockquote>
<a id="more"></a>

<p>解决方案：<br>例如 <code>npm install mine@2.1.2</code> 指定安装 mine模块的 2.1.2的版本</p>
<p>2.vscode格式化Vue出现的问题：单引号变双引号<br>在vue的前端工程化里面，要是修改代码会，自动保存后会把代码里面的单引号编程双引号。</p>
<p>解决方案：<br>在项目根目录下新建文件：<code>.prettierrc.json</code><br>内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#123;<br>    &quot;singleQuote&quot;:true,<br>    &quot;semi&quot;:false<br>&#125;<br></code></pre></td></tr></table></figure>

<p>参考资料:<a href="https://www.jianshu.com/p/ade598262e2d" target="_blank" rel="noopener">https://www.jianshu.com/p/ade598262e2d</a></p>
]]></content>
  </entry>
  <entry>
    <title>其实你不知道的很多</title>
    <url>/2020/ckpf35kr8007wjov401ym2f83/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="aec4ba4bddeabb0043b439f044785793f882e2cf0bbf7400135b16c1521cd014">dd25f063b3d2773eca8ac7abc99a6da9fdd22198f658616d1547392d3afdd3ca4730f40bccc35dd9c657cdaf36f32af88afd1c1d9f468ad7364ff87366f9b8164252b63d52afb681febb85fc7aa62fac1cc1bb8a2e17d7ecf89a33f1886b842cc90c7e1fa711ad88dfc7eac87e607c2862254bb6ae3d98c194af6164ced7134f6d4b5edbf31faed5745c776a3e3917a1cb935b08d49e97a049c920f677a7d6f712f517f82187ed3ff6d04fc67ab581de75350a6294057711a532f683dca9260c20a105ae4343e5dd849f6015609c8afc0e7158ed3ad918beed15bbfcbca56fc17a8b01fcf260a8a4b0903394a8e4d968acc4a5372db22f6139dc7510205ccd983b43c04b63dd9f5a4e8eb6c3083a78f1101a4103d92d91a5f655a2b1a86aaf725df6bd3e4c9ceb1e87c85f897dc932cc05b0ad69179277440bd533b236bac82f378446810a732774f78afb5fd6c39180485669b01b2482072968176cfa61d9eec6ea5ffd22cc6a939ea29053eba13e5a1ce01aeeabdf9ea86a3c96e663f90b9003cc653682392b4238f82246de025fdd14b8a98fa3f3e9a6ee07cbd268ab7791ce0bab26d11c2533f88dc92960ece6514e103f2acdda84cdaf469407f5993713aeaf84cd04c0277822867a9f87a426ce042ae1cd8858d2167a9885d2854afd0df8340833d2742468ae0c907e13f37776fd369c60fde685facbc455f2eb2296b500b49fd0a654a075d864570265ab41adb1d17af43ca955b5f13e6a580c294ba84f3d885827c0f80323a462ae9c2ef55ff3912302ff0017b89fe59789cb08630a2698067fde687acb41fb62538156ef07e753cce0c4aee5d24bf9944698b6dca7abe5ca091f5c2a43a8391766b6afb4b2e5418bc227356b6a5cf22b492d0f33deec7de4fa4be30d3e2cf5c5aa0f7614b0261643df686ef2d0737f5a7edd602cf0afa9c24642371d4ebeef7c81bef61abc245309fa21602283c311168395dc3cd86f261aa4621aa4142aba1f12b4dce934f3abd0e2f3182d3f6539b12fac465fd7d73418323f04d2e961609dff8d5afdb8a57a74777ae15db336a23429cd8b95c575adf840c9809b482a8103c59323450cf8d743b1f118e1ec8026c9743c6f3de80cc976adcbb7a5b080c55506bce2cbf3cbc8c2542d4e7cd7afe8b2d3fdc5c717a32fc564f6bad95253b54eb18140316b127ede57d140ef70be826e229fd6f0169bbf5611dab844fb6571f9e9f5c95cd2b95132997393ee956c90db3ef8b94d0a6552bdfeda61662a0b12ca6f61d30848338d41d3f6a5c6916ce148bd59e508f18747dec6164eaaa2a9863e315b285500385461a84eaa59d14fca943124a254f828f49b90b5c9ef2538c0a81d5352652f775426dcf5dbf44e1e055d987beb0257eb19a880249452a3b88432c3b4952f3f57438b8d30b31c9a6a1999f5978c8d9359518f6f1589c9f6bee34b528519ad17e8c159fb61772f4d027d6c5f9f50ff80329b3a5150e87430a15789a1ca1e507ee50a3a141860e7e8cc28226cccbdb89972727f303f65847ab742e78b014d25ce9b3c4fc0ccc0cf0247539c5f41bcdd681b75ef91bb619721d8ffdfbc6d526924a49887e747dbe7c37b40c65cd63261198e07d78299883db9834102756a010c16e487d6030048bf85174b1185fb64c9a2e890981b7e8786071b07818e8d5c1ab4fe8d584fdd5a9fbf726a40dc8b6ad0d45c5e2aa1b8c6d9e5925b405ffcc5d808200c42fb94f1ac811134070c4fe5aaa65edabe5de93d71ad55ebeafc3c2614e824e55d3a890a0fc5bd01e3c3987a852152b55a0e95a326602fd10ac261947c2e67224977d399a2d11944caab1bfc677e9a6b438a5fa3f4be303ef64679dcf8d298684953f1f50529ff3911e8b3feefa1ec85fa99bee112a8fb3fb8fb98ab6577d12a3df9c9ce1cc86701f2187ba158fba4757393fada58392a0c827c30ef686ffc5e8796c741091987c2273bb3153d13717915a085b5329e5e6ba987ea5c0e9dd87b7536a12b6ea0aad2b8c33e25b4ac3a5f4667c599c2afa2fc92590c0340369726341cdc9e6f8052eb16525a63365731101c621464f95b9a83cdbb56253e713510e4b76ca017d7c2e1fedf502588d409861111050168ece6cb42ebb7a37ce835f0e00231d51b407087238234ca5be71b6e89a6062db9729948a25a363a96c39525e7cb56484f9ba8cb45ad8acf6dfaa05bd8fc9fc146bb33eaa797d6faec87e4b427d4394faeb5464adf14bfa77da344e2542baf57426a9ff120749124e94d48518ed1b52298f2ba67f9e2b4f2af6e9ce968019bef7afeb4f4a4750368afccc5ff775c4d603d39ce40278b9b94381278195450c93273a0f5c0aa4138c66f54b63907071f1bf290f6cc5eeba7be0486debd3f5ac57f7e57c84846c5f90a068f44b0d6e41adfccf8060b50f80d9741fdf84c77a6658dbac4360cd811cacb20365eaa68c97c2c0c0d2121681714741e9dad82e40b7155201ebafea7760f0883f0bed503aa858afa760b6adbbd986e26c059dbb36ea8c1868e1a182a96cf6a380b4d767c013a0921c322d5d5de010ea1c9b1d9dfe9002f6aa108a511c41832c6a95f471575b6f4a4153c5826ec12f922451575a3de8f199d20cfdf2425676b7b8084fd12edec5db5f5928f1cae58567c8876f52df1dd080225c29922d4495787ef019b76bd2450bd9bbe5c7aa933d4a6491bc2bd4d5d85e55b3a24ccc5169e29ca0c90978db20054a397254db7e83e12ada13d3bc8a4b584e5837b9445db1f31f0678c066121f7a3ab722a0c9368018f1ccbb6c2dcc555fed42e7cdac7b947092022e1e203623043da17a76454a780aefe31010319d1947f6150ea2277c4911e9510458c6a0ba39be61e0b261603688e453e37bce9169de4348df0b5acece60834e2cbecb01e2c545a3b860c1e6ffd58fcc2bef73996f7a81873764359e4fe14bd189a3fd1a0e5efcf97b38b4da91683323db654dc75cb64b9aefbdc84d55adabb06d64e6c215e99d5b3f771436aa898437454cb41a49aa750b562080952c9d26a60e17175c382bdf22bcd159cf4441d8f4cccc5b953ec80a5fbdb6e40c2d855673e6a11d4b3109e83bf90b0285e45e70eee208a781ff04a3e00d13d4fa41f5cc383168d4f82d27ab3d3b418d2bcda517ad2073407a72303cf61d25a09b96d4a6b5bb0d9fe51b1fee4286f800b534c2663a602a611c4a5b21e487828a016448f64483635e289a17f764042187705853f176698028deae2aa759500e3da39181a37d0c33f09f32d4888e7982292811c1cc9350353d11f77d3ab920cb1a35f5ee029d30c7dc281815278c4a55f506a5e78e878ca53efc0734130cc0602e63c61a99db86a20749edaafdc6dd5823ad17a4ee7a4c19eda01d8ea28f12df511908eadcbe3ff23ce0ce5ce12f0df7a8b9e87de1415df2c650db01380833f782e118d6278349c031fbb62214edc415482351ea6f7ab4f07cdb807b6175639c78bd8fed1015cdf8ded9e7a8d2f620ab9a09ea2fcad08caec40b862531a6598a422fa69b4748edb9965d2d44f1bc77aac6840fa29bdd4cf74bfe3394d7ba04ba63ed6c3e2bd371446f846634ae72961812614a68d650bea984bac26820b0a78c88641453f599c6a6bdc99f7ff3527672c888f50e16cce41c6a16aee12b317f99a96fa6f21200112a5c1854f73a9f968966b9a2e2e1a09aef0d17f591c83ed15aa25bbc63e6644c72f208f117fd5022afd6bd8360afee20285fb8c3b0b26bb4b71e111fdc107fe7abfa97a1d85d9baa6274c359dc82029ead5f053b58812f4dfc5d3109ee1df22ad20ca5067fe05da5576c62ceb312f8d2e7b09e6e161562cfff801a9da1b3a3ab511e66d90a7c98be86a4891c68c5b9bc66e298af1e51f210fc1ddb4c0be0a585afdd22b9d2c4014e37ed86af23f32257eaa7bd6446b5ec390399e4eb6b73ccb6ff21636398f1038204aaab2ee6518cf96d5eee04f21a424e5189241858c38b4e0426ae8790af5c577659eb76eba7847df484cde0b395752f33a55520821e945e0d3af4fffad8f56d52a7d7206a8be94df2d911073e17d3982da61c81129a8fbf9e2bc075dd2442deb8adef5e5c86bf66effc80514e43d59aa1991494d6b5490890e3bdf33a20f8de8acf410d138d98bfe3b40593b02b0148e88f4692997ae5b004bf6b08e67710bd48ab5308db9168f7516b4781770720113585e9182fa883174a2a22f3e18f762f9dffe03fa55a7e3cef9d18c506693da1f8b9abf78d0351e5ad32ce678d63aa97648543a17899ab2020a828e003ca668916f1ba5f19ed8dda8f91be8339473d982050955889cc1e2f692c66f203ad0fda437d4a63dae2bcbe628b211c6cd081403394a1cd35a33be28140ce475ca24929b0b76256acd3527d54ad1da628dbac3f6e1bf6b3524353a69fd27aa37f2a19cbbd2734642ebe38b3e03269ebbebf485fc0ca2f5895357b8fa972cf2ada3941956721a30533f11926a21d70c4f2e7eabf89a67f8aa1857071f6e4645c9033dbe9838e93cb979220e3f2501f34dececf6865d2bfb2564bbabbd411d8d1baa60f6b2b828d3dc556f207ce4eb3a063fddb539b041906b247f5414f09d4414ef849b7373bc77c2a1c2ae32b1cfd8751868205166eee4326b78efd12c3981d705cee9516477de4cc90af3b86807ea909d222a1ebbd18d39d01b0ae0ee6bc81215c6faf84817496d49caefbd753d3c00b52ac778e834a4a5755e9fc94e3315f653a1226362dcb94bca4f8af68daf2504cb1b9e741076630f44c6ca002a8cec35c4aef6ba37e510f6c335e6a6e0cae76c3e494f3acd7f29f085ddb099b5751609e3c70658dcb07f23d0c8a33b78545f45f358970fe254c9781222b695b5383228b3022d86d430747b3ce7572ccfdf0094754c91c98c8097a720f78944620a73bb098bc1450bac8b28ecd974b3ed2e0ce256d1bf45c860381e6adc6a3d8ec2b5c08f5f8a68a3dc52ea881906d295447181eae034d5a8025423cc959985c84014bb8ad662ce8bb5409565421f33abd5d12c4082802ee18136dfcfb5b1f5b94c9ca6b8685baed300963c13eeb0ade3d61916c318b10fb885d618996e135fab2eb2c8afb3dd339bea5e92cccf8b6ba268ee04bc8d4839fdc3ae209de3263418db5038100b09e647dc149ebe71cf7bcc3a6bf923c1ac3b440a85b4e5df770a7246e5a5debaf3f8a43d3d3829a72e4997504f1094db6bcec935b828dbecb8d2d6aafff8488abab911a31a805dadc1ddb9bf7151377646fe71fc6bb867907d85c94ab35bea0f2459cf771e9fbed3d0d989e6b872d5eccfff0ad8b0c4f4ff47dc34da0ba1c00f92b306e6524ad8634c1c2b45fa937b1010efee0500453db886c360722f6d2b4472c1d354ffe09b7ccd8338256dd5cf43e832257144d9273cb5d3f60e97d4311bf2d48ad69472da828ead15c1764a584cfdb92ee6a669637638c489f29486391459e00732ad4f6d8b78fc951be03968f1ff04a395e7673ea3d4f3bf32025e93ef9ae7fb7d2c6e757738d79b1a63d51001e0085015b4e87ae48dc8baf1c9bb582d225f47f7c0227df252e060b6082df20f833d730ec22cac8409f653186492b530241c2747b0431ee2a2214ee8d42ba1e09d51b104d2c79f1afd94b40f8a8a7d5fa1dc6888c0263b380ac108740ed7e1095c6d2959fa5cf4ebc123ee2ea2424a4c3e234bb6c0e69da760704045be563bcfbec3831fe329401201f91cb0713b2e95b4ce646ade3f2a09ae1edc09a081e7d5d7007483468d6b27</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>作为日记加密</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础复习</title>
    <url>/2020/ckpf35kkt001bjov41rop4hqe/</url>
    <content><![CDATA[<div style="background-color: #CCFF99;">
<img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3966734296,1458622362&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">之前学习的JS进行复习</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
将结合红宝书进行复习JS，加强JS学习
<br>
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>JS变量命名规范:</strong><br>1.不能数字开头  18add<br>2.不能是关键字  var  for<br>3.变量命名必须有意义  age<br>4.遵循驼峰命名法   addFind</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>交换两个变量的值:</strong><br>var temp;<br>var apple1 = 青苹果;<br>var apple2 = 红苹果;<br>temp = apple1;<br>apple1 = apple2;<br>apple2 = temp; </p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>数字型进制:</strong><br>在JS里面 var num = 010<br>输出为 8 表示8进制<br>var num2 = 0xa<br>输出为 10 表示16进制</p>
<p>最大值： Number.MAX_VALUE<br>最小值： Number.MIN_VALUE<br>无穷大： Number.MAX_VALUE * 2<br>无穷小： -Number.MAX_VALUE * 2<br>非数字型：NAN</p>
<p>isNAN() 判断是不是数字类型的。<br>是数字类型返回flase,不是的话返回true<br>console.log(isNAN(12))  // flase<br>console.log(isNAN(‘nihao’))  // true</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>字符串类型:</strong><br>转义符：<br>\n : 换行符<br>\ \ : 斜杠 \<br>&#39; : ‘ 单引号<br>&quot; : “ 双引号<br>\t : tab 缩进<br>\b : 空格 ，b是blank 的意思 </p>
<p><strong>字符串拼接:</strong><br><strong>只要是有字符串参与的拼接都是字符串。</strong><br>console.log(‘12’+12) // “1212”</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>布尔型:</strong><br>true和false在运算中被看做 1 和 0 参与运算。</p>
<p><strong>undefined:</strong><br>如果一个变量声明未赋值 就是undefined 未定义数据类型。<br>var str<br>console.log(str)  // 输出 undefined<br>console.log(undefined + 1) //输出 NAN</p>
<p><strong>null: 空值</strong><br>console.log(null + 1)  // 输出 1  与undefined有区别</p>
<p><strong>检测数据类型 typeof </strong><br>var num = 1 ;<br>console.log( typeof  num)  // 输出的是一个number 数字类型</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>数据类型转换:</strong><br>1.把数字转换成字符串类型<br>toString 方法<br>var num = 10 ；<br>var str = num.toString();<br>console.log(str)</p>
<p>String() 方法<br>var num = 10 ；<br>console.log(String(num));</p>
<p>字符串拼接的方法<br>var num = 10 ；<br>console.log( num + ‘’);</p>
<p>2.把字符串转换为数字类型<br>parseInt(变量) 的转换为整数的方法</p>
<p>var str = “18”<br>console.log(parseInt(str));  //输出 数字类型 18<br>console.log(parseInt(‘3.14’));  //输出 数字类型 3<br>console.log(parseInt(‘3.99’));  //输出 数字类型 3<br>console.log(parseInt(‘120px’));  //输出 数字类型 120<br>console.log(parseInt(‘rem120px’));  //输出 数字类型 NAN</p>
<p>parseFloat(变量) 的转换为小数的方法</p>
<p>console.log(parseInt(‘3.14’));  //输出 数字类型 3.14<br>console.log(parseInt(‘3.99’));  //输出 数字类型 3.99<br>console.log(parseInt(‘120px’));  //输出 数字类型 120<br>console.log(parseInt(‘rem120px’));  //输出 数字类型 NAN</p>
<p>Number(变量)<br>var str = “18”<br>console.log(Number(str));<br>console.log(Number(‘12’));</p>
<p>算术运算 - * /  隐式转换<br>console.log(‘12’ - 0 ) // 12<br>console.log(‘12’ - ‘0’ ) // 12<br>console.log(‘12’ - ‘12’ ) // 0</p>
<p>3.其他类型转换为布尔类型 Boolean(变量)<br>代表 空、否定的值会被转换为false , 如 ‘’ 、 0 、NAN 、 undefined 。、<br>其余值都会被转换为true<br>console.log(Boolean(‘’));             //flase<br>console.log(Boolean(0));             //flase<br>console.log(Boolean(NAN));          //flase<br>console.log(Boolean(null));        //flase<br>console.log(Boolean(undefined));  //flase<br>console.log(Boolean(‘小白’));    //true<br>console.log(Boolean(12));       //true</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>运算符：</strong><br>1.浮点数在算数运算符里会有问题<br>console.log(0.1+0.2) // 0.300000000004<br>console.log(0.7 *  1000) // 7.000000001</p>
<p>前置自增和后置自增的用法：<br>a++:<br>var a = 10<br>a++     //a++ = 11  a = 11<br>console.log(a)  // 11</p>
<p>var a = 10<br>console.log(a++  + 12)  //  a++ = 10  a = 11  结果 22</p>
<hr>
<p>++a:<br>var a = 10<br>++a     //a++ = 11  a = 11<br>console.log(a)  // 11</p>
<p>var a = 10<br>console.log(++a  + 12)  //  a++ = 11  a = 11  结果 23</p>
<p>总结：a++ 和 ++a 单独用法是一样的，但是与其他数字相加的话<br>++a 结果里面的 ++a 和 a 的值都自加 1<br>a++ 结果里面的 a++ 的值不变， a的值加 1</p>
<p>前置自增：先自加 1，变量也自加 1<br>后置自增：先返回原值，变量再自加 1<br>两个单独使用 无区别，开发时使用 a++ 即可</p>
<hr>
<p>= ：等号作用 赋值 把右边的值给左边</p>
<p>== ：判断 判断两边的值是否相等（主要此时有隐式转换）<br>以下把字符串类型的 18 转换成数字类型的 18<br>console.log( 18 == ‘18’)  //true</p>
<p>=== :全等 判断两边的值和数据类型是否完全相同<br>console.log( 18 === ‘18’)  //flase<br>console.log( 18 === 18)  //true</p>
<hr>
<p><strong>短路运算</strong><br>逻辑与短路运算<br>如果表达式 1 为真，即返回表达式2的值。<br>如果表达式 1 为假，即返回表达式1的值<br>而表示式为假的数值: 0  , ‘’ , null , undefined , NAN<br>console.log(123 &amp;&amp; 235)  // 235<br>console.log(0  &amp;&amp; 123 &amp;&amp; 222)   //0</p>
<p>逻辑或短路运算<br>如果表达式 1 为真，即返回表达式1的值。<br>如果表达式 1 为假，即返回表达式2的值<br>而表示式为假的数值: 0  , ‘’ , null , undefined , NAN<br>console.log(123 || 235)  //123<br>console.log(0  || 444 ||12333)   //444</p>
<hr>
<p><strong>三元表达式</strong><br>条件表达式？ 表达式 1 :表达式 2 ;<br>var num = 5<br>var result = num&gt;3 ? ‘是的’ : ‘不是的’;<br>console.log(result)   // 是的</p>
<hr>
<p><strong>switch语句</strong><br>switch（表达式）{<br>    case value1:<br>    执行语句1<br>    break；<br>    case value2:<br>    执行语句2<br>    break；<br>    case value3:<br>    执行语句3<br>    break；<br>    …..<br>    default:<br>    执行最后语句;<br>}</p>
<p>执行思路  利用我们的表达式的值  和 case 后面的选项值相匹配  如果匹配上，就执行该case里面的语句，如果没有匹配上 ，那么执行 default里面的语句</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>for循环语句:</strong> 注意 <code>var str = &#39;&#39;</code>只能用作全局变量<br>*<br>**</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>var str &#x3D; &#39;&#39;<br>for(var i&#x3D;1;i&lt;&#x3D;5;i++)&#123;<br>for (var j&#x3D;1; j&lt;&#x3D;i;j++)&#123;  <br>str &#x3D; str + &#39;&#39;<br>&#125;<br>str &#x3D; str + &#39;\n&#39;<br>&#125;<br>console.log(str);<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

<p>**<br>*</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>var str &#x3D; &#39;&#39;<br>for(var i&#x3D;1;i&lt;&#x3D;5;i++)&#123;<br>for (var j&#x3D;i; j&lt;&#x3D;5;j++)&#123;  <br>str &#x3D; str + &#39;&#39;<br>&#125;<br>str &#x3D; str + &#39;\n&#39;<br>&#125;<br>console.log(str);<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

<p><strong>while循环语句 </strong></p>
<p>while (条件表达式)<br>{<br>循环体代码<br>条件表达式结束的代码<br>}<br>如果while语句里的条件表达式一直为真，会一直循环体里面的代码，进入死循环。<br>要在后面加入条件表达式为假的代码，也就是条件表达式结束的代码</p>
<p><strong>do while 循环语句</strong></p>
<p>do<br>{<br>循环体代码<br>条件表达式结束的代码<br>}<br>while(条件表达式)<br>do while 语句至少会执行一次循环体代码</p>
<hr>
<p><strong>continue 关键字</strong>：退出本次循环，继续执行下次循环<br>for(var i=1 ;i&lt;=5 ;i++)<br>{<br>    if(i==3)<br>    {<br>    continue;<br>    }<br>    console.log(‘我是’+i+’次’)<br>}<br>打印的结果：<br>我是1次<br>我是2次<br>我是4次<br>我是5次</p>
<p><strong>break 关键字</strong>：退出本次循环，不会执行下次循环<br>for(var i=1 ;i&lt;=5 ;i++)<br>{<br>    if(i==3)<br>    {<br>    break;<br>    }<br>    console.log(‘我是’+i+’次’)<br>}<br>打印的结果：<br>我是1次<br>我是2次</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>数组</strong><br>创建数组的两种方式：<br>1.var arr = new Array();<br>2.var arr = [];</p>
<p>遍历数组：<br>var arr = [1,2,3,4]<br>for(var i=0 ;i&lt;4; i++){<br>    console.log(arr[i])<br>}</p>
<p>数组的长度:<br>数组名.length<br>1.数组的长度是元素的个数，不要跟索引号混淆</p>
<p>求数组里面的最大值：<br>var array = [11,23,44,55,1,7,88]<br>var max = array[0]<br>for(var i=0; i&lt; array.length; i++)<br>{<br>if(max&lt; array[i]){<br>    max = array[i]<br>}<br>}<br>console.log(max)</p>
<p>数组转换成字符串：<br>var array = [‘a’,’b’,’c’]<br>var sep = ‘!’<br>var str = ‘’<br>for(var i=0; i&lt; array.length; i++)<br>{<br>str +=array[i] +sep;<br>}<br>console.log(str)</p>
<p>1.新增数组元素，修改数组的长度：<br>var array = [‘a’,’b’,’c’]<br>array.length = 5;<br>console.log(array[3]); // unfined<br>console.log(array[4]); // undefined</p>
<p>2.新增数组元素，修改索引号追加数组元素：<br>var array = [‘a’,’b’,’c’]<br>array[3] = ‘yellow’ //<br>console.log(array); // [‘a’,’b’,’c’,’yellow’]<br>array[0] = ‘aaa’ // [‘aaa’,’b’,c’,’yellow’] 替换原来的元素<br>array = ‘yellow’ // [‘yellow’] <strong>不要直接给数组名赋值，否则里面的数组元素都没有了。</strong> </p>
<p>3.建立一个数组，里面存1-10的整数<br>var arr =[]<br>for(var i=0 ;i&lt;10; i++){<br>    arr[i] = i+1;<br>}<br>console.log(arr)</p>
<p>4.筛选数组：<br>var arr = [11,2,33,4,56]<br>var newArr = [];<br>var j = 0;<br>for(var i=0;i&lt; arr.length; i++ )<br>{<br>    if(arr[i]&gt;10)<br>    {<br>      newArr[j] = arr[i];<br>      j++;<br>     }<br>}<br>console.log(newArr);</p>
<p>var arr = [11,2,33,4,56]<br>var newArr = [];<br>for(var i=0;i&lt; arr.length; i++ )<br>{<br>    if(arr[i]&gt;10)<br>    {<br>      newArr[newArr.length] = arr[i];<br>      j++;<br>     }<br>}<br>console.log(newArr);</p>
<p>5.翻转数组：<br>var arr = [‘red’,’blue’,’skyblue’];<br>var newArr=[];<br>for(var i=arr.length-1;i&gt;=0;i–)<br>{<br>    newArr[newArr.length] = arr[i];<br>}<br>console.log[newArr];</p>
<p><strong>6.数组冒泡排序：</strong><br>var arr = [5,4,3,2,1];<br>for(var i = 0; i&lt;=arr.length -1;i++)<br>{<br>    for(var j=0;j&lt;=arr.length-i-1;j++)<br>    {<br> if(arr[j]&gt;arr[j+1])<br> {<br>var temp;<br>temp = arr[j];<br>arr[j] = arr[j+1];<br>arr[j+1] = temp;<br> }<br>}<br>}<br>console.log(arr)</p>
<hr>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>函数:</strong><br>function 函数名 (形参1，形参2…)<br>{<br>函数体<br>}<br>函数名(实参1，实参2….);</p>
<p>求任意两个数之间相加:<br>function getSum   (start , end)<br>{<br>    var  sum =0<br>    for(var i=start ;i&lt;=end ;i++)<br>    {<br>         sum+=i;<br>    }<br>    console.log(sum);<br>}<br>getSum(20,100);</p>
<p>形参和实参匹配的问题：</p>
<p>1.形参和实参的个数一致时，正常输出结果<br>2.实参的个数大于形参时，会取到形参的个数，后面多余的实参不计<br>function getSum (num1,num2)<br>{<br>num1+num2     // 1+2<br>}<br>getSum(1,2,3);<br>3.实参的个数小于形参时，多的形参定义为undefined,结果为NAN<br>function getSum (num1,num2)<br>{<br>num1+num2     // 1 + undefined = NAN<br>}<br>getSum(1);</p>
<p>函数的返回值格式：<br>function 函数名 ()<br>{<br>  return 需要返回的结果<br>}<br>函数名();</p>
<p>函数名（）=return 后面返回的结果<br>function getReturn ()<br>{<br>  return 6666<br>}<br>console.log(getgetReturn()); //打印6666</p>
<p>求任意两个数的和<br>function getSum (num1,num2)<br>{<br>  return num1+num2<br>}<br>getSum(1,2);<br>console.log(getSum(1,2));  //打印 3</p>
<p>利用函数求两个数的最大值<br>function getMax (num1,num2)<br>{<br>  return num1&gt;num2? num1:num2;<br>}<br>console.log(getMax(33,2));  //打印 33</p>
<p>利用函数求数组中最大值<br>function getArrMax(arr)<br>{<br>  var max = arr[0]<br>  for(var i =1; i&lt; arr.length; i++){<br>  if(arr[i]&gt;max){<br>  max = arr[i]<br>}<br>}<br>return max<br>}<br>  var re =  getArrMax([1,2,3])<br>  console.log(re)</p>
<p><strong> return 注意点：</strong><br> 1.return后面的代码不会被执行<br> 2.return只能返回一个值(返回最后一个值):  return num1,num2;  //返回num2<br> 3.可以利用数组来返回多个值 return [num1,num2];</p>
<p> 函数若没有return 返回undefined<br> function getReturn ()<br>{</p>
<p>}<br>console.log(getgetReturn()); //打印 undefined</p>
<p>break,continue,return 的区别<br>1.break:结束当前的循环体（如for while）<br>2.continue:跳出本次循环，继续执行下次循环（如for while）<br>3.return:不仅可以退出循环，还能够返回return语句中的值，同时还可以结束当前函数体的代码。</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>arguments的使用:</strong><br>arguments用来存储所有传递过来的实参<br>function fn ()<br>{<br>console.log(arguments); //打印 [1,2,3]<br>}<br>fn(1,2,3)</p>
<p>arguments展示的是一个伪数组<br><strong>伪数组:</strong><br>1.具有数组的length属性<br>2.按照索引的方式进行存储。<br>3.没有数组的真正的方法 push() pop()等等</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>函数调用另一个函数</strong><br>function fn1 ()<br>{<br>    console.log(111)<br>    fn2();<br>}<br>fn1();</p>
<p>function fn1 ()<br>{<br>    console.log(222)</p>
<p>}</p>
<p>fn1 函数打印结果 111  222</p>
<p><strong>函数的两种声明方式</strong><br>1.利用函数关键字自定义函数（命名函数）<br>function fn()<br>{</p>
<p>}<br>fn();<br>2.函数表达式（匿名函数）<br>var fun = function()<br>{<br>    console.log(‘我是匿名函数’)<br>}<br>fun();</p>
<p>(1) fun 是变量名  不是函数名<br>(2) 函数表达式声明方式跟声明变量差不多，只不过变量里面存的是值，而函数表达式里面存的是函数<br>(3) 函数表达式里面也可以进行传递参数</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>javascript作用域:</strong><br>1.javascript作用域 ：代码名字（变量）在某个范围内起作用和效果 目的是为了提高程序的可靠性更重要的是减少命名冲突<br>2.js作用域（es6）之前： 全局作用域     局部作用域<br>3.全局作用域: 整个script</p>
<p><strong>全局变量</strong><br>在全局作用域下的变量  在全局下都可以使用<br>如果一个变量这样赋值  num = 10 前面没有声明 var 这样的num 为全局变量</p>
<p><strong>局部变量</strong><br>在局部作用域下的变量   后者在函数内部的变量就是  局部变量<br>注意: 函数的形参也可以看做是局部变量</p>
<p><strong>从执行效率来看全局变量和局部变量</strong><br>1.全局变量只有浏览器关闭的时候才会销毁，比较占内存资源<br>2.局部变量 当我们程序执行完毕就会销毁，比较节约内存资源</p>
<p><strong>块级作用域</strong><br>块级作用域: 只在代码块里面起作用的。{ var num = 10 } num只在 {} 里面起作用<br>js在es6之前没有块级作用域<br>if(3&lt;5)<br>{<br>    var num = 10<br>}<br>console.log(num) //在ES6之后是打印不出10 ；es5是可以打印 10</p>
<p><strong>作用域链</strong><br>作用域链: 内部函数访问外部函数的变量，采用的是链式查找的方式来决定去哪个值<br>就近原则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>var num &#x3D; 10<br>function fn()&#123;<br>	var num &#x3D;20;<br>	function fun()&#123;<br>		console.log(num)  &#x2F;&#x2F;打印  20<br>	&#125;<br>	fun();<br>&#125;<br>fn();<br>&lt;&#x2F;p&gt;script&gt;<br></code></pre></td></tr></table></figure>

<p><strong>JS预解析</strong><br>1.我们js引擎运行js 分为两步 : 预解析  代码执行<br>(1).预解析  js引擎把js 里面所有的  var  还有 function 提到当前作用域的最前面<br>(2).代码执行  按照代码书写顺序从上往下执行<br>2.预解析分为 变量预解析（变量提升） 和 函数预解析（函数提升）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">案列1: 用到了变量的提升 注意:var fun &#x3D; 函数体    只需提升变量，函数体不提升。<br>fun();<br>var fun &#x3D; function()<br>&#123;<br>	console.log(222)<br>&#125;<br>&#x2F;&#x2F;相当于执行了以下代码<br>var fun<br>fun();<br>fun &#x3D; function()<br>&#123;<br>	console.log(222)<br>&#125;<br><br><br><br>案列2: 用到了变量的提升 和函数的提升<br>var num &#x3D; 10;<br>fun();<br>function fun()&#123;<br>	console.log(num);<br>	var num &#x3D; 20;<br>&#125;<br>&#x2F;&#x2F; 相当于执行了以下代码:<br>var num;<br>function fun()&#123;<br>	var num;<br>	console.log(num);  &#x2F;&#x2F;打印undefined<br>	 num &#x3D; 20;<br>&#125;<br>num &#x3D; 10<br>fun();<br></code></pre></td></tr></table></figure>

<p><code>var a = b = c = 9; 相当于 var a = 9 ; b = 9; c = 9; 这里的 b c 看做全局变量,没有var声明</code><br><code>集体声明变量 var a=9,b=9,c=9 ;这里的 a = b = c =9</code></p>
<hr>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>JS对象</strong><br>JS对象:由属性和方法组成的。<br><strong>1.利用对象字面量创建对象</strong><br>var obj = {};</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var obj &#x3D; &#123;<br>	uname: &#39;张三丰&#39;,<br>	age: 18,<br>	sex: &#39;男&#39;,<br>	&#x2F;&#x2F;sayHi 方法<br>	sayHi: function()&#123;<br>		console.log(&#39;hi~&#39;);<br>	&#125;<br>&#125;<br>&#x2F;&#x2F;调用属性的方法<br>console.log(obj.uname);<br>console.log(obj[&#39;age&#39;]);<br>&#x2F;&#x2F;调用方法<br>obj.sayHi();<br></code></pre></td></tr></table></figure>

<p><strong>变量 属性 函数  方法的区别</strong><br><code>1.变量和属性的相同点  他们都是用来存储数据的</code></p>
<p><code>变量  单独声明并赋值  使用的时候直接写变量名  单独存在</code><br><code>属性  在对象里面不需要声明的  使用的时候必须是  对象.属性</code></p>
<p><code>2.函数和方法的相同点  都是现实某种功能  做某件事</code></p>
<p><code>函数是单独声明  并且调用的  函数名() 单独存在</code><br><code>方法 在对象里面 调用的时候  对象.方法()</code></p>
<p><strong>2.利用new Object创建对象</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var obj &#x3D; new Object();  &#x2F;&#x2F;创建了一个空的对象<br>obj.uname &#x3D; &#39;张三丰&#39;;<br>obj.age &#x3D; 18 ;<br>obj.sayHi &#x3D; function()&#123;<br>	console.log(&#39;Hi~&#39;)<br>&#125;<br><br>&#x2F;&#x2F;调用属性的方法<br>console.log(obj.uname);<br>console.log(obj[&#39;age&#39;]);<br>&#x2F;&#x2F;调用方法<br>obj.sayHi();<br></code></pre></td></tr></table></figure>
<p><code>注意 利用new Object创建对象 里面的 O 是大写的</code></p>
<p><strong>3.利用构造函数创建对象</strong><br>为什么要使用构造函数来创建对象:<br>前面两种创建对象一次只能创建一个对象，如果要创建多个对象要重复使用代码。</p>
<p>构造函数: 把对象里面一些相同的属性和方法抽象出来封装到函数里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">function Star (uanme ,age,sex)&#123;<br>	this.uname &#x3D; uname;<br>	this.age &#x3D; age;<br>	this.sex &#x3D; sex;<br>	this.sing &#x3D; function(sang)&#123;<br>		console.log(sang);<br>	&#125;<br>&#125;<br>var ldh &#x3D; new Star(&#39;刘德华&#39;, 18,&#39;男&#39;)<br>console.log(ldh.name);  &#x2F;&#x2F;打印刘德华<br>console.log(ldh[&#39;sex&#39;]); &#x2F;&#x2F;打印 男<br>ldh.sing(&#39;冰雨&#39;)<br><br>var zxy &#x3D; new Star(&#39;张学友&#39;, 19,&#39;男&#39;)<br>console.log(zxy.name);  &#x2F;&#x2F;打印张学友<br>console.log(zxy[&#39;sex&#39;]); &#x2F;&#x2F;打印 男<br>zxy.sing(&#39;李香兰&#39;)<br></code></pre></td></tr></table></figure>
<p><code>注意：</code><br><code>1.构造函数的名字首字母要大写</code><br><code>2.构造函数不需要return 就可以返回结果</code><br><code>3.调用构造函数需要要用 new</code><br><code>4.只要new Star() 调用函数就创建一个对象 ldh{}</code><br><code>5.属性和方法前面必须使用this指向</code></p>
<p>1.构造函数泛指的某一大类<br>2.对象特指是一个具体的事物<br>3.我们利用构造函数创建对象的过程称为对象的实例化。</p>
<p><strong>new关键字的执行过程</strong><br>1.new构造函数可以在内存中创建一个空的对象<br>2.this就会指向刚才创建的空的对象<br>3.执行构造函数里面的代码  给这个空的对象添加属性和方法<br>4.返回这个对象（构造函数里面不需要return了）</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>遍历对象</strong><br>var obj = {<br>    name: ‘越前’,<br>    age:18 ,<br>    sex: ‘男’<br>}</p>
<p>for(var k in obj)  //for in 里面的变量我们常用的是 k 或者 key<br>{<br>    console.log(k)  // k 变量 输出得到的属性名 name age sex<br>    console.log(boj[k]) //boj[k] 得到的是 属性值<br>}</p>
<hr>
<p>对象分为: 自定义对象  内置对象  浏览器对象</p>
<p><strong>内置对象:</strong><br>Math数学对象: 不是一个构造函数，不需要new来调用，直接使用里面的属性和方法即可<br>console.log(Math.PI); //一个属性 圆周率<br>console.log(Math.Max(1,99,22));  // 99<br>console.log(Math.Max(-1，-10));  // -1<br>console.log(Math.Max(-1，-10，’longma’));  // NAN 非数字类型<br>console.log(Math.Max());  // -Infinity 负无穷大</p>
<p><strong>封装自己的函数对象</strong><br>var myMath {<br>    PI: 3.1415926,<br>    max: function(){<br>    var max = arguments [0];<br>    for(var i=1;i&lt; arguments.length;i++)<br>    {<br>        if(arguments[i]&gt;max)<br>        {<br>            max = arguments[i];<br>        }<br>    }<br>    return max ;<br>},<br>min:function(){<br>    var min = arguments [0];<br>    for(var i=1;i&lt; arguments.length;i++)<br>    {<br>        if(arguments[i]&lt; min)<br>        {<br>            min = arguments[i];<br>        }<br>    }<br>    return min ;<br>},<br>}</p>
<p>console.log(myMath.PI)<br>console.log(myMath.max(1,2,3,4))<br>console.log(myMath.min(1,2,3,4))</p>
<p><strong>Math绝对值和三个取整方法</strong><br>//1.绝对值方法<br>console.log(Math.abs(1));  //1<br>console.log(Math.abs(-1));  //1<br>console.log(Math.abs(‘-1’)); // 隐式转换 会把字符型 -1 转换成数字型，结果还是 1<br>console.log(Math.abs(‘越前’));  //NAN 非数字类型</p>
<p>//2.三个取整的方法<br>//(1) Math.floor() 向下取整<br>console.log(Math.floor(1.1));  // 1<br>console.log(Math.floor(1.9));  // 1</p>
<p>//(2) Math.ceil()  向上取整<br>console.log(Math.ceil(1.1));  // 2<br>console.log(Math.ceil(1.9));  // 2</p>
<p>//(3) Math.round()   四舍五入  其他数字都是四舍五入 但是 .5 特殊，它往大了取<br>console.log(Math.round(1.1));  // 1<br>console.log(Math.round(1.5));  // 2<br>console.log(Math.round(1.9));  // 2<br>console.log(Math.round(-1.1));  // -1<br>console.log(Math.round(-1.5));  // -1 不是-2 </p>
<p><strong>Math.random()</strong><br>//1.Math对象随机数方法  random() 返回一个随机数  0 =&lt; x &lt; 1<br>//2.这个方法里面不跟参数<br>//3.代码验证<br>console.log(Math.random()); //打印的数值是 0-1 之前的数，不包含 1 ；比如 0.2111123</p>
<p>//4.想要两个数之间的随机整数，且包含这两个整数<br>function getRandom (min max)<br>{<br>    return Math.floor(Math.random() * (max-min + 1)) + min;<br>}<br>console.log(getRandom(1,10));</p>
<p>//5.随机点名<br>var arr = [‘张三’,’李四’,’王五’,’吾六’]<br>console.log(arr[getRandom(0,arr.length - 1)])</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>Date() </strong><br>Date()   日期对象 是一个构造函数 必须使用new 来调用我们创建的日期对象<br>//1. 使用Date() 如果没有参数  返回当前系统的当前时间<br>var date = new Date();<br>console.log(date);</p>
<p>//2. 参数常用写法  数字型  2019,10,02  (返回的月份大一月) 或者是字符串写法’2019-10-01 08:06:06’<br>var date1 = new Date(2019,10,02);<br>console.log(date1);  //返回的是11月,不是10月<br>var date2= new Date(‘2019-10-01 08:06:06’);<br>console.log(date2);  //返回的是10月</p>
<p>//格式化日期  年月日<br>var date = new Date();<br>var year = date.getFullYear();  // 获取年<br>var month = date.getMonth();    // 获取月<br>var dates = date.getDate();    //  获取日<br>var day = date.getDay();       //  获取星期几<br>var arr = [‘星期天’,’星期一’,’星期二’,’星期三’,’星期四’,’星期五’,’星期六’]<br>console.log(‘今天是’+year+’年’+month+’月’+dates+’日’+arr[day]);</p>
<p>//格式化日期  时分秒<br>function getTimer (){<br>    var time = new Date();<br>    var h = time.getHours();<br>    h = h&lt;10? “0”+ h:h;<br>    var m = time.getMinutes();<br>    m = m&lt;10? “0”+ m:m;<br>    var s = time.getSeconds();<br>    s = s&lt;10? “0”+ s:s;<br>    return h + “:” + m + “:” + s ;<br>}<br>console.log(getTimer());</p>
<hr>
<p><strong>获取Date总的毫秒数（时间戳）不是当前时间的毫秒数，而是距离1970年1月1日过了多少毫秒数</strong><br>1.通过 valueOf()  getTime()<br>var date = new Date()<br>console.log(date.valueOf()); //返回的是 我们现在时间  距离1970.1.1 总的毫秒数<br>console.log(date.getTime());<br>2.简单的写法(最常用的写法)<br>var date1 =  +new Date();  // +new Date()<br>console.log(date1);<br>3.H5 新增的 获得总的毫秒数<br>console.log(Date.now());</p>
<p><strong>倒计时的制作</strong><br>1.获取当前时间的时间戳，和未来要设置的时间戳，总的毫秒数相减<br>2.相减的毫秒数，转换为 天 时 分 秒</p>
<p>function countDown (time){<br>    var nowTime = +new Date(); //获取当时时间的时间戳<br>    var inputTime = +new Date(time); //获取输入的时间戳<br>    var times = (inputTime - nowTime)/1000  //毫秒数转换成秒<br>    var d = parseInt(times / 60 / 60 / 24)  // 天<br>    d=d&lt;10? ‘0’+d :d;<br>    var h = parseInt(times / 60 / 60 % 24)  // 小时<br>    h=h&lt;10? ‘0’+h :h;<br>    var m = parseInt(times / 60 % 60 )      //分钟<br>    m=m&lt;10? ‘0’+m :m;<br>    var s = parseInt(times % 60 )           //秒<br>    s=s&lt;10? ‘0’+s :s;<br>    return d+’天’+h+’小时’+m+’分钟’+m+’秒’<br>}<br>console.log(countDown(2020-11-25 12:00))</p>
<p>//计算的核心算法很简单:<br>1.简单的把秒转换成天的公式<br>d = parseInt(times / 60 （分钟）/ 60（小时） / 24（天数）)  // 天<br>2.把秒转换成小时，需要首先排除天数的干扰，所以取余24.<br>h = parseInt(times / 60（分钟） / 60（小时） % 24（去除天数的小时）)  // 小时<br>3把秒转换成分钟和秒数与秒转换成小时的算法一样的，就不写了。</p>
<hr>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>数组对象 </strong><br>//创建数组的两种方式</p>
<ol>
<li><p>利用数字字面量<br>var arr = [1,2,3];<br>console.log(arr[0]);</p>
</li>
<li><p>利用new Array()<br>var arr1 = new Array(); //创建了一个空的数组<br>var arr1 = new Array(2);// 这个 2 表示数组长度为 2 ，里面有两个空的数组元素<br>var arr1 = new Array(2,3);// 等价于[2,3] 这样写表示 里面有2个数组元素 是 2和3</p>
</li>
</ol>
<p><strong>判断是否为数组的两种方法</strong><br>1.instanceof<br>var arr = [];<br>var obj = {};<br>console.log(arr instanceof Array)  // 打印 true<br>console.log(obj instanceof Array) //打印 false<br>2.Array.isArray(参数)  H5新增的方法 ie9以上版本支持的<br>var arr = [];<br>var obj = {};<br>console.log(Array.isArray(arr))  // 打印 true<br>console.log( Array.isArray(obj)) //打印 false</p>
<p><strong>添加数组元素的方法</strong></p>
<ol>
<li><p>push() 在我们数组的末尾 添加一个或者多个元素 push 推<br>var arr = [1,2,3];<br>arr.push(4,’pink’)<br>console.log(arr.push(4,’pink’)); //打印的 5  表示数组的长度<br>console.log(arr); //打印 [1,2,3,4,’pink’]<br>总结 :<br>1) push 是可以给数组追加新的元素<br>2）push() 参数直接写 数组元素就可以了<br>3) push 完毕之后返回的结果是 新的数组长度<br>4) 原数组也会发生变化</p>
</li>
<li><p>unshift() 在我们数组的前面 添加一个或者多个元素<br>var arr = [1,2,3];<br>arr.unshift(4,’pink’)<br>console.log(arr.unshift(4,’pink’)); //打印的 5  表示数组的长度<br>console.log(arr); //打印 [4,’pink’,1,2,3]<br>总结 :<br>1) unshift 是可以给数组追加新的元素<br>2) unshift() 参数直接写 数组元素就可以了<br>3) unshift 完毕之后返回的结果是 新的数组长度<br>4) 原数组也会发生变化</p>
</li>
</ol>
<p><strong>删除数组元素的方法</strong></p>
<ol>
<li><p>pop() 它可以删除删除数组的最后一个元素<br>var arr = [1,2,3];<br>arr.pop();<br>console.log(arr.pop()); //打印的 3 删除的这个元素<br>console.log(arr); //打印 [1,2]<br>总结 :<br>1) pop() 是可以删除数组的最后一个元素,记住一次只能删除一个元素<br>2) pop()  没有参数<br>3)pop() 完毕之后返回的结果是 删除的那个元素<br>4) 原数组也会发生变化</p>
</li>
<li><p>shift() 它可以删除删除数组的第一个元素<br>var arr = [1,2,3];<br>arr.shift();<br>console.log(arr.shift()); //打印的 1 删除的这个元素<br>console.log(arr); //打印 [2，3]</p>
</li>
</ol>
<p>总结 :</p>
<p>1) shift() 是可以删除数组的第一个元素,记住一次只能删除一个元素<br>2) shift()  没有参数<br>3)shift() 完毕之后返回的结果是 删除的那个元素<br>4) 原数组也会发生变化</p>
<p><strong>数组排序</strong></p>
<ol>
<li><p>reverse() 翻转数组<br>var arr = [1,2,3,4];<br>arr.reverse();<br>console.log(arr); //打印[4,3,2,1]</p>
</li>
<li><p>数组排序 (冒泡排序)<br>// 使用于个位数的排序<br>var arr = [1,3,4,2];<br>arr.sort();<br>console.log(arr) // 打印[1,2,3,4]<br><strong>提示:以上这个方法只适用于个位数的处理</strong><br>如果含有个位及十位数会出现以下情况:<br>var arr = [1,13,4,22];<br>arr.sort();<br>console.log(arr) // 打印[1,13,22,4];</p>
</li>
</ol>
<p>// 使用于个位数及多位数的排序<br>var arr = [1,13,4,12,17];<br>arr.sort(function(a,b){<br>    return a-b  //升序的顺序排列<br>    return b-a  //降序的顺序排列<br>});<br>console.log(arr) // 升序打印[1,4,12,13,17]<br>console.log(arr) // 降序打印[17，13,12,4,1]</p>
<p><strong>返回数组元素索引号方法  indexOf(数组元素) 作用就是返回该数组元素的索引号 从前面开始查找</strong><br>//1.它只返回第一满足条件的索引号<br>//2.它如果在该数组里面找不到元素，则返回的是 -1<br>var arr = [‘red’,’bule’,’skyblue’]<br>console.log(arr.indexOf(‘blue’));  //打印数组索引号 1<br>console.log(arr.indexOf(‘pink’));  //打印数组索引号 -1 表示不存在该元素</p>
<p><strong>返回数组元素索引号方法  lastIndexOf(数组元素)作用就是返回该数组元素的索引号 从后面开始查找</strong><br>//1.它只返回第一满足条件的索引号<br>//2.它如果在该数组里面找不到元素，则返回的是 -1<br>var arr = [‘red’,’bule’,’skyblue’]<br>console.log(arr.lastIndexOf(‘blue’));  //打印数组索引号 1<br>console.log(arr.lastIndexOf(‘pink’));  //打印数组索引号 -1 表示不存在该元素</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>数组去重（很重要）</strong><br>// 封装一个 去重的函数 unique 独一无二的<br>function unique(arr){<br>var newArr = [];<br>    for(var i=0; i&lt; arr.length ;i++){<br>    if(newArr.indexOf(arr[i]) ===-1){<br>    newArr.push(arr[i]);<br>}<br>}<br>return newArr;<br>}<br>var demo = unique([‘c’,’c’,’b’,’a’]);<br>console.log(demo); // 返回的数组 [‘c’,’b’,’a’]</p>
<p><strong>数组转换成字符串</strong><br>//1. toString() 将我们的数组转换为字符串<br>var arr = [1,2,3];<br>console.log(arr.toString());  // 1,2,3<br>//2. join(分隔符)<br>var arr = [‘red’,’blue’,’skyblue’];<br>console.log(arr.join()); // red,blue,skyblue<br>console.log(arr.join(‘-‘)); // red-blue-skyblue</p>
<p><strong>concat()连接两个或者多个数组  不影响原数组</strong><br>concat() 方法用于连接两个或多个数组。<br>var arr1 = [1, 2, 3];<br>var arr2 = [4, 5, 6];<br>var arr3 = [7, 8];<br>console.log(arr1.concat(arr2, arr3));  //打印 [1,2,3,4,5,6,7,8]</p>
<p><strong>slice 数组截取  slice(begin,end) 返回被截取项目的新数组</strong><br>var arr = new Array(3)<br>arr[0] = “George”<br>arr[1] = “John”<br>arr[2] = “Thomas”<br>console.log(arr.slice(1)) // John,Thomas<br>arr.slice(1) : 表示从第一个数组元素后面开始截取到最后</p>
<p>var arr = new Array(6)<br>arr[0] = “George”<br>arr[1] = “John”<br>arr[2] = “Thomas”<br>arr[3] = “James”<br>arr[4] = “Adrew”<br>arr[5] = “Martin”</p>
<p>console.log(arr.slice(2,4)); // Thomas,James<br>arr.slice(2,4) : 表示从第一个元素的后面开始截取到第四个元素，也就是 第三个和第四个元素</p>
<p>如果arr.slice(begin,end)begin是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</p>
<p><strong>数组删除splice(第几个开始，要删除的个数，要添加的元素) 返回新的数组，会影响原数组</strong><br><strong>注释：请注意,splice() 方法与slice()方法的作用是不同的,splice() 方法会直接对数组进行修改。</strong><br>splice() 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。</p>
<p>在本例中，我们将创建一个新数组，并向其添加一个元素：<br>var arr = new Array(6)<br>arr[0] = “George”<br>arr[1] = “John”<br>arr[2] = “Thomas”<br>arr[3] = “James”<br>arr[4] = “Adrew”<br>arr[5] = “Martin”<br>arr.splice(2,0,”William”);<br>console.log(arr);     //George,John,William,Thomas,James,Adrew,Martin</p>
<p>在本例中我们将删除位于 index 2 的元素，并添加一个新元素来替代被删除的元素：<br>var arr = new Array(6)<br>arr[0] = “George”<br>arr[1] = “John”<br>arr[2] = “Thomas”<br>arr[3] = “James”<br>arr[4] = “Adrew”<br>arr[5] = “Martin”<br>arr.splice(2,1,”William”);<br>console.log(arr);  // George,John,William,James,Adrew,Martin</p>
<p>在本例中我们将删除从 index 2 (“Thomas”) 开始的三个元素，并添加一个新元素 (“William”) 来替代被删除的元素：<br>var arr = new Array(6)<br>arr[0] = “George”<br>arr[1] = “John”<br>arr[2] = “Thomas”<br>arr[3] = “James”<br>arr[4] = “Adrew”<br>arr[5] = “Martin”<br>arr.splice(2,3,”William”);<br>console.log(arr); //George,John,William,Martin</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>字符串对象</strong><br>基本类型包装:就是把简单数据类型包装成复杂数据类型<br>var str = ‘andy’<br>console.log(str.length);<br>JS会把基本数据类型包装成复杂数据类型，其执行过程如下<br>//1.生成临时变量，把简单类型包装为复杂数据类型<br>var temp = new String(‘andy’);<br>//2.赋值给我们声明的字符变量<br>str = temp ;<br>//3.销毁临时变量<br>temp = null;</p>
<p><strong>字符串的不可变性，不能大量的拼接字符串。</strong></p>
<p><strong>根据字符返回位置 str.indexOf(‘要查找的字符’,[起始的位置])</strong><br>var str = ‘改革春风吹满地，春天来了’;<br>console.log(str.indexOf(‘春’)); // 索引为 2<br>console.log(str.indexOf(‘春’,3));//  8   从索引为 3的位置开始查找跳过第一个春 ，第二个春的索引是 8</p>
<p><strong>查找字符串’a,b,c,o,e,f,o,x,y,o,z,z,o,p,p’</strong><br>var str = ‘a,b,c,o,e,f,o,x,y,o,z,z,o,p,p’;<br>var index = str.indexOf(“o”);<br>var num = 0;<br>while(index != -1){<br>    console.log(index);<br>    num++;<br>    index = str.indexOf(‘o’,index+1);<br>}<br>console.log(num);</p>
<p><strong>根据位置返回字符 </strong><br>//1. charAt(index) 根据位置返回字符<br>var str = ‘andy’;<br>console.log(str.charAt(3)); // y<br>//遍历所有字符<br>for(var i=0; i&lt; str.length; i++){<br>    console.log(str.charAt(i));<br>}<br>//2. charCodeAt(index) 返回相应索引号的字符ASCII值  目的: 判断用户按下了哪一个键<br>console.log(str.charCodeAt(0)); //  97  a的索引号 97<br>//3. str[index]  H5新增的<br>console.log(str[0]); // a</p>
<p><strong>判断一个字符串 ‘a,b,c,o,e,f,o,x,y,o,z,z,o,p,p’ 中出现次数最多的字符，并统计其次数</strong><br>// 核心算法 : 利用charAt() 遍历这个字符串<br>// 把每个字符都存储给对象，如果对象没有该属性，就为1，如果存在就 +1<br>// 遍历对象，得到最大值和该字符<br>var str = ‘abcoefoxyozzopp’;<br>var obj = {}<br>for(var i=0;i&lt; str.length;i++)<br>{<br>    var charAts = str.charAt(i)<br>    if(obj[charAts]){<br>    obj[charAts]++;<br>}<br>else {<br>    obj[charAts] =1;<br>}<br>}<br>console.log(obj);<br>//2. 遍历对象<br>var max = 0;<br>var ch = ‘’;<br>for(var k in obj)<br>{<br>     // k 得到是属性名<br>     // obj[k] 得到的是属性值<br>    if(obj[k]&gt;max)<br>    {<br>        max = obj[k]<br>        ch = k<br>    }<br>}<br>console.log(max); // 4<br>console.log(ch);  // o</p>
<hr>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>字符串的操作方法</strong><br>//1. concat(‘字符串1’,’字符串2’….)<br>var str = ‘andy’;<br>var str1 = ‘blue’;<br>console.log(str.concat(“red”));  // andyred<br>console.log(str.concat(str1));   // andyblue</p>
<p>//2. substr(‘截取的起始位置’,’截取几个字符’)<br>var str = ‘改革春风吹满地’;<br>console.log(str.substr(2,2));  //打印 春风<br>//第一个2 是索引号的2 从第几个开始  第二个2 是取几个字符</p>
<p><strong>替换字符 replace(‘被替换的字符’,’替换的字符’) 它只会替换第一个字符</strong><br>var str = ‘andyandy’<br>console.log(str.replace(‘a’,’b’)); //打印 bndyandy</p>
<p>// 有一个字符串’abcoefoxyozzopp’ 要求把里面所有的 o 替换为 *<br>var str = ;<br>while(str.indexOf(‘o’)!== -1){<br>    str = str.replace(‘o’,’ * ‘)<br>}<br>console.log(str) // abc* ef* xy* zz* pp</p>
<p><strong>字符转换为数组 split(‘分隔符’) 前面是 join 把数组转换为字符串</strong><br>var str = ‘red,pink,blue’;<br>console.log(str.split(‘,’)); // [“red”,”pink”,”blue”]<br>var str1 = ‘red&amp;pink&amp;blue’<br>console.log(str1.split(‘&amp;’)); //[“red”,”pink”,”blue”]</p>
<p><strong>toUpperCase() 转换大写      toLowerCase() 转换小写</strong><br>//1. toUpperCase() 转换大写<br>var str=”Hello World!”;<br>console.log(str.toUpperCase()); //HELLO WORLD!</p>
<p>//2. toLowerCase() 转换小写<br>var str=”Hello World!”;<br>console.log(str.toLowerCase()); //hello world!</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>简单数据类型和复杂数据类型</strong><br>// 简单数据类型 null 返回的是一个空的对象 object<br>var time = null;<br>console.log(typeof time); // object<br><strong>如果有一个变量打算存储为对象，暂时没有想好放啥，这个时候就给 null</strong></p>
<p><strong>简单数据类型，又称为值类型。复杂数据类型又称为引用类型</strong><br>值类型: 在存储变量中存储的是值本身<br>string , number , boolean , undefined , null<br>引用类型: 在存储时变量中存储的仅仅是地址（引用）<br>通过 new 关键字创建的对象（系统对象 ，自定义对象）, Object Array Date 等</p>
<p><strong>堆和栈</strong><br>栈: 简单数据类型放到栈里面<br>堆: 复杂数据类型放到堆里面<br><strong>简单数据类型 直接把数据存在在栈里面的</strong><br> <strong>复杂数据类型 先在栈里面存放地址，然后地址指向堆里面的数据</strong></p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p> —-2020.11.25</p>
</p>
</div>]]></content>
  </entry>
  <entry>
    <title>学习中发发牢骚</title>
    <url>/2020/ckpf35krf0084jov49efm3i5j/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2010691834,3841271633&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">用来吐槽学习过程中的负面情绪</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
觉得挺有意思的，专门用来吐槽自己的学习
<br>
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
前端要的学的东西怎么这么多啊，还有该死的算法题，网页布局该死的，要学习的tm太多了。
还有后端的知识点要学习。靠靠靠。----2020.11.11
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
我收回昨天说的vue很有趣的话，真的麻烦一批，还是那句话JS基础不好，就很麻烦的。
草草vue这么难，但是我喜欢他的简单，不要操作DOM元素。哈哈哈哈哈哈
                        ----2020.11.12
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
垃圾百度，收录一个老子博客这么麻烦，还一直不通过，耽误我这么多学习时间，不弄了，彻底放弃了。
有朝一日再来搞你去了。
                     ---------------------------2020.11.13
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
之前说vue很难的话，我收回了。vue真的很有趣的。我喜欢vue的简答粗暴。不要操作dom元素哈哈哈哈
   ---------------------------2020.11.14
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
学个vue这么麻烦，还得学习后端知识太难了。
淦它，还有写项目没有多练写的真的很慢，做项目最难的就是命名呀呀呀呀
 ---------------------------2020.11.18
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
今天必须要吐槽一波，我下载一个gulp插件，在百度上面搜索  gulp-file-include
tmd给我出来一个  gulp-include-file 我没看就进去安装了，搞了好久都没找到问题。
真是醉了，这百度引擎服了啊。还有差一点因为安装  gulp 出现问题就放弃了学习这个。
问了群里的人，说推荐学 webpack 但是决定多学一点吧，没有坏处的。

<p>—————————2020.11.19</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
今天想要吐槽自己了，又去看后端知识了。了解数据库，感觉时间不允许我这么做了。
最近马上学习vue ,后端学习的话，就把gulp和http协议学习完毕。
数据库后期再学习吧。真的感觉时间不多了自己，要把时间用到好的地方。

<p>—————————2020.11.24</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
我已经放弃对数据库的学习了，打算学习完vue，或者以后工作可我再来学习它。
我今天要吐槽AJAX的学习，最近感觉头晕晕，就是学习ajax导致的。
太难了，不过后面调用感觉还好吧。
加油吧孩子

<p>—————————2020.11.29</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>想吐槽自己一波了，现在怕是真的喜欢睡觉，然后学习。早上睡到下午，然后下午就学习到晚上7-8点。<br>这件事情还是要从上次去赶集，然后回家就睡觉到下午，学习到晚上。感觉这样还不错的，因为一直学习的话，就有状态了。如果学习两个小时就休息，再继续学习的话，进入学习状态也需要时间。<br>                               —————————2020.12.02</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>最近想吐槽自己的学习状态太差了吧，来由就是那次的下午学习到晚上，我已经一次学习几个小时感觉状态还不错<br>但是忽略了上午时间被我浪费了很多。主要还是自己晚上有点失眠，早上起不来的事情。<br>不太想这样下去了，人是要改变的，不能一直保持一个状态下去。上午的学习时间也是很宝贵的。<br>好好学习吧少年，每天多学习一点，就可以早点去找工作了。<br>       —————————2020.12.04</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>最近想吐槽自己了，感觉在学习的路上遇到一点小问题。这个问题我要是解决好的话，离我的目标<br>就更近一步了。学习了这么久之前学习的也就是过了一遍，大了解了大概。要想加强的学习就得做项目，来加强自己。 html css h5 css3 js node webpack vue ajax。目前我需要做的是怎么利用项目来加强自己的知识掌握。<br>对自己的要求也不高，自己掌握vue项目两个 JS项目两个 大致了解react。响应式布局项目一个。<br>bootstrap项目一个。我今天看了css的书籍，感觉不怎么样。还是在B站看视频来顺便写博客。<br>最近要做的就是把bootstrap的项目写完。其他的事情都不要管。        </p>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>又要吐槽自己了，感觉前端知识点还是好多啊，还是自己有点急了吧。<br>———–2020-12-27        </p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
<br>
             -------------------------------------------------------创建时间 2020.11.11.21:21。
</p>



</div>]]></content>
  </entry>
  <entry>
    <title>前端优化浏览器排名的方法</title>
    <url>/2020/ckpf35krh0086jov464jageuz/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2926931395,235070592&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">前端优化浏览器排名的方法</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
目前会的很少，但是还是会写上自己知道的
<br>
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>网站优化三大标签：<br>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”！<br>常见的搜索引擎，比如百度，谷歌，雅虎，搜狗等等..<br>SEO是指通过对网站进行站内优化、网站结构调整、网站内容建设、网站代码优化等)和站外优化，从而提高网站的关键词排名以及公司产品的曝光度。 简单的说就是，把产品做好，搜索引擎就会介绍客户来。</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>1.网页title 标题<br>title具有不可替代性，是我们的内页第一个重要标签，是搜索引擎了解网页的入口，和对网页主题归属的最佳判断点。<br>标题的长度：Google（70kb），35个中文；Baidu（56kb），28个中文。<br>关键字分布：最先出现的词语权重越高。<br>关键字词频：主关键字出现三次，辅关键字出现一次</p>
<p>建议：<br>首页标题：网站名（产品名）- 网站的介绍<br>例如：<br>品优购-综合网购首选-正品低价、品质保障、配送及时、轻松购物！<br>小米商城 - 小米5s、红米Note 4、小米MIX、小米笔记本官方网站</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>2.Description  网站说明<br>对于关键词的作用明显降低，但由于很多搜索引擎，仍然大量采用网页的MATA标签中描述部分作为搜索结果的“内容摘要”。 就是简要说明我们网站的主要做什么的。<br>我们提倡，Description作为网站的总体业务和主题概括，多采用“我们是…”“我们提供…”“×××网作为…”“电话：010…”之类语句。<br>品优购网：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;品优购JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!&quot; &#x2F;&gt;<br></code></pre></td></tr></table></figure>
<p>注意点：<br>1.描述中出现关键词，与正文内容相关，这部分内容是给人看的，所以要写的很详细，让人感兴趣， 吸引用户点击。<br>2.同样遵循简短原则，字符数含空格在内不要超过 120  个汉字。<br>3.补充在 title  和 keywords  中未能充分表述的说明.<br>4.用英文逗号 关键词1,关键词2</p>
<p>小米官方：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;小米商城直营小米公司旗下所有产品，囊括小米手机系列小米MIX、小米Note 2，红米手机系列红米Note 4、红米4，智能硬件，配件及小米生活周边，同时提供小米客户服务及售后支持。&quot; &#x2F;&gt;<br></code></pre></td></tr></table></figure>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>3.Keywords 关键字<br>Keywords是页面关键词，是搜索引擎关注点之一。Keywords应该限制在6～8个关键词左右，电商类网站可以多 少许。<br>品优购网：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;meta name&#x3D;&quot;Keywords&quot; content&#x3D;&quot;网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,品优购&quot; &#x2F;&gt;<br></code></pre></td></tr></table></figure>

<p>小米网：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;meta name&#x3D;&quot;keywords&quot; content&#x3D;&quot;小米,小米6,红米Note4,小米MIX,小米商城&quot; &#x2F;&gt;<br></code></pre></td></tr></table></figure>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>4). 总结<br>1.我们的网页要做的优秀，符合搜索引擎的要求，才可以让搜索引擎优先显示我们的网页。<br>2.所以我们的网站要做很多的优化， 其中就有这三大标签。<br>3.一般情况下，三大标签里面的优化词，都是专门的优化人员写的，我们大概了解一下规范就可以了。<br>4.我们的主要任务是，能写出这三大标签， 然后把优化人员给我们的内容，添加到里面。</p>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>logo 优化<br>logo  里面 首先放一个 h1 标签 ，目的是为了提权，告诉搜索引擎，这个地方很重要<br>h1里面在放一个连接，可以返回首页的，   给连接一个 大小 和  logo 的背景图片<br>连接 里面要放文字（网站名称），为了搜索引擎收录我们。  但是文字不要显示出来<br>要用 text-indent  移到盒子外面 （text-indent: -9999px)   然后overflow:hidden  淘宝的做法<br>直接给font-size: 0;  就看不到文字了，  京东的做法。<br>最后给 连接一个 title  这样鼠标放到logo 上，  就可以看到提示文字了</p>
</p>


</div>]]></content>
  </entry>
  <entry>
    <title>前端命名的方法</title>
    <url>/2020/ckpf35kra007zjov47zvtbstq/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3390235768,2733910967&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">前端命名规范</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
一个优秀的前端程序员必须有一个好的命名习惯
<br>
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>1：页面命名规范<br>如：<br>首页：index/home<br>关于我们：about_us<br>联系我们：contact_us<br>产品中心：product<br>产品详情页：pro_center<br>新闻中心：news<br>新闻详情页：news_center<br>服务中心：service<br>登陆页：login<br>注册页：reg<br>订单页：order<br>订单提交成功页：order_success<br>订单提交失败页：order_error<br>提交页面：submit<br>修改密码：update<br>我的购物车：shop_cart<br>确认订单：confirm_order<br>支付页：pay<br>支付成功页：pay_success<br>支付失败页：pay_error<br>会员中心：member<br>地址列表：address<br>新增地址：add_address<br>个人资料修改：update_data<br>购买记录页：pur_history<br>点评页：comments<br>搜索页：search<br>地图页：map</p>
<hr>
<p>常用的css命名规则<br>如：</p>
<p>头：header<br>内容：content/container<br>尾：footer<br>导航：nav<br>侧栏：sidebar<br>栏目：column<br>页面外围控制整体布局宽度：wrapper<br>左右中：left right center<br>登录条：loginbar<br>标志：logo<br>广告：banner<br>页面主体：main<br>热点：hot<br>新闻：news<br>下载：download<br>子导航：subnav<br>菜单：menu<br>子菜单：submenu<br>搜索：search<br>友情链接：friendlink<br>页脚：footer<br>版权：copyright<br>滚动：scroll<br>内容：content<br>标签页：tab<br>文章列表：list<br>提示信息：msg<br>小技巧：tips<br>栏目标题：title<br>加入：joinus<br>指南：guild<br>服务：service<br>注册：regsiter<br>状态：status<br>投票：vote<br>合作伙伴：partner</p>
<hr>
<p>id与class命名<br>如:</p>
<p>地图：map<br>头部：header<br>中部：middle<br>底部：footer<br>内容：content<br>导航：nav<br>二级导航：childNav<br>菜单：menu<br>更多：move<br>列表：list<br>图片：pic<br>缩略图：thumb-pic<br>分页：page<br>轮播图：slider<br>广告图：banner<br>新闻列表：newsList<br>产品列表：proList<br>搜索栏：search<br>Logo图：logo<br>中部内容左边：mid-left<br>中部内容右边：mid-right<br>中部内容上边：mid-top<br>中部内容下边：mid-bot<br>按钮：btn<br>提交按钮：sub<br>表格：tab</p>
<hr>
<p>id的命名<br>如：</p>
<p>(1)页面结构<br>容器：container<br>页头：header<br>内容：content/container<br>页面主体：main<br>页尾：footer<br>导航：nav<br>侧栏：sidebar<br>栏目：column<br>页面外围控制整体布局宽度：wrapper<br>左右中：left right center<br>(2)导航<br>导航：nav<br>主导航：mainbav<br>顶导航：topnav<br>边导航：sidebar<br>左导航：leftsidebar<br>右导航：rightsidebar<br>菜单：menu<br>子菜单：submenu<br>标题：title<br>摘要：summary<br>(3)功能<br>标志：logo<br>广告：banner<br>登陆：login<br>登录条：loginbar<br>注册：regsiter<br>搜索：search<br>功能区：shop<br>标题：title<br>加入：joinus<br>状态：status<br>按钮：btn<br>滚动：scroll<br>标签页：tab<br>文章列表：list<br>提示信息：msg<br>当前的：current<br>小技巧：tips<br>图标：icon<br>注释：note<br>指南：guild<br>服务：service<br>热点:hot<br>新闻：news<br>下载：download<br>投票：vota<br>合作伙伴：partner<br>友情链接：link<br>版权：copyright</p>
<hr>
<p>商城页面命名<br>index 主页<br>footprints 我的足迹<br>collect 我的收藏<br>about_us 关于我们<br>shop_cart 购物车<br>personal 个人中心<br>comments 评论<br>search 搜索nearby<br>附近order 订单<br>activities 活动<br>detail 店铺详情<br>detail_temp 生活超市<br>sort_list 分类<br>all_order 增加订单<br>pay 支付<br>success 支付成功<br>submit 提交<br>address 地址<br>add_address 添加地址<br>two_code 我的二维码<br>experience 体验师<br>supermarkets 生活超市</p>
<hr>
<p>资源文件夹命名<br>如：</p>
<p>CSS文件夹：style<br>Javascript文件夹：js<br>图片资源文件夹：images<br>字体资源文件夹：fonts</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<hr>
<p>目录命名<br>项目文件夹：pinyougou<br>样式文件夹：css<br>脚本文件夹：js<br>样式类图片文件夹：img<br>产品类图片文件夹： upload<br>字体类文件夹： fonts</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">


<hr>
<p>属性书写顺序<br>建议遵循以下顺序：<br>1.布局定位属性：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）<br>2.自身属性：width / height / margin / padding / border / background<br>3.文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word<br>4.其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p>about 关于<br>account 账户<br>arrow箭头图标<br>article文章<br>aside边栏<br>audio音频<br>avatar头像<br>bg,background背景<br>bar栏（工具类）<br>branding品牌化<br>crumb,breadcrumbs面包屑<br>btn,button按钮<br>caption标题，说明<br>category分类<br>chart图表<br>clearfix清除浮动<br>close关闭<br>col,column列<br>comment评论<br>community社区<br>container容器<br>content内容<br>copyright版权<br>current当前态，选中态<br>default默认<br>description描述<br>details细节<br>disabled不可用<br>entry文章，博文<br>error错误<br>even偶数，常用于多行列表或表格中<br>fail失败（提示）<br>feature专题<br>fewer收起<br>field用于表单的输入区域<br>figure图<br>filter筛选<br>first第一个，常用于列表中<br>footer页脚<br>forum论坛<br>gallery画廊<br>group模块，清除浮动<br>header页头<br>help帮助<br>hide隐藏<br>hightlight高亮<br>home主页<br>icon图标<br>info,information信息<br>last最后一个，常用于列表中<br>links链接<br>login登录<br>logout退出<br>logo标志<br>main主体<br>menu菜单<br>meta作者、更新时间等信息栏，一般位于标题之下<br>module模块<br>more更多（展开）<br>msg,message消息<br>nav,navigation导航<br>next下一页<br>nub小块<br>odd奇数，常用于多行列表或表格中<br>off鼠标离开<br>on鼠标移过<br>output输出<br>pagination分页<br>pop,popup弹窗<br>preview预览<br>previous上一页<br>primary主要<br>progress进度条<br>promotion促销<br>rcommd,recommendations推荐<br>reg,register注册<br>save保存<br>search搜索<br>secondary次要<br>section区块<br>selected已选<br>share分享<br>show显示<br>sidebar边栏，侧栏<br>slide幻灯片，图片切换<br>sort排序<br>sub次级的，子级的<br>submit提交<br>subscribe订阅<br>subtitle副标题<br>success成功（提示）<br>summary摘要<br>tab标签页<br>table表格<br>txt,text文本<br>thumbnail缩略图<br>time时间<br>tips提示<br>title标题<br>video视频<br>wrap容器，包，一般用于最外层<br>wrapper容器，包，一般用于最外层</p>
</p>



</div>]]></content>
  </entry>
  <entry>
    <title>VUE模板语法学习记录</title>
    <url>/2020/ckpf35ko9004mjov43wgyc0jq/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3647099666,2758135680&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">VUE学习记录</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
这里不写笔记，只写VUE有哪些知识点
<br>
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>v-cloak 指令</strong><br>v-cloak背后原理 : 先通过样式隐藏内容，然后在内存中进行值得替换，替换好之后再显示最终的结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>    &lt;head&gt;<br>        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>        &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>        &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>        &lt;title&gt;Document&lt;&#x2F;title&gt;<br>        &lt;style&gt;<br>        [v-cloak] &#123;<br>            display: none;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>    &lt;&#x2F;head&gt;<br>    &lt;body&gt;<br>        &lt;div id&#x3D;&quot;app&quot;&gt;<br>            &lt;div v-cloak&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;<br>        &lt;script&gt;<br>        var vm&#x3D;new Vue(&#123;<br>           el:&#39;#app&#39;,<br>           data:&#123;<br>               msg :&#39;hello vue&#39;<br>           &#125;,<br>           methods:&#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>    &lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<hr>
<p><strong> v-text  v-html 的使用</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div v-text&#x3D;&quot;msg&quot;&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;div v-html&#x3D;&quot;msg1&quot;&gt;<br>        &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                msg: &#39;你好&#39;,<br>                msg1: &#39;&lt;h2&gt;你好啊&lt;&#x2F;h2&gt;&#39;<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p>v-html:在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 XSS 攻击。只在可信内容上使用 v-html，永不用在用户提交的内容上<br><strong>v-text 填充文本，相比插值表达式更加简洁<br>v-html 填充HTML片段 但是存在安全问题，本网站内部数据可以使用，来自第三方数据不可以用<br>v-pre 填充原始信息 显示原始信息，跳过编译过程</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;div v-pre&gt;&#123;&#123;mag&#125;&#125;&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>v-once指令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div v-once&gt;<br>            &#123;&#123;info&#125;&#125;<br>        &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                info: &#39;你好啊&#39;<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<strong>
  v-once 的应用场景: 如果显示的信息后续不需要再修改，可以使用 v-once，这样可以提高性能
</strong>

<hr>
<p><strong>v-model 双向数据绑定 （重要）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;<br>        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&#39;msg&#39;&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                msg: &quot;你好啊&quot;<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p><strong>使用限制<br>input<br>select<br>textarea<br>components</strong></p>
<p><strong>MVVM设计思想<br>1.M(model) 模型提供数据<br>2.V(view) 视图，DOM元素 提供页面展示效果<br>3.VM(view-model) 实现控制逻辑，把两者结合在一起</strong><br><img src="\image\vue\01.png"></p>
<hr>
<p><strong>v-on 事件绑定指令 （重要）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div&gt;&#123;&#123;num&#125;&#125;&lt;&#x2F;div&gt;<br>        &lt;div&gt;<br>            &lt;button v-on:click&#x3D;&quot;handle&quot;&gt;按钮&lt;&#x2F;button&gt;<br>        &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                num: 0<br>            &#125;,<br>            methods: &#123;<br>                handle: function () &#123;<br>                    &#x2F;&#x2F; this &#x3D; vm<br>                    this.num++;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<img src="\image\vue\02.png">

<strong>
  需要注意的是 this.num = vm.num ;
  this 相当于 vm
</strong>

<p><strong>事件绑定，参数传递</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div&gt;&#123;&#123;num&#125;&#125;&lt;&#x2F;div&gt;<br>        &lt;div&gt;<br>            &lt;button v-on:click&#x3D;&quot;handle(1,2,$event)&quot;&gt;按钮&lt;&#x2F;button&gt;<br>        &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                num: 0<br>            &#125;,<br>            methods: &#123;<br>                handle: function (p, p1, event) &#123;<br>                    &#x2F;&#x2F; this &#x3D; vm<br>                    this.num++;<br>                    console.log(p);  &#x2F;&#x2F;1<br>                    console.log(p1); &#x2F;&#x2F;2<br>                    console.log(event.target.innerHTML);  &#x2F;&#x2F;按钮<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<img src="\image\vue\03.png">

<hr>
<p><strong>事件修饰符</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div&gt;&#123;&#123;num&#125;&#125;&lt;&#x2F;div&gt;<br>        &lt;div v-on:click&#x3D;&quot;hand1&quot;&gt;<br>            &lt;button v-on:click.stop&#x3D;&quot;handle&quot;&gt;按钮&lt;&#x2F;button&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;div&gt;<br>            &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;&quot; v-on:click.prevent&#x3D;&quot;handle2&quot;&gt;百度&lt;&#x2F;a&gt;<br>        &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                num: 0<br>            &#125;,<br>            methods: &#123;<br>                handle: function (event) &#123;<br><br>                &#125;,<br>                hand1: function () &#123;<br>                    this.num++;<br>                &#125;,<br>                handle2: function () &#123;<br><br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<img src="\image\vue\04.png">
<strong>修饰符：<br>
.stop - 调用 event.stopPropagation()。<br>
.prevent - 调用 event.preventDefault()。<br>
.capture - 添加事件侦听器时使用 capture 模式。<br>
.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。<br>
.{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调。<br>
.native - 监听组件根元素的原生事件。<br>
.once - 只触发一次回调。<br>
.left - (2.2.0) 只当点击鼠标左键时触发。<br>
.right - (2.2.0) 只当点击鼠标右键时触发。<br>
.middle - (2.2.0) 只当点击鼠标中键时触发。<br>
.passive - (2.3.0) 以 { passive: true } 模式添加侦听器<br>
使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。<br>
因此，用 v-on:click.prevent.self 会阻止所有的点击，<br>
而 v-on:click.self.prevent 只会阻止对元素自身的点击。<br>
</strong>

<hr>
<p><strong>按键事件修饰符</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div&gt;<br>            &lt;form action&#x3D;&quot;&quot;&gt;<br>                &lt;div&gt;<br>                    用户名<br>                    &lt;input type&#x3D;&quot;text&quot; v-on:keyup.delete&#x3D;&quot;handle&quot; v-model&#x3D;&quot;uname&quot;&gt;<br>                &lt;&#x2F;div&gt;<br>                &lt;div&gt;<br>                    密码<br>                    &lt;input type&#x3D;&quot;text&quot; v-on:keyup.enter&#x3D;&quot;handle2&quot; v-model&#x3D;&quot;pwd&quot;&gt;<br>                &lt;&#x2F;div&gt;<br>                &lt;div&gt;<br><br>                    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;提交&quot; v-on:click&#x3D;&quot;handle1&quot;&gt;<br>                &lt;&#x2F;div&gt;<br>            &lt;&#x2F;form&gt;<br>        &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                uname: &#39;&#39;,<br>                pwd: &#39;&#39;<br>            &#125;,<br>            methods: &#123;<br>                handle: function () &#123;<br>                    this.uname &#x3D; &quot;&quot;;<br>                &#125;,<br>                handle1: function () &#123;<br>                    console.log(this.uname, this.pwd);<br>                &#125;,<br>                handle2: function () &#123;<br>                    console.log(this.uname, this.pwd);<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<img src="\image\vue\05.png">
<strong>按键修饰符<br>
 .enter <br>
 .tab<br>
.delete (捕获“删除”和“退格”键)<br>
.esc<br>
.space<br>
.up<br>
.down<br>
.left<br>
.right<br>
</strong>


<hr>
<p><strong>按键自定义修饰符<br></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div&gt;<br>            &lt;form action&#x3D;&quot;&quot;&gt;<br>                &lt;div&gt;<br>                    &lt;input type&#x3D;&quot;text&quot; v-on:keyup.a&#x3D;&quot;handle&quot; v-model&#x3D;&quot;uname&quot;&gt;<br>                &lt;&#x2F;div&gt;<br>            &lt;&#x2F;form&gt;<br>        &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        &#x2F;&#x2F; 事件绑定-自定义按键修饰符<br>        &#x2F;&#x2F; 规则: 自定义按键修饰符名字是自己定义的，但是对应的值必须是按键对应event.keyCode值<br>        Vue.config.keyCodes.a &#x3D; 65<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                uname: &#39;&#39;,<br>                pwd: &#39;&#39;<br>            &#125;,<br>            methods: &#123;<br>                handle: function (event) &#123;<br>                    console.log(&#39;aaa&#39;);<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<p>系统修饰键<br>2.1.0 新增</p>
<p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p>
<p>.ctrl<br>.alt<br>.shift<br>.meta</p>
<hr>
<p><strong>简单计算器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;h1&gt;简单计算器&lt;&#x2F;h1&gt;<br>        &lt;div&gt;<br>            &lt;span&gt;数值A&lt;&#x2F;span&gt;<br>            &lt;span&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; value&#x3D;&quot;&quot; v-model&#x3D;&#39;num1&#39;&gt;&lt;&#x2F;span&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;div&gt;<br>            &lt;span&gt;数值B&lt;&#x2F;span&gt;<br>            &lt;span&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; value&#x3D;&quot;&quot; v-model&#x3D;&quot;num2&quot;&gt;&lt;&#x2F;span&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;div&gt;<br>            &lt;button v-on:click&#x3D;&quot;handle&quot;&gt;计算&lt;&#x2F;button&gt;<br>        &lt;&#x2F;div&gt;<br>        &lt;div&gt;<br>            &lt;span&gt;计算结果&lt;&#x2F;span&gt;<br>            &lt;span v-text&#x3D;&#39;result&#39;&gt;&lt;&#x2F;span&gt;<br>        &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                num1: &#39;&#39;,<br>                num2: &#39;&#39;,<br>                result: &#39;&#39;<br><br>            &#125;,<br>            methods: &#123;<br>                handle: function () &#123;<br>                    this.result &#x3D; parseInt(this.num1) + parseInt(this.num2);<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<p>用到了 v-model 的数据双向绑定，还有 v-text  的本文显示</p>
<hr>
<p><strong>属性绑定</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;a v-bind:href&#x3D;&quot;url&quot;&gt;网站链接&lt;&#x2F;a&gt;<br>        &lt;button @click&#x3D;&#39;handle&#39;&gt;切换&lt;&#x2F;button&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                url: &#39;https:&#x2F;&#x2F;www.baidu.com&#39;<br>            &#125;,<br>            methods: &#123;<br>                handle: function () &#123;<br>                    this.url &#x3D; &#39;http:&#x2F;&#x2F;itcast.com&#39;;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<p>v-bind:href 的缩写  :href </p>
<hr>
<p><strong>v-model底层原理的实现</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;<br>        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; v-bind:value&#x3D;&#39;msg&#39; v-on:input&#x3D;&#39;handle&#39;&gt;<br>        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; v-bind:value&#x3D;&#39;msg&#39; v-on:input&#x3D;&#39;msg&#x3D;$event.target.value&#39;&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                msg: &#39;你还啊&#39;<br>            &#125;,<br>            methods: &#123;<br>                handle: function (event) &#123;<br>                    this.msg &#x3D; event.target.value<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p>需要注意  <code>v-on:input=&#39;msg=$event.target.value</code>  $event</p>
<hr>
<p><strong>class样式绑定(对象形式绑定)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;style&gt;<br>        .active &#123;<br>            border: 1px solid red;<br>            width: 100px;<br>            height: 100px;<br>        &#125;<br><br>        .err &#123;<br>            background-color: orangered;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div v-bind:class&#x3D;&quot;&#123;active:isActive,err:isErr&#125;&quot;&gt;1111&lt;&#x2F;div&gt;<br>        &lt;button v-on:click&#x3D;&quot;handle&quot;&gt;切换&lt;&#x2F;button&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                isActive: true,<br>                isErr: true<br>            &#125;,<br>            methods: &#123;<br>                handle: function () &#123;<br>                    &#x2F;&#x2F; 控制 isActiv的值在true和false 之间切换<br>                    this.isActive &#x3D; !this.isActive<br>                    this.isErr &#x3D; !this.isErr<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p><code>v-bind:class=&quot;{active:isActive,err:isErr}&quot;</code></p>
<p><strong>class样式绑定(数组形式绑定)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;style&gt;<br>        .active &#123;<br>            border: 1px solid red;<br>            width: 100px;<br>            height: 100px;<br>        &#125;<br><br>        .err &#123;<br>            background-color: orangered;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div v-bind:class&#x3D;&quot;[isActive,isErr]&quot;&gt;1111&lt;&#x2F;div&gt;<br>        &lt;button v-on:click&#x3D;&quot;handle&quot;&gt;切换&lt;&#x2F;button&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                isActive: &#39;active&#39;,<br>                isErr: &#39;err&#39;<br>            &#125;,<br>            methods: &#123;<br>                handle: function () &#123;<br>                    &#x2F;&#x2F; 控制 isActiv的值在true和false 之间切换<br>                    this.isActive &#x3D; &#39;&#39;<br>                    this.isErr &#x3D; &#39;&#39;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p><code>v-bind:class=&quot;[isActive,isErr]&quot;</code></p>
<p><strong>class样式绑定(数组和对象形式绑定)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;style&gt;<br>        .active &#123;<br>            border: 1px solid red;<br>            width: 100px;<br>            height: 100px;<br>        &#125;<br><br>        .err &#123;<br>            background-color: orangered;<br>        &#125;<br><br>        .test &#123;<br>            color: blue;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div v-bind:class&#x3D;&quot;[isActive,isErr,&#123;test:isTest&#125;]&quot;&gt;1111&lt;&#x2F;div&gt;<br>        &lt;button v-on:click&#x3D;&quot;handle&quot;&gt;切换&lt;&#x2F;button&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                isActive: &#39;active&#39;,<br>                isErr: &#39;err&#39;,<br>                isTest: true<br>            &#125;,<br>            methods: &#123;<br>                handle: function () &#123;<br>                    &#x2F;&#x2F; 控制 isActiv的值在true和false 之间切换<br>                    this.isActive &#x3D; &#39;&#39;<br>                    this.isErr &#x3D; &#39;&#39;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p><code>v-bind:class=&quot;[isActive,isErr,{test:isTest}]&quot;</code></p>
<p><strong>class绑定值得简化操作</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;style&gt;<br>        .active &#123;<br>            border: 1px solid red;<br>            width: 100px;<br>            height: 100px;<br>        &#125;<br><br>        .err &#123;<br>            background-color: orangered;<br>        &#125;<br><br>        .test &#123;<br>            color: blue;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div v-bind:class&#x3D;&quot;arrClass&quot;&gt;1111&lt;&#x2F;div&gt;<br>        &lt;div v-bind:class&#x3D;&quot;objClass&quot;&gt;1111111111&lt;&#x2F;div&gt;<br>        &lt;button v-bind:class&#x3D;&quot;objClass&quot; class&#x3D;&quot;active&quot;&gt;切换&lt;&#x2F;button&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                isActive: &#39;active&#39;,<br>                isErr: &#39;err&#39;,<br><br>                arrClass: [&#39;active&#39;, &#39;err&#39;],<br>                objClass: &#123;<br>                    test: true<br>                &#125;<br>            &#125;,<br>            methods: &#123;<br>                handle: function () &#123;<br>                    &#x2F;&#x2F; 控制 isActiv的值在true和false 之间切换<br>                    this.isActive &#x3D; &#39;&#39;<br>                    this.isErr &#x3D; &#39;&#39;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p><code>默认的class的值会保留，不会覆盖</code></p>
<p><strong>style样式处理</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;style&gt;<br><br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div v-bind:style&#x3D;&quot;&#123;border:borderStyle,width:widthStyle,height:heightStyle&#125;&quot;&gt;&lt;&#x2F;div&gt;<br>        &lt;div v-bind:style&#x3D;&quot;objStyle&quot;&gt;&lt;&#x2F;div&gt;<br>        &#x2F;&#x2F; overStyle的属性会覆盖 objStyle 的属性<br>        &lt;div v-bind:style&#x3D;&quot;[objStyle,overStyle]&quot;&gt;&lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                borderStyle: &#39;1px solid red&#39;,<br>                widthStyle: &#39;100px&#39;,<br>                heightStyle: &#39;100px&#39;,<br>                objStyle: &#123;<br>                    border: &#39;1px solid red&#39;,<br>                    width: &#39;200px&#39;,<br>                    height: &#39;100px&#39;<br>                &#125;,<br>                overStyle: &#123;<br>                    border: &#39;2px solid red&#39;,<br>                    width: &#39;200px&#39;,<br>                    height: &#39;100px&#39;,<br>                    backgroundColor: &#39;red&#39;<br>                &#125;<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p><code>// overStyle的属性会覆盖 objStyle 的属性</code></p>
<hr>
<p><strong>v-if 和 v-show </strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div v-if&#x3D;&#39;score&gt;&#x3D;90&#39;&gt;优秀&lt;&#x2F;div&gt;<br>        &lt;div v-else-if&#x3D;&#39;score&lt;90&amp;&amp;score&gt;&#x3D;80&#39;&gt;良好&lt;&#x2F;div&gt;<br>        &lt;div v-else-if&#x3D;&#39;score&lt;80&amp;&amp;score&gt;60&#39;&gt;良好&lt;&#x2F;div&gt;<br><br>        &lt;div v-else&gt;较差&lt;&#x2F;div&gt;<br>        &lt;div v-show&#x3D;&#39;false&#39;&gt;测试&lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                score: 20,<br>                flag: false<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p><code>v-if 和 v-show 的区别</code><br>1.v-if 控制元素是否渲染到页面<br>2.v-show 控制元素是否显示（已经渲染到了页面）</p>
<hr>
<p><strong>v-for指令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;ul&gt;<br>            &lt;li v-for&#x3D;&#39;(item, index) in fruits&#39;&gt;&#123;&#123;index+&#39;----&#39;+item&#125;&#125;&lt;&#x2F;li&gt;<br>        &lt;&#x2F;ul&gt;<br>        &lt;div :key&#x3D;&#39;item.id&#39; v-for&#x3D;&#39;(item, index) in myfruits&#39;&gt;&#123;&#123;item.name&#125;&#125;---&#123;&#123;index&#125;&#125;&lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                fruits: [&#39;苹果&#39;, &#39;梨子&#39;, &#39;香蕉&#39;],<br>                myfruits: [&#123;<br>                        id: 0,<br>                        name: &#39;banner&#39;<br>                    &#125;,<br>                    &#123;<br>                        id: 1,<br>                        name: &#39;a&#39;<br>                    &#125;,<br>                    &#123;<br>                        id: 2,<br>                        name: &#39;b&#39;<br>                    &#125;,<br>                ]<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p><code>v-for=&#39;(item, index) in myfruits&#39;</code></p>
<p><strong>v-for 和 v-if指令结合使用</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div v-if&#x3D;&#39;value&#x3D;&#x3D;18&#39; v-for&#x3D;&quot;(value,key,index) in obj&quot;&gt;&#123;&#123;value+key+index&#125;&#125;&lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                obj: &#123;<br>                    name: &#39;zhangsan&#39;,<br>                    age: 18<br>                &#125;<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br><br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

<img src="\image\vue\06.png">

<hr>
<p><strong>选项卡案例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;<br>        .tab ul &#123;<br>            overflow: hidden;<br>            padding: 0;<br>            margin: 0;<br>        &#125;<br><br>        .tab ul li &#123;<br>            box-sizing: border-box;<br>            padding: 0;<br>            float: left;<br>            width: 100px;<br>            height: 45px;<br>            line-height: 45px;<br>            list-style: none;<br>            text-align: center;<br>            border-top: 1px solid blue;<br>            border-right: 1px solid blue;<br>        &#125;<br><br>        .tab ul li:first-child &#123;<br>            border-left: 1px solid blue;<br>        &#125;<br><br>        .tab ul li.active &#123;<br>            background-color: orange;<br>        &#125;<br><br>        .tab div &#123;<br>            width: 500px;<br>            height: 300px;<br>            display: none;<br>            text-align: center;<br>            font-size: 30px;<br>            line-height: 300px;<br>            border: 1px solid blue;<br>            border-top: 0px;<br>        &#125;<br><br>        .tab div.current &#123;<br>            display: block;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div class&#x3D;&quot;tab&quot;&gt;<br>            &lt;ul&gt;<br>                &lt;li @click&#x3D;&quot;change(index)&quot; :class&#x3D;&#39;currentIndex&#x3D;&#x3D;index?&quot;active&quot;:&quot;&quot;&#39; :key&#x3D;&quot;item.id&quot;<br>                    v-for&#x3D;&quot;(item,index) in list&quot;&gt;&#123;&#123;item.title&#125;&#125;<br>                &lt;&#x2F;li&gt;<br>            &lt;&#x2F;ul&gt;<br>            &lt;div :class&#x3D;&#39;currentIndex&#x3D;&#x3D;index?&quot;current&quot;:&quot;&quot;&#39; :key&#x3D;&quot;item.id&quot; v-for&#x3D;&quot;(item,index) in list&quot;&gt;<br>                &lt;img :src&#x3D;&quot;item.path&quot; alt&#x3D;&quot;&quot;&gt;<br>            &lt;&#x2F;div&gt;<br>        &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                currentIndex: 0, &#x2F;&#x2F;选项卡当前的索引<br>                list: [&#123;<br>                        id: 1,<br>                        title: &#39;apple&#39;,<br>                        path: &#39;img&#x2F;apple.png&#39;<br>                    &#125;,<br>                    &#123;<br>                        id: 2,<br>                        title: &#39;orange&#39;,<br>                        path: &#39;img&#x2F;orange.png&#39;<br>                    &#125;,<br>                    &#123;<br>                        id: 3,<br>                        title: &#39;lemon&#39;,<br>                        path: &#39;img&#x2F;lemon.png&#39;<br>                    &#125;,<br>                ]<br>            &#125;,<br>            methods: &#123;<br>              &#x2F;&#x2F;将点击 li 的索引给 currentIndex 完成类名的添加<br>                change: function (index) &#123;<br>                    this.currentIndex &#x3D; index;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p>以上案例需要注意的就是<br>属性 currentIndex 设置为 0<br>点击这个li 拿到li 的索引函数  @click=”change(index)<br><code>change: function (index) {</code><br>                   <code>this.currentIndex = index;</code><br>               <code>}</code></p>
<p>总结： 这个案例最精彩就是所有图片都 display:none  添加 display :block 这个类才是最精彩的地方</p>
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">



</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>
</div>]]></content>
  </entry>
  <entry>
    <title>关于自学的这件事情</title>
    <url>/2020/ckpf35kqv007rjov4c5r419ve/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="http://img.netbian.com/file/2020/1104/e27019a72d62df072213619c846bb9f0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">关于怎么自学这件事</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
应该怎么在大学时期自己自学内容。
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
想起刚进实验室的时候，学长就给我一个任务学esp8266单片机,然后丢给我一大堆esp8266文档（然而并没什么用的文档哈哈哈哈哈），自己去学esp8266接入机智云的平台，那时候自己看着别人的教程，一步一步的弄，还是一直有问题。
那时候我每天晚上都在弄这个机智云，有点崩溃的感觉蛤，后面一段时间我放弃这个了。放到那里没有去管。
另一个学期开始我就又重新弄这个了，不过很顺利自己弄好了这个，然后就做了一个407的远程开门的东西（主要就是大冬天早上还要跑去407开门，实在起不来，就偷懒。后面自己也可以做一个定时开门的，就是到了早上的时间可以帮我直接开门，不要我早上来打开app控制的）。自己在学习的过程中认识了一个朋友（网友），我们都是一起玩机智云，相互交流。后面他给我介绍毕设，也赚了3千左右。他现在是项目经理，有时候会聊天，说说现在的技术这类的。
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px;color: red">
说了这么多，就是希望大家学习要有计划一些，像我学习esp8266就是没有规划，浪费了很多时间。但是在学习的时候也可以交到一些很好的朋友。等你学到东西也可以赚钱了。参加比赛也可以拿奖状，也会有奖学金的。比如小程序大赛，物联网大赛等。
</p>

<p style="text-indent: 0em;color: rgb(93, 93, 93);font-size: 13px">
说正题，聊聊自己怎么学习前端的。首先我不能直接就去B站找视频去看。<br>
第一步打开CSDN APP ，搜索学习前端的路线，然后我对比了几个大牛的路线：html css Html5 CSS3 JS（DOM BOM） JQ  VUE 看自己的意愿可以选择JQ学完就学后端的知识，后面在学VUE 。<br>
第二步，知道路线后，自己去B站看html的视频，发现pink老师对比其他老师来说，讲的最好。跟着pink老师学完
html css H5 CSS3 移动端布局，响应式布局。<br>
第三步：自己在网上找资料，自己找到了黑马程序的2019年的就业班的视频，可以跟着视频，学完。<br>
网络上有很多资源是可以找到的，需要你知道怎么去找。<br>
在学习新东西的时候，切忌切忌切忌不能想着自己一步就走完，要慢慢的跟着学习，我之前学习前端的时候，就想看看后端的视频，发现根本不是自己可以看得，很多基础要看前端的，才能理解。
</p>




<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
自己也和一个大佬关系挺好的。我在学习前端的时候，也会给我一些建议，有时候经常聊聊学习之类的。多认识一些大佬很重要的。
他们阅历丰富，可以给你一些学习方向。

<p><img src="/image/zixue.jpg"><br></p>
<p>有兴趣的同学可以看看这个博文，介绍大学应该怎么过得。<br><a href="https://blog.csdn.net/dpjcn1990/article/details/109219632" target="_blank" rel="noopener">https://blog.csdn.net/dpjcn1990/article/details/109219632</a></p>
<p>大学在实验室里面你能学到的最大收获就是自学能力，和查找问题的能力，最重要的就是你问问题的方式<br>问问题题的方式十分重要。假如你遇到一个问题，你直接和别人说，这个怎么出错了应该怎么办，不会有人理你的。<br>问任何问题之前，要百度一下，看有解决方案吗？没有的话，在群里问别人的时候，把问题描述清楚。<br>比如我这个程序有问题了，那么我要把报错的地方截图给别人看就完事了吗？不是这样的，你要把自己的代码给别人看。报错的地方在哪里，讲解清楚。自己做的什么东西，别人才会回答你的问题。<br> ——————————————————- 2020.11.6.23:23。</p>
</p>



</div>]]></content>
  </entry>
  <entry>
    <title>归校的火车上</title>
    <url>/2020/ckpf35krn008cjov42eeue6lk/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JQuey学习总结</title>
    <url>/2020/ckpf35kkj0013jov4g16555sg/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1886378978,438393284&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">JQuery学习总结</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
之前在学JQuery之前我就百度过，感觉    JQuey被大家都说要被淘汰了，但是学完之后感觉JQ还是很强大的，
尽管我还没学其他框架，但是有些框架就是用JQ写的底层语法，都学点知识不会有错的。
<br>
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
JQ学习了什么，可以用JQ做什么网页特效呢？

</p>

<p style="text-indent: 0em;color: rgb(93, 93, 93);font-size: 13px;color: red">
1：jQuery 的入口函数 <br>
2： jQuery 的顶级对象 $ <br>
3：DOM 对象与 jQuery 对象之间相互转换 <br>
4：jQuery 基础选择器  <br>
5： jQuery 层级选择器  <br>
6：隐式迭代（重要） <br>
7：jQuery 筛选选择器  <br>
8：jQuery 筛选方法（重点） <br>
9:jQuery 里面的排他思想 <br>
10:链式编程  <br>
11:jQuery 样式操作 <br>
12: jQuery 效果 <br>
13: jQuery 属性操作 <br>
14: jQuery 内容文本值 <br>
15:jQuery 元素操作 <br>
16:jQuery 事件 <br>
17:jQuery 其他方法  <br>
</p>

<p style="text-indent: 0em;color: rgb(93, 93, 93);font-size: 13px">
网页特效：<br>
1：淘宝服饰精品案例分析 <br>
2：tab 栏切换 <br>
3：王者荣耀手风琴效果 <br>
4：购物车案例模块-全选 <br>
5：购物车案例模块-增减商品数量 <br>
6：购物车案例模块-修改商品小计 <br>
7：购物车案例模块-计算总计和总额 <br>
8：购物车案例模块-删除商品模块 <br>
9：购物车案例模块-选中商品添加背景 <br>
10：带有动画的返回顶部 <br>
11：品优购电梯导航 <br>
12：发布微博案例 <br>
13：toDoList <br>
</p>


<p>3：等我学完高级JS后，就是复习之前学过的JS JQ WEBAPI 的案例。<br>把学过的知识在整理一下，当然整理的同时要学习VUE了。</p>
<p> ——————————————————- 2020.10.28.16:05。</p>
</div>












]]></content>
  </entry>
  <entry>
    <title>博客上面应该写什么内容</title>
    <url>/2020/ckpf35kri0089jov4cip90rff/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1180736612,2334973194&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">关于写博客这件事</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
博客到底应该写什么内容
<br>写的内容对自己和别人有什么帮助
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
关于博客写什么一直是我在思考的一个问题？
最近和学弟聊天，他说自己不太想写博客了，感觉写博客很麻烦，有点浪费时间。
这个想法在我之前写博客的时候也有的一个想法。
最近自己写的一些CSS细节的东西，自己感觉也没有必要写。我还不如自己写项目，然后在配置布局的时候，写出来印象会深刻一些。
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px;color: red">
那么我需要以后在博客上写什么呢？
我是不是应该把博客当做一个笔记本来写呢，那是不行的。对于写笔记我还是推荐XMind来写。
用结构图的形式来记笔记，可以很快的找到自己想要的知识。
博客从来不是一个笔记本。经过朋友的推荐我知道了叶子的博客，我突然发现自己要写什么了。
叶子的博客在我的友链接里面，有兴趣的朋友可以看看。
</p>

<p style="text-indent: 0em;color: rgb(93, 93, 93);font-size: 13px">
1：自己最近看的技术书籍写一个书籍分享在博客里面。<br>
2：自己学习新东西的一个总结放到博客上面。<br>
3：自己做的项目有一些比较容易犯错的地方和难理解的地方写在博客上面记录。<br>
4：平时学习的感悟，可以写到博客里面。就比如说学前端真的容易学了前面知识忘记后面知识，需要一个合理的安排学习计划。<br>
5：平时有趣的事情可以分享在博客里面，也会分享自己的一些日记，不过是加密的。<br>
6：最重要的一条就是要经常写博客了，看写博客的频率就知道自己有没有认真学习。<br>
</p>




<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
今天就聊到了这里了，明天还要加油学习呢。<br>
 ------------------------------------------------------- 2020.10.26.21:45。
</p>



</div>





]]></content>
  </entry>
  <entry>
    <title>我的第一个1024</title>
    <url>/2020/ckpf35krw008njov4edyf5naq/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">属于我的第一个1024</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
有点没想到会从事程序员吧！一年前的自己
<br>自己以前觉得会从事电子行业，但是自己好像很糟糕啊.
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
第一个1024，你好啊。我现在还在学习前端知识呢！要不了多久我也会成为你其中的一员。<br>
人生太多的选择导致有些选择不是自己可以控制的。以前认识很多网上学电子的朋友，觉得他们和我一样很喜欢电子制作。当我放弃电子的时候，回过头来发现我们都放弃了（有点可笑）。
有时候打败我们的是现实，这句话还是很有道理的。但是我很喜欢前端啊！
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
今天是英雄联盟S10世界赛的半决赛，G2遗憾输给DWG以3:1结束了比赛，也是我学完了JQuery第一天的内容。
我是一个英雄联盟云玩家，但是我喜欢faker的电子竞技精神，就像我喜欢越前龙马的网球精神一样。
精神这种东西就是一种寄托，让你在失意的时候给你力量。也是我喜欢越前龙马这么多年的原由。
就像龙马经常和对手说的，你还差的远呢？其实也是和自己说的。因为自己面前有一座大山，就是自己的父亲，一个在动漫里属于BUG的男人。而这句话，你还差的远呢？也是告诉自己要加油，不要骄傲。
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
聊聊自己为什么喜欢程序员吧？<br>
以前对程序员的印象就是头发少，打字很厉害。当自己接触后，发现程序员很伟大的。
他们在不停的优化网络世界，推动世界的脚步。他们可以用自己的技能帮助公司发展起来。
用简单的几行代码可以做很多事情。当然也包括他们的高薪对我的诱惑。
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
聊聊自己为什么会接触前端？<br>
我接触前端真的是因为电子，那时候在B站看到一个网页控制单片机的项目。
那时候我觉的好好玩啊，因为上位机一直是我想去做的，看到网页控制就很喜欢上了。
然后自己研究，也问其他up主，我第一次知道了HTML这个标签。自己在B站找视频学习了。
但是学的有点糟糕，因为那时候看的教学视频不是很好。直到遇到了pink老师。
一个很好的教学视频，此后让我对前端有了很浓厚的兴趣。
</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
今天就聊到了这里了，明天还要加油学习呢。<br>
 ------------------------------------------------------- 2020.10.24.23:00。
</p>



</div>]]></content>
  </entry>
  <entry>
    <title>JSandwebApi</title>
    <url>/2020/ckpf35kl1001ljov42jr8dz8a/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2977582013,469025130&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">WebApi总结</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
今天算是学完了WebApi和JS基础语法,    总结一下学习会webapi和JS可以做到什么页面效果。
<br>后面会把总结的页面效果全部写一遍放到博客上面。
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<h1 align="center">DOM API </h1>

<p><strong>获取元素</strong>    </p>
<ul>
<li>获取页面中的元素可以使用以下几种方式:</li>
</ul>
<ol>
<li><p>根据 ID 获取</p>
</li>
<li><p>根据标签名获取</p>
</li>
<li><p>通过 HTML5 新增的方法获取</p>
</li>
<li><p>特殊元素获取</p>
</li>
</ol>
<hr>
<p><strong>根据 ID 获取</strong></p>
<p>使用 getElementById() 方法可以获取带有 ID 的元素对象</p>
<blockquote>
<p>document.getElementById(‘id’);</p>
</blockquote>
<p>使用 console.dir() 可以打印我们获取的元素对象，更好的查看对象里面的属性和方法。<br><code>console.dir 打印我们返回的元素对象 更好的查看里面的属性和方法</code></p>
<hr>
<p><strong>根据标签名获取</strong><br>使用 getElementsByTagName() 方法可以返回带有指定标签名的对象的集合。</p>
<blockquote>
<p>document.getElementsByTagName(‘标签名’);</p>
</blockquote>
<p>注意：</p>
<ol>
<li>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。</li>
<li>得到元素对象是动态的</li>
<li>如果获取不到元素,则返回为空的伪数组(因为获取不到对象)</li>
</ol>
<p>还可以获取某个元素(父元素)内部所有指定标签名的子元素.</p>
<blockquote>
<p>element.getElementsByTagName(‘标签名’);<br><code>注意：父元素必须是单个对象(必须指明是哪一个元素对象). 获取的时候不包括父元素自己。</code></p>
</blockquote>
<img src="/image/DOM/01.png">

<hr>
<p><strong>通过 HTML5 新增的方法获取</strong></p>
<blockquote>
<p>1.document.getElementsByClassName(‘类名’)；// 根据类名返回元素对象集合<br>2.document.querySelector(‘选择器’); // 根据指定选择器返回第一个元素对象<br>3.document.querySelectorAll(‘选择器’); // 根据指定选择器返回</p>
</blockquote>
<p><code>注意：</code><br><code>querySelector 和 querySelectorAll里面的选择器需要加符号,比如:document.querySelector(&#39;#nav&#39;);</code></p>
<hr>
<p><strong> 获取特殊元素（body，html）</strong></p>
<ul>
<li>获取body元素</li>
</ul>
<blockquote>
<p>1.doucumnet.body // 返回body元素对象</p>
</blockquote>
<ul>
<li>获取html元素</li>
</ul>
<blockquote>
<p>1.document.documentElement // 返回html元素对象</p>
</blockquote>
<hr>
<p><strong>事件基础</strong></p>
<p>事件概述<br>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。<br>简单理解： 触发— 响应机制。<br>网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个<br>事件，然后去执行某些操作。</p>
<p><strong>事件三要素</strong></p>
<ol>
<li>事件源 （谁）</li>
<li>事件类型 （什么事件）</li>
<li>事件处理程序 （做啥）</li>
</ol>
<p>唐伯虎点秋香案例：</p>
<img src="/image/DOM/02.png">


<p><strong>执行事件的步骤</strong></p>
<ol>
<li>获取事件源</li>
<li>注册事件（绑定事件）</li>
<li>添加事件处理程序（采取函数赋值形式）</li>
</ol>
<p><strong>常见的鼠标事件</strong></p>
<table>
<thead>
<tr>
<th align="left">鼠标事件</th>
<th align="left">触发条件</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onclick</td>
<td align="left">鼠标点击左键触发</td>
</tr>
<tr>
<td align="left">onmouseover</td>
<td align="left">鼠标经过触发</td>
</tr>
<tr>
<td align="left">onmouseout</td>
<td align="left">鼠标离开触发</td>
</tr>
<tr>
<td align="left">onfocus</td>
<td align="left">获得鼠标焦点触发</td>
</tr>
<tr>
<td align="left">onblur</td>
<td align="left">失去鼠标焦点触发</td>
</tr>
<tr>
<td align="left">onmousemove</td>
<td align="left">鼠标移动触发</td>
</tr>
<tr>
<td align="left">onmouseup</td>
<td align="left">鼠标弹起触发</td>
</tr>
<tr>
<td align="left">onmousedown</td>
<td align="left">鼠标按下触发</td>
</tr>
</tbody></table>
<hr>
<p><strong>操作元素</strong></p>
<p>JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内<br>容 、属性等。注意以下都是属性</p>
<p><strong>改变元素内容</strong></p>
<blockquote>
<p>element.innerText<br>从起始位置到终止位置的内容, 但它去除 html 标签， <code>同时空格和换行也会去掉</code></p>
</blockquote>
<blockquote>
<p>element.innerHTML<br>起始位置到终止位置的全部内容，包括 html 标签，<code>同时保留空格和换行</code></p>
</blockquote>
<p><strong>常用元素的属性操作</strong></p>
<ol>
<li>innerText、innerHTML 改变元素内容</li>
<li>src、href</li>
<li>id、alt、title</li>
</ol>
<p>点击按钮更换图片案例：<br><img src="/image/DOM/03.png"></p>
<p>不同时间段显示不同图片案例：<br><img src="/image/DOM/04.png"></p>
<hr>
<p><strong>表单元素的属性操作</strong></p>
<p>利用 DOM 可以操作如下表单元素的属性：</p>
<blockquote>
<p>type、value、checked、selected、disabled</p>
</blockquote>
<p>按下按钮改变表单里的值，并且按钮被禁用案例<br><img src="/image/DOM/05.png"></p>
<p>总结：<br><code>如果想要某个表单被禁用 不能再点击 disabled  我们想要这个按钮 button禁用</code><br><code>this 指向的是事件函数的调用者 btn</code><br><code>表单里面的值 文字内容是通过 value 来修改的</code></p>
<p>案例：仿京东显示密码</p>
<p>① 核心思路： 点击眼睛按钮，把密码框类型改为文本框就可以看见里面的密码<br>② 一个按钮两个状态，点击一次，切换为文本框，继续点击一次切换为密码框<br>③ 算法：利用一个flag变量，来判断flag的值，如果是1 就切换为文本框，flag 设置为0，如<br>果是0 就切换为密码框，flag设置为1<br><img src="/image/DOM/06.png"></p>
<hr>
<p><strong>样式属性操作</strong></p>
<p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p>
<ol>
<li>element.style 行内样式操作</li>
<li>element.className 类名样式操作</li>
</ol>
<p>注意：</p>
<blockquote>
<p>1.JS 里面的样式采取驼峰命名法 比如 fontSize、 backgroundColor<br>2.JS 修改 style 样式操作，产生的是行内样式，CSS 权重比较高<br>3.div.style里面的属性 采取驼峰命名法 </p>
</blockquote>
<p>案例：点击div改变颜色和大小<br><img src="/image/DOM/07.png"></p>
<p>案例： 淘宝点击关闭二维码</p>
<p>当鼠标点击二维码关闭按钮的时候，则关闭整个二维码。</p>
<p>案例分析<br>① 核心思路： 利用样式的显示和隐藏完成， display:none 隐藏元素 display:block 显示元素<br>② 点击按钮，就让这个二维码盒子隐藏起来即可</p>
<img src="/image/DOM/08.png">


<p>案例： 循环精灵图背景</p>
<p>可以利用 for 循环设置一组元素的精灵图背景<br><img src="/image/DOM/09.png"></p>
<p>案例分析<br>① 首先精灵图图片排列有规律的<br>② 核心思路： 利用for循环 修改精灵图片的 背景位置 background-position<br>③ 剩下的就是考验你的数学功底了<br>④ 让循环里面的 i 索引号 * 44 就是每个图片的y坐标</p>
<img src="/image/DOM/10.png">


<p>案例：显示隐藏文本框内容<br>当鼠标点击文本框时，里面的默认文字隐藏，当鼠标离开文本框时，里面的文字显示。<br><img src="/image/DOM/11.png"></p>
<p>案例分析<br>① 首先表单需要2个新事件，获得焦点 onfocus 失去焦点 onblur<br>② 如果获得焦点， 判断表单里面内容是否为默认文字，如果是默认文字，就清空表单内容<br>③ 如果失去焦点， 判断表单内容是否为空，如果为空，则表单内容改为默认文字</p>
<img src="/image/DOM/12.png">


<p><strong>样式属性操作</strong></p>
<p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p>
<blockquote>
<p>1.element.style 行内样式操作<br>2.element.className 类名样式操作</p>
</blockquote>
<img src="/image/DOM/13.png">

<p>注意：</p>
<ol>
<li>如果样式修改较多，可以采取操作类名方式更改元素样式。</li>
<li>class因为是个保留字，因此使用className来操作元素类名属性</li>
<li>className 会直接更改元素的类名，会覆盖原先的类名。</li>
<li>如果想要保留原先的类名，我们可以这么做 多类名选择器<br>this.className = ‘first change’;</li>
</ol>
<p>案例： 密码框格式提示错误信息</p>
<blockquote>
<p>用户如果离开密码框，里面输入个数不是6-16，则提示错误信息，否则提示输入正确信息</p>
</blockquote>
<img src="/image/DOM/14.png">
<img src="/image/DOM/15.png">



</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93) ;font-size: 13px">
<strong>排他思想</strong>
先把全部人干掉，最后留下自己

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>  &lt;button&gt;按钮1&lt;&#x2F;button&gt;<br>  &lt;button&gt;按钮2&lt;&#x2F;button&gt;<br>  &lt;button&gt;按钮3&lt;&#x2F;button&gt;<br>  &lt;button&gt;按钮4&lt;&#x2F;button&gt;<br>  &lt;button&gt;按钮5&lt;&#x2F;button&gt;<br>  &lt;script&gt;<br>    &#x2F;&#x2F; 获取的是一个伪数组(伪数组其实就是对象)<br>    var btns &#x3D; document.getElementsByTagName(&quot;button&quot;);<br><br>    for (var i &#x3D; 0; i &lt; btns.length; i++) &#123;<br>      btns[i].onclick &#x3D; function () &#123;<br>        for (var i &#x3D; 0; i &lt; btns.length; i++) &#123;<br>          btns[i].style.backgroundColor &#x3D; &quot;&quot;;<br>        &#125;<br>        this.style.backgroundColor &#x3D; &quot;pink&quot;;<br>      &#125;;<br>    &#125;<br>  &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure>

<p>效果展示<br><img src="/image/DOM/01.gif"></p>
<p><strong>百度换肤的制作</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>    &#x2F;&#x2F; 1. 获取元素 <br>    var imgs &#x3D; document.querySelector(&#39;.baidu&#39;).querySelectorAll(&#39;img&#39;);<br>    &#x2F;&#x2F; console.log(imgs);<br>    &#x2F;&#x2F; 2. 循环注册事件 <br>    for (var i &#x3D; 0; i &lt; imgs.length; i++) &#123;<br>        imgs[i].onclick &#x3D; function () &#123;<br>            &#x2F;&#x2F; this.src 就是我们点击图片的路径   images&#x2F;2.jpg<br>            &#x2F;&#x2F; console.log(this.src);<br>            &#x2F;&#x2F; 把这个路径 this.src 给body 就可以了<br>            document.body.style.backgroundImage &#x3D; &#39;url(&#39; + this.src + &#39;)&#39;;<br>        &#125;<br>    &#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

<p><strong>表格隔行变色</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>    &#x2F;&#x2F; 1.获取元素 获取的是 tbody 里面所有的行<br>    var trs &#x3D; document.querySelector(&#39;tbody&#39;).querySelectorAll(&#39;tr&#39;);<br>    &#x2F;&#x2F; 2. 利用循环绑定注册事件<br>    for (var i &#x3D; 0; i &lt; trs.length; i++) &#123;<br>        &#x2F;&#x2F; 3. 鼠标经过事件 onmouseover<br>        trs[i].onmouseover &#x3D; function() &#123;<br>                &#x2F;&#x2F; console.log(11);<br>                this.className &#x3D; &#39;bg&#39;;<br>            &#125;<br>            &#x2F;&#x2F; 4. 鼠标离开事件 onmouseout<br>        trs[i].onmouseout &#x3D; function() &#123;<br>            this.className &#x3D; &#39;&#39;;<br>        &#125;<br>    &#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

<p><strong>全选和不全选</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  var quan &#x3D; document.getElementById(&#39;quan&#39;)<br>  var lis &#x3D; document.getElementById(&#39;ulId&#39;).getElementsByTagName(&#39;input&#39;)<br>  quan.onclick &#x3D; function () &#123;<br><br>    for (var i &#x3D; 0; i &lt; lis.length; i++) &#123;<br>      lis[i].checked &#x3D; this.checked<br>    &#125;<br>  &#125;<br><br>  for (var i &#x3D; 0; i &lt; lis.length; i++) &#123;<br>    lis[i].onclick &#x3D; function () &#123;<br>      var flage &#x3D; true<br>      for (var i &#x3D; 0; i &lt; lis.length; i++) &#123;<br>        if (!lis[i].checked)<br>          flage &#x3D; false<br>        break;<br>      &#125;<br>      quan.checked &#x3D; flage<br>    &#125;<br>  &#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>

</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93) ;font-size: 13px">


</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93) ;font-size: 13px">


</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93) ;font-size: 13px">


</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93) ;font-size: 13px">


</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93) ;font-size: 13px">


</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93) ;font-size: 13px">


</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93) ;font-size: 13px">


</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93) ;font-size: 13px">


</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93) ;font-size: 13px">


</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93) ;font-size: 13px">


</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93) ;font-size: 13px">


</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93) ;font-size: 13px">


</p>
</div>










]]></content>
      <tags>
        <tag>WEBAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>在家学习的日子</title>
    <url>/2020/ckpf35krd0083jov4fp68a7fx/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240)">
<img src="/image/back/homeDay.jpg" style="width: 162px ;height: 130px;margin-left: 0 ;margin-top: 15px; float: left;">

<p style="float: left;margin-left: 20px";>感觉时间还是过的很快，不知不觉一个月过去了。<br>
    也发现自己竟然有一个月没有怎么出过门了。<br>
</p>

<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
    今天想到了最近给自己立的flag，要减肥10斤，所以出去散步了一会。才发现自己真的一个月没有怎么出去过。
    一般出去就是赶集，要么就是一整天待在家里看视频，要么就是睡觉。
    今天跑到了水库看了一下风景，水库旁边还是有人在钓鱼。
    那也是我喜欢的日子啊.
</p>
<img src="/image/back/shuiku.jpg" style="width: 500px;height: 330px">
<p style="text-indent: 2em;color: rgb(93, 93, 93) ;font-size: 13px">
    昨天和室友微信电话聊了聊天，突然聊到一个问题。有些人无论做什么都会有成就。
    以前在QQ群里也看见有人说过，为什么同样的事情，别人做的就是比你好很多。这个是有原因的。
    我也想成为那个别人眼里的那个人，好好加油吧！你不比别人差的.


</p>

</div>]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>在家学习的日子</tag>
      </tags>
  </entry>
  <entry>
    <title>月总结</title>
    <url>/2020/ckpf35ks8008zjov4gss31fas/</url>
    <content><![CDATA[<img src="/image/back/Monthly summary.jpg" style="width: 162px ;height: 130px;margin-left: 0 ;margin-top: 15px; float: left;">

<p style="float: left;margin-left: 20px">自学一个月的总结情况，本来早就要写的，被自己一拖再拖，留到了今天<br>
</p>

<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: #3366CC">
算起来这个月总结，是要从10.16号就要写了，被自己拖到了今天来写。<br>
从刚开始的HTML CSS flex布局 响应式布局 到JS基础语法  <br>到webapi语法也就是DOM和BOM等学习。<br>
webapi还差一点点就学完了。差不多一个月学了这些。<br>
</p>

<p style="text-indent: 2em;color: #3366CC">
我还是一个性子有点急的人，在学习的时候总是想去看些后端视频和一个框架的学习。<br>
这种想法是不对的，要按照脚步一步一步的来。<br>
我给自己是三个月的时间来学习，然后就去投简历。最近是学习webapi的剩下几天知识，然后复习HTML的知识。<br>
因为有时候学习了前面的会忘记后面的知识，要不断去看看，在项目中灵活使用。<br>
最近一个月的安排把JQ和JS高级语法学完，然后学习vue的基础语法，和后端的一些知识。<br>
</p>

<p style="text-indent: 2em;color: #3366CC">
如果要说评价这个月的自己，我给自己打一个3星评价。有点不满意这个月的学习状态。<br>
后面希望继续加油吧！<br>
</p>



<p style="text-indent: 2em;color: #3366CC">
第二个月的总结又要开始了。<br>
突然看到自己第一个月学习了东西还是挺多的<br>
第二个月就学习的很少了，不过上个月的任务是基本完成了。<br>
说说自己的第三个月的任务：js复习完毕，面试题看完。vue的学习基本结束，<br>
京东项目的完成，外加一些JS逻辑写完。<br>
可以的话希望把bootstrap框架看下。<br>
这个月的评价就是三颗星吧，不是很满意的。<br>
</p>


<p style="text-indent: 2em;color: #3366CC">
第三个月的总结又要开始了。<br>
在这里看着上一个月的任务，有点惭愧啊。<br>
这第三个月总结一些自己学习的东西吧。<br>
html css js jq node(数据库的知识没学) flex布局 ajax axios  gulp打包工具 webpack打包工具 vue <br>
完成了一个bootstrap的项目。 <br>
但是我目前要做的就是把这个项目的一些重要的，难理解的地方写到博客上来。<br>
<br>
第四个月的目标：<br>
1：bootstrap项目的解析，并且把这个项目完善。<br>
2：vue商城项目的完善。<br>
3：uniapp学习完毕，并且掌握要点。<br>
4：小米商城的静态页面。<br>
5：vue案例的完成。<br>
6：把以前学习的东西深入解析一遍，看面试题目。<br>

</p>


<p style="text-indent: 2em;color: #3366CC">
第四个月的总结要开始了。<br>
感觉这个月过得很快<br>
第四个月主要就是vue的学习，面试视频还有博客的记录。<br>


<p>第五个月的目标：<br><br>1：把去哪儿的vue项目完成<br><br>2：JS复习完毕。<br><br>3：uniapp的项目结束。<br><br>4：小米商城的静态页面。<br><br>5：酷狗网页的完成。<br></p>
<p style="text-indent: 2em;color: #3366CC">
第五个月的总结要开始了。<br>
这个月有点怠慢了<br>
第五个月主要是把vue的面试题和HTML CSS JS 复习完毕，然后看面试题。总复习15天<br>







</p>]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>在家自学月总结</tag>
      </tags>
  </entry>
  <entry>
    <title>htmlandcss细节注意点</title>
    <url>/2020/ckpf35kqf0078jov47c4cg8ui/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1208788403,3730020206&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">HTNL细节细说</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
自己平时遇见的html和css的一些细节问题的处理方式的记录笔记<br><strong>第一个:</strong> margin的给子盒子一个margin-top会导致父盒子塌陷问题。
<br>
</div>


</div>
<a id="more"></a>
</div>





<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<div style="background-color: rgb(255, 251, 240)">
<div style="width: 50px;height: 30px;background-color: red; color: skyblue;border-radius: 15px;text-align: center; line-height: 30px;"><strong>一</strong></div>
<div>
<h6>margin导致盒子塌陷问题</h6>
<span style="display: block;">
    <p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
1:我们给子盒子一个距离父盒子的高度，在父盒子里面移动。可以看到子盒子和父盒子一起掉下去了。
而没有在父盒子里面移动。这就是外边距合并嵌套块元素塌陷的问题。
解决方案有三种，前两种给父盒子定义上边框和上内边框。最后一种给父盒子添加一个样式  overflow: hidden;</p>
    <img src="/image/htmlDetails/01.png">    
</span>

<span style="display: block;">
    <p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
2:当我们给父盒子添加一个样式  overflow: hidden; 详细看下图的效果。可以达到我们想要的要求。</p>
    <img src="/image/htmlDetails/02.png">    
</span>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
总结一下：为什么会发生盒子塌陷问题。
目前自己个人理解就是：把父盒子和子盒子看做两张大小不一样的纸。这两张纸粘在一起了，当你给子盒子物理力，来拖动子盒子。这个物理力会带动父盒子一起移动的。就会发生塌陷问题。
</p>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
当我们给父盒子添加上边框和上内边框，相当于将父盒子固定了（可以看成一个相册的边框），拖动子盒子的时候不会带动父盒子。也就不会发生塌陷问题。<br>
overflow: hidden    内容会被修剪，并且其余内容是不可见的。
目前还不是很理解这个。后续自己知道了，再加上。
</p>
</div>



<hr>
<div style="width: 50px;height: 30px;background-color: red; color: skyblue;border-radius: 15px;text-align: center; line-height: 30px;"><strong>二</strong></div>
<div>
<span style="display: block;">

<h6>padding会撑大盒子的问题</h6>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
1：给一个div设置宽度和高度的时候，再给padding时，会撑大盒子如下图：</p>
    <img src="/image/htmlDetails/03.png">    
</span>

<span style="display: block;">
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">    
2:当我们给div只设置宽度的时候，宽度会变大，高度不变，如下图所示： <br>宽度是原来的200加上padding的左右值也就是100+100等于400 <br>
而盒子 高度等于200，也就是padding的上下各100相加即为200高度</p>
    <img src="/image/htmlDetails/04.png">    
</span>

<span style="display: block;">
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">    
3:当我们给div设置一个高度和宽度，在div里面写一个子盒子，子盒子不给定宽度和高度，给定padding时
子盒子的宽度就是父盒子div的宽度，但是高度就padding的设定值的两倍关系。</p>
    <img src="/image/htmlDetails/05.png">    
</span>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
总结一下：<br>
1：我们给定一个盒子的高度和padding值时。这个盒子的高度==原高度+padding值得两倍，盒子宽度等于屏幕的宽度。<br>
2：我们给定一个盒子的宽度和padding值时。这个盒子的宽度==原宽度+padding值得两倍，盒子的高度等于padding值得两倍。
</p>

</div>


<hr>
<div style="width: 50px;height: 30px;background-color: red; color: skyblue;border-radius: 15px;text-align: center; line-height: 30px;"><strong>三</strong></div>
<div>
<span style="display: block;">

<h6>元素浮动问题</h6>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
1：浮动的盒子会影响下面的标准留的盒子，需要清除浮动,给父元素添加其相关属性</p>    
    <img src="/image/htmlDetails/06.png"><br>
    <img src="/image/htmlDetails/07.png"><br>    
    <img src="/image/htmlDetails/08.png"><br>    
</span>

<span style="display: block;">
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">    
2:上图可以看到浮动的盒子不占有位置，浮动的盒子不影响上面的标准流
只影响下面的标准流</p>

</span>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
总结一下：<br>
浮动（float）的元素最重要特性：<br>
1. 脱离标准普通流的控制（浮）  移动到指定位置（动）, （俗称脱标） <br>
2. 浮动的盒子不再保留原先的位置 <br>
2. 如果多个盒子都设置了浮动，则它们会按照属性值一行内显示并且顶端对齐排列。 <br>
3. 浮动元素会具有行内块元素特性。 <br>
任何元素都可以浮动。不管原先是什么模式的元素，添加浮动之后具有行内块元素相似的特性。 <br>
 如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定 <br>
 浮动的盒子中间是没有缝隙的，是紧挨着一起的 <br>
 行内元素同理<br>
<strong>由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会 影响下面的标准流盒子。 如果父元素有高度的时候，则不需要清除浮动效果。</strong><br>
清除浮动的方法很多，只记住overflow : hidden
</p>

</div>


<hr>
<div style="width: 50px;height: 30px;background-color: red; color: skyblue;border-radius: 15px;text-align: center; line-height: 30px;"><strong>四</strong></div>
<div>
<span style="display: block;">

<h6>相对定位</h6>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
1：相对自己本身的位置进行移动</p>
    <img src="/image/htmlDetails/09.png">    
</span>

<span style="display: block;">
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">    
总结<br>
<strong>1. 它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。<br>
2. 原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待它。<br>
因此，相对定位并没有脱标。它最典型的应用是给绝对定位当爹的。。</strong></p>

</span>



</div>

<hr>
<div style="width: 50px;height: 30px;background-color: red; color: skyblue;border-radius: 15px;text-align: center; line-height: 30px;"><strong>五</strong></div>
<div>
<span style="display: block;">

<h6>绝对定位</h6>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
1：绝对定位是元素在移动位置的时候，是相对于它祖先元素来说的（拼爹型）。</p>
    <img src="/image/htmlDetails/10.png">    
</span>

<span style="display: block;">
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">    
总结:上图看出，绝对定位会脱离标准流，而相对定位不会脱离标准流。也是后面子绝父相的由来。<br></p>
1. 如果没有祖先元素或者祖先元素没有定位，则以浏览器为准定位（Document 文档）。 <br>
2. 如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置。 <br>
3. 绝对定位不再占有原先的位置。（脱标） <br>
所以绝对定位是脱离标准流的<br>
</span>



</div>

<hr>
<div style="width: 50px;height: 30px;background-color: red; color: skyblue;border-radius: 15px;text-align: center; line-height: 30px;"><strong>六</strong></div>
<div>
<span style="display: block;">

<h6>子绝父相的由来</h6>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
1：父盒子布局时，需要占有位置，因此父亲只能是相对定位，子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。 </p>
    <img src="/image/htmlDetails/11.png">    
</span>



</div>


<hr>
<div style="width: 50px;height: 30px;background-color: red; color: skyblue;border-radius: 15px;text-align: center; line-height: 30px;"><strong>七</strong></div>
<div>
<span style="display: block;">

<h6>固定定位及固定定位在版心的处理</h6>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
1：浮动的盒子会影响下面的标准留的盒子，需要清除浮动</p>
    <img src="/image/htmlDetails/03.png">    
</span>

<span style="display: block;">
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">    
2:当我们给div只设置宽度的时候，宽度会变大，高度不变，如下图所示： <br>宽度是原来的200加上padding的左右值也就是100+100等于400 <br>
而盒子 高度等于200，也就是padding的上下各100相加即为200高度</p>
    <img src="/image/htmlDetails/04.png">    
</span>

<span style="display: block;">
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">    
3:当我们给div设置一个高度和宽度，在div里面写一个子盒子，子盒子不给定宽度和高度，给定padding时
子盒子的宽度就是父盒子div的宽度，但是高度就padding的设定值的两倍关系。</p>
    <img src="/image/htmlDetails/05.png">    
</span>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">
总结一下：<br>
1：我们给定一个盒子的高度和padding值时。这个盒子的高度==原高度+padding值得两倍，盒子宽度等于屏幕的宽度。<br>
2：我们给定一个盒子的宽度和padding值时。这个盒子的宽度==原宽度+padding值得两倍，盒子的高度等于padding值得两倍。
</p>

</div>












<!-- 最后的div -->
</div>









]]></content>
      <categories>
        <category>前端细节</category>
      </categories>
      <tags>
        <tag>CSS细节注意</tag>
      </tags>
  </entry>
  <entry>
    <title>了解一下line-height的设置</title>
    <url>/2020/ckpf35kqr007pjov45ll97we9/</url>
    <content><![CDATA[<img src="http://image.mamicode.com/info/201907/20190724224655684965.png" style="width: 162px ;height: 130px;margin-left: 0 ;margin-top: 15px; float: left;">

<p style="float: left;margin-left: 20px">今天突然想了解一下line-height=1.5  line-height=150%  line-height=1.5rem 的区别。
</p>

<a id="more"></a>
<h2 id="主要今天看了一个京东的移动端布局，在body里面写了这个："><a href="#主要今天看了一个京东的移动端布局，在body里面写了这个：" class="headerlink" title="主要今天看了一个京东的移动端布局，在body里面写了这个："></a>主要今天看了一个京东的移动端布局，在body里面写了这个：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">body &#123; margin: 0 auto; min-width: 320px; max-width: 640px; background: #fff; font-size: 14px; font-family: -apple-system, Helvetica, sans-serif; line-height: 1.5; color: #666; &#125;<br></code></pre></td></tr></table></figure>
<h3 id="line-height-1-5-和line-height-150-line-height-1-5rem-的区别。"><a href="#line-height-1-5-和line-height-150-line-height-1-5rem-的区别。" class="headerlink" title="line-height: 1.5;和line-height=150%  line-height=1.5rem 的区别。"></a>line-height: 1.5;和line-height=150%  line-height=1.5rem 的区别。</h3><h2 id="line-height-1-5-和line-height-150-的区别"><a href="#line-height-1-5-和line-height-150-的区别" class="headerlink" title="line-height: 1.5;和line-height=150% 的区别"></a>line-height: 1.5;和line-height=150% 的区别</h2><p>一、区别</p>
<p>区别体现在子元素继承时，如下：</p>
<p>父元素设置line-height:1.5会直接继承给子元素，子元素根据自己的font-size再去计算子元素自己的line-height。<br>父元素设置line-height:150%是计算好了line-height值，然后把这个计算值给子元素继承，子元素继承拿到的就是最终的值了。此时子元素设置font-size就对其line-height无影响了。</p>
<p>二、举例</p>
<p>比如父元素设置属性：font- size:14px;line-height:1.5,child设置font-size:26px;</p>
<p>那么父元素：line-height = 14px * 1.5 = 21px，子元素：line-height = 26px * 1.5 = 39px。</p>
<p>父元素设置属性：font-size:14px;line-height:150%,child设置font-size:26px;</p>
<p>那么父元素：line-height = 14px * 150% = 21px，子元素：line-height = 父元素的line-height = 21px。</p>
<h3 id="自己也写了一个代码验证，发现line-height-1-5-的子元素行高要比line-height-150-的子元素行高-高。"><a href="#自己也写了一个代码验证，发现line-height-1-5-的子元素行高要比line-height-150-的子元素行高-高。" class="headerlink" title="自己也写了一个代码验证，发现line-height:1.5 的子元素行高要比line-height:150%的子元素行高 高。"></a>自己也写了一个代码验证，发现line-height:1.5 的子元素行高要比line-height:150%的子元素行高 高。</h3>]]></content>
      <categories>
        <category>html和css学习</category>
      </categories>
      <tags>
        <tag>line-height对比</tag>
      </tags>
  </entry>
  <entry>
    <title>最近一个月学习时间安排表</title>
    <url>/2020/ckpf35ks1008sjov49un942ac/</url>
    <content><![CDATA[<img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2400629963,2171356888&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0 ;margin-top: 15px; float: left;">

<p style="float: left;margin-left: 20px"> 开启我的学习旅程了<br>
</p>

<a id="more"></a>


<h1 id="从明天开始开启我的学习计划了。"><a href="#从明天开始开启我的学习计划了。" class="headerlink" title="从明天开始开启我的学习计划了。"></a>从明天开始开启我的学习计划了。</h1><h3 id="上午8：30-11-30-学习"><a href="#上午8：30-11-30-学习" class="headerlink" title="上午8：30-11:30 学习"></a>上午8：30-11:30 学习</h3><h3 id="上午11-30-12-30-起床刷牙，洗脸，自己弄饭吃。"><a href="#上午11-30-12-30-起床刷牙，洗脸，自己弄饭吃。" class="headerlink" title="上午11:30-12:30 起床刷牙，洗脸，自己弄饭吃。"></a>上午11:30-12:30 起床刷牙，洗脸，自己弄饭吃。</h3><h3 id="上午12-30-下午14-30-听歌，午休。"><a href="#上午12-30-下午14-30-听歌，午休。" class="headerlink" title="上午12:30-下午14:30 听歌，午休。"></a>上午12:30-下午14:30 听歌，午休。</h3><h3 id="下午14-30-18-00-学习"><a href="#下午14-30-18-00-学习" class="headerlink" title="下午14:30-18:00 学习"></a>下午14:30-18:00 学习</h3><h3 id="晚上18-00-19-00-吃饭，洗澡。"><a href="#晚上18-00-19-00-吃饭，洗澡。" class="headerlink" title="晚上18:00-19:00 吃饭，洗澡。"></a>晚上18:00-19:00 吃饭，洗澡。</h3><h3 id="晚上19-00-22-30-学习"><a href="#晚上19-00-22-30-学习" class="headerlink" title="晚上19:00-22:30 学习"></a>晚上19:00-22:30 学习</h3><h3 id="晚上必须要12-00之前睡觉，除非晚上还在学习。"><a href="#晚上必须要12-00之前睡觉，除非晚上还在学习。" class="headerlink" title="晚上必须要12:00之前睡觉，除非晚上还在学习。"></a>晚上必须要12:00之前睡觉，除非晚上还在学习。</h3><p>总结：上午四个小时，下午三个半小时，晚上三个半小时。一天11小时学习。</p>
<p>早上7:30 调到 8:30了，实在起不来了。</p>
<h1 id="冬季时间安排表。"><a href="#冬季时间安排表。" class="headerlink" title="冬季时间安排表。"></a>冬季时间安排表。</h1><h3 id="上午9：00-11-30-学习"><a href="#上午9：00-11-30-学习" class="headerlink" title="上午9：00-11:30 学习"></a>上午9：00-11:30 学习</h3><h3 id="下午14-00-16-30-学习"><a href="#下午14-00-16-30-学习" class="headerlink" title="下午14:00-16:30 学习"></a>下午14:00-16:30 学习</h3><h3 id="晚上19-30-21-30-学习"><a href="#晚上19-30-21-30-学习" class="headerlink" title="晚上19:30-21:30 学习"></a>晚上19:30-21:30 学习</h3>]]></content>
      <categories>
        <category>学习过程</category>
      </categories>
      <tags>
        <tag>2020年10月份学习时间计划表</tag>
      </tags>
  </entry>
  <entry>
    <title>那些年追过的剧</title>
    <url>/2020/ckpf35kso009njov47l0u88sm/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240) ;margin: 0;padding: 0;">
<img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2225995831,1278365618&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0 ;margin-top: 15px; float: left;">

<p style="float: left;margin-left: 20px"> 那些追过的剧 <br>
 剧名：风犬少年的天空 （B站独播)</p>

<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 0;color: rgb(93, 93, 93) ;font-size: 13px;">    
一.社会青春剧：风犬少年的天空;<br>
二.大学青春剧：一起同过窗（一二季）;<br>
三.百岁之后，一言为定;
</p>
</div>]]></content>
      <categories>
        <category>追剧记录</category>
      </categories>
      <tags>
        <tag>B站追剧</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊现在和以后吧</title>
    <url>/2020/ckpf35ksn009ljov499kldr9f/</url>
    <content><![CDATA[<img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1861779504,1734297857&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0 ;margin-top: 15px; float: left;">

<p style="float: left;margin-left: 20px">  <strong>现在：</strong> 
<h6 style="font-weight: 400;">突然不知道会想回忆一下，自己的大学生活。我觉得有收获，更多的是遗憾吧。
       没有好好学习，没有放手的去做一些事情。</h6>
</p>

<a id="more"></a>
<p>大一的时候，没有参加什么社团，就在寝室打游戏。</p>
<p>大二的时候，好像觉悟了一些，加入了405实验室，自己也有过不想去实验室的想法。<br>想逃避去实验室，不过好在还是坚持住了。我还是很喜欢在实验室的日子，就像学长说的405像一个家一样。<br>那时候每天晚上不吃晚饭，就去实验室学习，待到9：50左右，自己去学校后门买晚饭吃。<br>有时候也会自己去操场跑完步，然后再去吃晚饭，喜欢充实的每一天。</p>
<p>那时候和学长 学姐参加了互联网大赛。感觉自己就像是打酱油的。学长安排给我的任务我都没怎么完成。<br>不过比赛获了一个铜奖，那应该是我的一个有意义的奖。我还是很喜欢那个比赛的方案的，<br>很可惜我们能力有限，没有做出来实物。</p>
<p>大二暑假参加了电子设计大赛，哇！那三天也是很难受的，但我还是打酱油的。完成一个作品，给定三天的时间。<br>那三天还是很难忘的，和同学一起想方案，做东西。最后也是一个省三等奖。作为混子的我很满足了。（哈哈哈）</p>
<p>大三的时候，我终于不是混子了。参加了物联网大赛，拿了一个西北赛区一等奖。这个奖我是没想到的。<br>当初这个比赛还和负责老师吵架了，这个不细说了。说真心话，这个实物是做的真的垃圾，我都想不到还拿了一等奖。<br>首先我记得我就是没有参加过，想参加一次，然后带了三个混子（欧耶我不是混子了）。不是，是三个队友。<br>疫情期间在家里，做的实物，但是太low。比完赛我就 直接拆了。</p>
<p>虽然拿了三个奖，但是自己学到的东西不能让我有机会找到我先要的工作。<br>学前端这个事情，我自己还是有点难受的。自己很喜欢智能产品的。<br>放弃自己喜欢的，有点难受。不过选择了就要努力。</p>
<p>以后：<br>今天回家了，没错不实习了。<br>在西安待了一周左右，长沙也是一样。<br>尽管在长沙找到了一个，刚开始说3k左右。<br>然后说被录用了，又和我说没有3k。太难了这个社会，就不能少一点套路嘛。<br>我还是选择了离开长沙，回家。</p>
<p>回家这个两个字，感觉被贴上了失败者的标签。<br>有时候必须要做出选择不是吗？<br>有点喜欢这个挑战了！<br>明天开始复活学习计划。最近两天有事情耽误了。<br>说真的我这两天好想学习啊。这还是我嘛。</p>
]]></content>
      <categories>
        <category>回忆大学</category>
      </categories>
      <tags>
        <tag>大学的学习</tag>
      </tags>
  </entry>
  <entry>
    <title>学习任务安排</title>
    <url>/2020/ckpf35krx008ojov4g9yiax48/</url>
    <content><![CDATA[<img src="/image/back/needstudy.jpg" style="width: 162px ;height: 130px;margin-left: 0 ;margin-top: 15px; float: left;">

<p style="float: left;margin-left: 20px">最近自学的学习安排<br>
</p>

<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<h3 id="明天把css学习到p180"><a href="#明天把css学习到p180" class="headerlink" title="明天把css学习到p180"></a>明天把css学习到p180</h3><h3 id="明天把JS变量这一章节学完"><a href="#明天把JS变量这一章节学完" class="headerlink" title="明天把JS变量这一章节学完"></a>明天把JS变量这一章节学完</h3><p>日期  2020/9/15 21:00</p>
<p>日期  2020/9/16 今天完成了JS变量的学习，css学习到p114<br>昨天安排的任务没有完成。明天继续完成css到180。</p>
<h1 id="学习安排"><a href="#学习安排" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="明天把css学习到p180-1"><a href="#明天把css学习到p180-1" class="headerlink" title="明天把css学习到p180"></a>明天把css学习到p180</h3><h3 id="明天把JS运算符这一章节学完"><a href="#明天把JS运算符这一章节学完" class="headerlink" title="明天把JS运算符这一章节学完"></a>明天把JS运算符这一章节学完</h3><p>日期  2020/9/16 22:34</p>
<h1 id="学习安排-1"><a href="#学习安排-1" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="明天把css学习到p180-2"><a href="#明天把css学习到p180-2" class="headerlink" title="明天把css学习到p180"></a>明天把css学习到p180</h3><h3 id="由于博客安装代码高亮出现问题了，浪费了时间。明天必须把css学到180"><a href="#由于博客安装代码高亮出现问题了，浪费了时间。明天必须把css学到180" class="headerlink" title="由于博客安装代码高亮出现问题了，浪费了时间。明天必须把css学到180."></a>由于博客安装代码高亮出现问题了，浪费了时间。明天必须把css学到180.</h3><h3 id="js基础学习要挤出一天时间了。"><a href="#js基础学习要挤出一天时间了。" class="headerlink" title="js基础学习要挤出一天时间了。"></a>js基础学习要挤出一天时间了。</h3><p>日期  2020/9/17 21:04</p>
<h1 id="学习安排-2"><a href="#学习安排-2" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把css学习到p180"><a href="#今天把css学习到p180" class="headerlink" title="今天把css学习到p180"></a>今天把css学习到p180</h3><h3 id="明天把JS循环学完"><a href="#明天把JS循环学完" class="headerlink" title="明天把JS循环学完"></a>明天把JS循环学完</h3><h3 id="明天把css学习到p194"><a href="#明天把css学习到p194" class="headerlink" title="明天把css学习到p194"></a>明天把css学习到p194</h3><p>日期  2020/9/18 21：10</p>
<h1 id="学习安排-3"><a href="#学习安排-3" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="18号安排的任务昨天晚上加班完成了。"><a href="#18号安排的任务昨天晚上加班完成了。" class="headerlink" title="18号安排的任务昨天晚上加班完成了。"></a>18号安排的任务昨天晚上加班完成了。</h3><h3 id="JS的循环还是很重要的。CSS清除浮动的效果也学习了。"><a href="#JS的循环还是很重要的。CSS清除浮动的效果也学习了。" class="headerlink" title="JS的循环还是很重要的。CSS清除浮动的效果也学习了。"></a>JS的循环还是很重要的。CSS清除浮动的效果也学习了。</h3><h3 id="20号的任务，今天不安排了。"><a href="#20号的任务，今天不安排了。" class="headerlink" title="20号的任务，今天不安排了。"></a>20号的任务，今天不安排了。</h3><h3 id="本来18号安排的任务，19号可以完成的，不要加班的，在长沙爬个岳麓山，还碰到"><a href="#本来18号安排的任务，19号可以完成的，不要加班的，在长沙爬个岳麓山，还碰到" class="headerlink" title="本来18号安排的任务，19号可以完成的，不要加班的，在长沙爬个岳麓山，还碰到"></a>本来18号安排的任务，19号可以完成的，不要加班的，在长沙爬个岳麓山，还碰到</h3><h3 id="修路，只能从湖南大学的南门进去。还在湘江走了好久，成功的让我的脚磨破了皮。"><a href="#修路，只能从湖南大学的南门进去。还在湘江走了好久，成功的让我的脚磨破了皮。" class="headerlink" title="修路，只能从湖南大学的南门进去。还在湘江走了好久，成功的让我的脚磨破了皮。"></a>修路，只能从湖南大学的南门进去。还在湘江走了好久，成功的让我的脚磨破了皮。</h3><h3 id="微信步数29222步，差一丢丢30000步-已经学习了五天了，加油吧孩子"><a href="#微信步数29222步，差一丢丢30000步-已经学习了五天了，加油吧孩子" class="headerlink" title="微信步数29222步，差一丢丢30000步   已经学习了五天了，加油吧孩子"></a>微信步数29222步，差一丢丢30000步   已经学习了五天了，加油吧孩子</h3><p>日期  2020/9/20 12：03</p>
<h3 id="20号的任务，今天不安排了。-1"><a href="#20号的任务，今天不安排了。-1" class="headerlink" title="20号的任务，今天不安排了。"></a>20号的任务，今天不安排了。</h3><h3 id="18号安排的任务昨天晚上加班完成了"><a href="#18号安排的任务昨天晚上加班完成了" class="headerlink" title="18号安排的任务昨天晚上加班完成了"></a>18号安排的任务昨天晚上加班完成了</h3><h3 id="JS的循环还是很重要的。CSS清除浮动的效果也学习了。-1"><a href="#JS的循环还是很重要的。CSS清除浮动的效果也学习了。-1" class="headerlink" title="JS的循环还是很重要的。CSS清除浮动的效果也学习了。"></a>JS的循环还是很重要的。CSS清除浮动的效果也学习了。</h3><h1 id="学习安排-4"><a href="#学习安排-4" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="明天把css学习到p214"><a href="#明天把css学习到p214" class="headerlink" title="明天把css学习到p214"></a>明天把css学习到p214</h3><h3 id="明天把JS数组学完"><a href="#明天把JS数组学完" class="headerlink" title="明天把JS数组学完"></a>明天把JS数组学完</h3><h3 id="明天把WebAPI第一天任务学完"><a href="#明天把WebAPI第一天任务学完" class="headerlink" title="明天把WebAPI第一天任务学完"></a>明天把WebAPI第一天任务学完</h3><p>日期  2020/9/21 20：40</p>
<h1 id="学习安排-5"><a href="#学习安排-5" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把css学习到p233，但是笔记还没写。JS数组学完了，笔记也写了。"><a href="#今天把css学习到p233，但是笔记还没写。JS数组学完了，笔记也写了。" class="headerlink" title="今天把css学习到p233，但是笔记还没写。JS数组学完了，笔记也写了。"></a>今天把css学习到p233，但是笔记还没写。JS数组学完了，笔记也写了。</h3><h3 id="学成案例的代码明天写，把浮动和定位的笔记写上。冒泡排序还是很有意思的。"><a href="#学成案例的代码明天写，把浮动和定位的笔记写上。冒泡排序还是很有意思的。" class="headerlink" title="学成案例的代码明天写，把浮动和定位的笔记写上。冒泡排序还是很有意思的。"></a>学成案例的代码明天写，把浮动和定位的笔记写上。冒泡排序还是很有意思的。</h3><h3 id="未完成WebAPI，我还是太急了。首先优先完成JS学习和HTML标签学习。"><a href="#未完成WebAPI，我还是太急了。首先优先完成JS学习和HTML标签学习。" class="headerlink" title="未完成WebAPI，我还是太急了。首先优先完成JS学习和HTML标签学习。"></a>未完成WebAPI，我还是太急了。首先优先完成JS学习和HTML标签学习。</h3><h3 id="明天把JS函数和作用域任务学完"><a href="#明天把JS函数和作用域任务学完" class="headerlink" title="明天把JS函数和作用域任务学完"></a>明天把JS函数和作用域任务学完</h3><h3 id="学成案例的代码写完，浮动和定位的笔记写上。"><a href="#学成案例的代码写完，浮动和定位的笔记写上。" class="headerlink" title="学成案例的代码写完，浮动和定位的笔记写上。"></a>学成案例的代码写完，浮动和定位的笔记写上。</h3><h3 id="明天算是把JS的基础语法学完了。接下来就是高级语法了。"><a href="#明天算是把JS的基础语法学完了。接下来就是高级语法了。" class="headerlink" title="明天算是把JS的基础语法学完了。接下来就是高级语法了。"></a>明天算是把JS的基础语法学完了。接下来就是高级语法了。</h3><p>日期  2020/9/22 20：19</p>
<h1 id="学习安排-6"><a href="#学习安排-6" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="学成案例笔记写完，跟着pink老师写的，竟然用了四个小时。JS函数学完了。"><a href="#学成案例笔记写完，跟着pink老师写的，竟然用了四个小时。JS函数学完了。" class="headerlink" title="学成案例笔记写完，跟着pink老师写的，竟然用了四个小时。JS函数学完了。"></a>学成案例笔记写完，跟着pink老师写的，竟然用了四个小时。JS函数学完了。</h3><h3 id="作用域还没写完，真的没想到这个案例代码这么细节。"><a href="#作用域还没写完，真的没想到这个案例代码这么细节。" class="headerlink" title="作用域还没写完，真的没想到这个案例代码这么细节。"></a>作用域还没写完，真的没想到这个案例代码这么细节。</h3><h3 id="浮动和定位的笔记写上了。"><a href="#浮动和定位的笔记写上了。" class="headerlink" title="浮动和定位的笔记写上了。"></a>浮动和定位的笔记写上了。</h3><h3 id="明天把JS作用域任务学完"><a href="#明天把JS作用域任务学完" class="headerlink" title="明天把JS作用域任务学完"></a>明天把JS作用域任务学完</h3><h3 id="明天把css学习到p258"><a href="#明天把css学习到p258" class="headerlink" title="明天把css学习到p258"></a>明天把css学习到p258</h3><h3 id="明天算是把JS的基础语法学完了。接下来就是高级语法了。-1"><a href="#明天算是把JS的基础语法学完了。接下来就是高级语法了。-1" class="headerlink" title="明天算是把JS的基础语法学完了。接下来就是高级语法了。"></a>明天算是把JS的基础语法学完了。接下来就是高级语法了。</h3><p>总结一下：没想到写网页还是需要很多细节的，和基础知识的掌握。</p>
<p>日期  2020/9/23 20：19</p>
<h1 id="学习安排-7"><a href="#学习安排-7" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把css学习到p258了"><a href="#今天把css学习到p258了" class="headerlink" title="今天把css学习到p258了"></a>今天把css学习到p258了</h3><h3 id="今天把JS学习到对象了，"><a href="#今天把JS学习到对象了，" class="headerlink" title="今天把JS学习到对象了，"></a>今天把JS学习到对象了，</h3><h3 id="明天把JS对象，内置对象，简单类型和复杂类型学完。明天可以学完了。JS基础教学拖了我太久时间了。"><a href="#明天把JS对象，内置对象，简单类型和复杂类型学完。明天可以学完了。JS基础教学拖了我太久时间了。" class="headerlink" title="明天把JS对象，内置对象，简单类型和复杂类型学完。明天可以学完了。JS基础教学拖了我太久时间了。"></a>明天把JS对象，内置对象，简单类型和复杂类型学完。明天可以学完了。JS基础教学拖了我太久时间了。</h3><h3 id="明天把css学习到p279"><a href="#明天把css学习到p279" class="headerlink" title="明天把css学习到p279"></a>明天把css学习到p279</h3><h3 id="最近要花一点时间把html-css-之前的案列要自己复习一遍。找时间自己单独写一遍。"><a href="#最近要花一点时间把html-css-之前的案列要自己复习一遍。找时间自己单独写一遍。" class="headerlink" title="最近要花一点时间把html css 之前的案列要自己复习一遍。找时间自己单独写一遍。"></a>最近要花一点时间把html css 之前的案列要自己复习一遍。找时间自己单独写一遍。</h3><p>总结一下：今天还开了一会小差，还是不能玩养成类游戏，太入迷了。晚上已删。</p>
<p>日期  2020/9/24 21：45</p>
<h1 id="学习安排-8"><a href="#学习安排-8" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把css学习到p279"><a href="#今天把css学习到p279" class="headerlink" title="今天把css学习到p279"></a>今天把css学习到p279</h3><h3 id="今天把JS基础教学学完了，但是我要花几天时间消化一下，笔记的记一下。"><a href="#今天把JS基础教学学完了，但是我要花几天时间消化一下，笔记的记一下。" class="headerlink" title="今天把JS基础教学学完了，但是我要花几天时间消化一下，笔记的记一下。"></a>今天把JS基础教学学完了，但是我要花几天时间消化一下，笔记的记一下。</h3><h3 id="明天把css学习到p297"><a href="#明天把css学习到p297" class="headerlink" title="明天把css学习到p297"></a>明天把css学习到p297</h3><h3 id="明天把webAPI编程第一天完成"><a href="#明天把webAPI编程第一天完成" class="headerlink" title="明天把webAPI编程第一天完成"></a>明天把webAPI编程第一天完成</h3><p>总结一下：不能学的太快，基础没有打好</p>
<p>日期  2020/9/25 21：27</p>
<h1 id="学习安排-9"><a href="#学习安排-9" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把css学习到p297了，笔记没写"><a href="#今天把css学习到p297了，笔记没写" class="headerlink" title="今天把css学习到p297了，笔记没写"></a>今天把css学习到p297了，笔记没写</h3><h3 id="webAPI编程第一天完成了。笔记没写"><a href="#webAPI编程第一天完成了。笔记没写" class="headerlink" title="webAPI编程第一天完成了。笔记没写"></a>webAPI编程第一天完成了。笔记没写</h3><h3 id="明天把p297笔记一写，然后把css你不得不注意的小细节写上"><a href="#明天把p297笔记一写，然后把css你不得不注意的小细节写上" class="headerlink" title="明天把p297笔记一写，然后把css你不得不注意的小细节写上"></a>明天把p297笔记一写，然后把css你不得不注意的小细节写上</h3><h3 id="明天把webAPI编程第一天的案例写完。"><a href="#明天把webAPI编程第一天的案例写完。" class="headerlink" title="明天把webAPI编程第一天的案例写完。"></a>明天把webAPI编程第一天的案例写完。</h3><h3 id="明天把JS对象，内置对象，简单类型和复杂类型的笔记写完。"><a href="#明天把JS对象，内置对象，简单类型和复杂类型的笔记写完。" class="headerlink" title="明天把JS对象，内置对象，简单类型和复杂类型的笔记写完。"></a>明天把JS对象，内置对象，简单类型和复杂类型的笔记写完。</h3><p>总结一下：今天有点开朗了，不能一天看视频，然后接着写笔记。<br>要哪一天时间看视频，另外一天来写昨天视频 里面的案例，这样才能学习高效。</p>
<p>日期  2020/9/26 21：27</p>
<h1 id="学习安排-10"><a href="#学习安排-10" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="css你不得不注意的小细节也没有写，超级不满意"><a href="#css你不得不注意的小细节也没有写，超级不满意" class="headerlink" title="css你不得不注意的小细节也没有写，超级不满意"></a>css你不得不注意的小细节也没有写，超级不满意</h3><h3 id="webAPI编程第一天的笔记写了一些，案例做了两个，很不满意今天"><a href="#webAPI编程第一天的笔记写了一些，案例做了两个，很不满意今天" class="headerlink" title="webAPI编程第一天的笔记写了一些，案例做了两个，很不满意今天"></a>webAPI编程第一天的笔记写了一些，案例做了两个，很不满意今天</h3><h3 id="JS对象，内置对象，简单类型和复杂类型的笔记也没有写，狠狠不满意"><a href="#JS对象，内置对象，简单类型和复杂类型的笔记也没有写，狠狠不满意" class="headerlink" title="JS对象，内置对象，简单类型和复杂类型的笔记也没有写，狠狠不满意"></a>JS对象，内置对象，简单类型和复杂类型的笔记也没有写，狠狠不满意</h3><h3 id="webAPI编程第二天视频快看完了。"><a href="#webAPI编程第二天视频快看完了。" class="headerlink" title="webAPI编程第二天视频快看完了。"></a>webAPI编程第二天视频快看完了。</h3><h3 id="明天html-和css-看一下。还有品优购的项目看完。"><a href="#明天html-和css-看一下。还有品优购的项目看完。" class="headerlink" title="明天html 和css 看一下。还有品优购的项目看完。"></a>明天html 和css 看一下。还有品优购的项目看完。</h3><p>总结一下：今天很懒，然后今天写api案例的时候发现自己前面忘得有点多。希望可以借助<br>品优购的项目来巩固这个基础。切记JS对象，内置对象，简单类型和复杂类型的笔记要写完了。</p>
<p>日期  2020/9/27 21：27</p>
<h1 id="学习安排-11"><a href="#学习安排-11" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="html-和css-看一下。还有品优购的项目看完了，需要自己动手来做这个项目了。"><a href="#html-和css-看一下。还有品优购的项目看完了，需要自己动手来做这个项目了。" class="headerlink" title="html 和css 看一下。还有品优购的项目看完了，需要自己动手来做这个项目了。"></a>html 和css 看一下。还有品优购的项目看完了，需要自己动手来做这个项目了。</h3><h3 id="明天html5和css3视频看完。"><a href="#明天html5和css3视频看完。" class="headerlink" title="明天html5和css3视频看完。"></a>明天html5和css3视频看完。</h3><p>总结一下：最近有点松懈<br>日期  2020/9/28 21：27</p>
<h1 id="学习安排-12"><a href="#学习安排-12" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="html5和css3视频看完了。大致的看了移动布局。"><a href="#html5和css3视频看完了。大致的看了移动布局。" class="headerlink" title="html5和css3视频看完了。大致的看了移动布局。"></a>html5和css3视频看完了。大致的看了移动布局。</h3><h3 id="了解两个移动布局：-flex伸缩布局和bootstrap布局"><a href="#了解两个移动布局：-flex伸缩布局和bootstrap布局" class="headerlink" title="了解两个移动布局： flex伸缩布局和bootstrap布局"></a>了解两个移动布局： flex伸缩布局和bootstrap布局</h3><h3 id="品优购的项目web布局需要写出来了。"><a href="#品优购的项目web布局需要写出来了。" class="headerlink" title="品优购的项目web布局需要写出来了。"></a>品优购的项目web布局需要写出来了。</h3><p>总结一下：过完国庆假期后，需要实现自己的闭关模式了。要好好认真的学习，早点把知识掌握起来。<br>闭关期间，需要把手机完全隔绝。不追剧，不聊天，不玩游戏，不看新闻等。<br>加油吧！少年。<br>日期  2020/9/29 20：27</p>
<h1 id="学习安排-13"><a href="#学习安排-13" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把vue模板语法学完了，顺便笔记已做，案例也跟着敲了。"><a href="#今天把vue模板语法学完了，顺便笔记已做，案例也跟着敲了。" class="headerlink" title="今天把vue模板语法学完了，顺便笔记已做，案例也跟着敲了。"></a>今天把vue模板语法学完了，顺便笔记已做，案例也跟着敲了。</h3><h3 id="明天把JS基础学习的所有笔记做一下。"><a href="#明天把JS基础学习的所有笔记做一下。" class="headerlink" title="明天把JS基础学习的所有笔记做一下。"></a>明天把JS基础学习的所有笔记做一下。</h3><h3 id="明天把ajax的前两天视频看完。有时间把笔记一做。"><a href="#明天把ajax的前两天视频看完。有时间把笔记一做。" class="headerlink" title="明天把ajax的前两天视频看完。有时间把笔记一做。"></a>明天把ajax的前两天视频看完。有时间把笔记一做。</h3><h3 id="品优购的项目我想等学完JS基础和高级JS再学习。"><a href="#品优购的项目我想等学完JS基础和高级JS再学习。" class="headerlink" title="品优购的项目我想等学完JS基础和高级JS再学习。"></a>品优购的项目我想等学完JS基础和高级JS再学习。</h3><h3 id="需要学习flex伸缩布局和Bootstrap的响应布局需要学习。"><a href="#需要学习flex伸缩布局和Bootstrap的响应布局需要学习。" class="headerlink" title="需要学习flex伸缩布局和Bootstrap的响应布局需要学习。"></a>需要学习flex伸缩布局和Bootstrap的响应布局需要学习。</h3><p>总结一下：今天以为起的来的，太高看自己了。大约8:40起来的，时间表要调一下了。<br>今天出了早上没起来之外，下午和晚上的学习状态很好。继续保持吧！<br>我发现还是要把JS学透才行，后面的VUE框架和其他框架没有JS很好的基础是学起来很难的。</p>
<p>今天中午自己炒的虾子，水放少了，都成干虾子了。后面重新加了一点水好吃了很多。<br>日期  2020/10/7 22：20</p>
<h1 id="学习安排-14"><a href="#学习安排-14" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把JS基础学习的内置对象笔记做一下。"><a href="#今天把JS基础学习的内置对象笔记做一下。" class="headerlink" title="今天把JS基础学习的内置对象笔记做一下。"></a>今天把JS基础学习的内置对象笔记做一下。</h3><h3 id="今天-没有-把ajax的前两天视频看完。还是现在不能接触后端。"><a href="#今天-没有-把ajax的前两天视频看完。还是现在不能接触后端。" class="headerlink" title="今天  没有 把ajax的前两天视频看完。还是现在不能接触后端。"></a>今天  没有 把ajax的前两天视频看完。还是现在不能接触后端。</h3><h3 id="今天把vue第二天的学习视频看了一遍"><a href="#今天把vue第二天的学习视频看了一遍" class="headerlink" title="今天把vue第二天的学习视频看了一遍"></a>今天把vue第二天的学习视频看了一遍</h3><h3 id="明天把JS基础学习的变量，运算符，循环，数组，函数，作用域的笔记再写一遍。还需要写在结构图上。"><a href="#明天把JS基础学习的变量，运算符，循环，数组，函数，作用域的笔记再写一遍。还需要写在结构图上。" class="headerlink" title="明天把JS基础学习的变量，运算符，循环，数组，函数，作用域的笔记再写一遍。还需要写在结构图上。"></a>明天把JS基础学习的变量，运算符，循环，数组，函数，作用域的笔记再写一遍。还需要写在结构图上。</h3><h3 id="明天把vue第三天的学习视频看了一遍"><a href="#明天把vue第三天的学习视频看了一遍" class="headerlink" title="明天把vue第三天的学习视频看了一遍"></a>明天把vue第三天的学习视频看了一遍</h3><p>总结一下：今天还想把Ajax的视频前两天的视频看完的，但是发现好像现在还不是接触后端的时候。<br>今天把JS的内置对象看完了。然后还是需要把案例找点时间，好好学习。<br>发现结构图笔记真的很有用。<br>明天算是真正的结束JS的基础学习了。后面学习Webapi,然后在像JQ和JS高级语法学习。学完后可以找项目做一下。</p>
<p>今天中午自己鸡肉，厨艺勉勉强强，但是水放少了。晚上自己煮了冬瓜吃，还算可以的。<br>日期  2020/10/8 22：23</p>
<h1 id="学习安排-15"><a href="#学习安排-15" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把JS基础学习，函数，作用域的笔记再写一遍，其他的变量啊，数组就不写了。笔记在结构图上了。"><a href="#今天把JS基础学习，函数，作用域的笔记再写一遍，其他的变量啊，数组就不写了。笔记在结构图上了。" class="headerlink" title="今天把JS基础学习，函数，作用域的笔记再写一遍，其他的变量啊，数组就不写了。笔记在结构图上了。"></a>今天把JS基础学习，函数，作用域的笔记再写一遍，其他的变量啊，数组就不写了。笔记在结构图上了。</h3><h3 id="今天-没有-把vue第三天的学习视频看了。我还是从Webapi学习开始。"><a href="#今天-没有-把vue第三天的学习视频看了。我还是从Webapi学习开始。" class="headerlink" title="今天  没有 把vue第三天的学习视频看了。我还是从Webapi学习开始。"></a>今天  没有 把vue第三天的学习视频看了。我还是从Webapi学习开始。</h3><h3 id="今天把webapi的第一天视频看完了，虽然上次看了，但是这次看明显得懂了很多"><a href="#今天把webapi的第一天视频看完了，虽然上次看了，但是这次看明显得懂了很多" class="headerlink" title="今天把webapi的第一天视频看完了，虽然上次看了，但是这次看明显得懂了很多"></a>今天把webapi的第一天视频看完了，虽然上次看了，但是这次看明显得懂了很多</h3><h3 id="明天把webapi第二天视频再写一遍。笔记还需要写在结构图上。"><a href="#明天把webapi第二天视频再写一遍。笔记还需要写在结构图上。" class="headerlink" title="明天把webapi第二天视频再写一遍。笔记还需要写在结构图上。"></a>明天把webapi第二天视频再写一遍。笔记还需要写在结构图上。</h3><h3 id="明天把B站的黑马面面项目视频看了一遍"><a href="#明天把B站的黑马面面项目视频看了一遍" class="headerlink" title="明天把B站的黑马面面项目视频看了一遍"></a>明天把B站的黑马面面项目视频看了一遍</h3><p>总结一下：今天学习了webapi，这次学习看懂了很多，把JS基础的笔记有做了一遍。<br>明天继续学习webapi再看看黑马面面项目。<br>这次学习要一步一步来，不能搞其他的了。<br>和博哥也交流了一会，获取了一些学习方法，结合一些书籍来学习，可以更加全面的掌握知识。<br>下午钓了一会鱼，才钓了两条，一定是天气原因。(导致没有鱼吃食)</p>
<p>今天中午炒的虾子，晚上自己煮了冬瓜吃，还算可以的。<br>明天上午要去赶集了嘿嘿。<br>日期  2020/10/9 22：47</p>
<h1 id="学习安排-16"><a href="#学习安排-16" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把webapi第二天视频再写一遍。笔记写在结构图上"><a href="#今天把webapi第二天视频再写一遍。笔记写在结构图上" class="headerlink" title="今天把webapi第二天视频再写一遍。笔记写在结构图上"></a>今天把webapi第二天视频再写一遍。笔记写在结构图上</h3><h3 id="今天-把B站的黑马面面项目视频看了一点点，"><a href="#今天-把B站的黑马面面项目视频看了一点点，" class="headerlink" title="今天  把B站的黑马面面项目视频看了一点点，"></a>今天  把B站的黑马面面项目视频看了一点点，</h3><h3 id="明天把黑马面面项目视频看完。然后找点时间看看WEBapi第三天视频。"><a href="#明天把黑马面面项目视频看完。然后找点时间看看WEBapi第三天视频。" class="headerlink" title="明天把黑马面面项目视频看完。然后找点时间看看WEBapi第三天视频。"></a>明天把黑马面面项目视频看完。然后找点时间看看WEBapi第三天视频。</h3><h3 id="明天把移动端rem，看完，并写笔记。后面找个时间把这个项目写完。"><a href="#明天把移动端rem，看完，并写笔记。后面找个时间把这个项目写完。" class="headerlink" title="明天把移动端rem，看完，并写笔记。后面找个时间把这个项目写完。"></a>明天把移动端rem，看完，并写笔记。后面找个时间把这个项目写完。</h3><p>总结一下：今天学习状态有点下滑，明天加油。JS原生语法，越学越感兴趣啦！<br>下次要结合书籍来学习一下，提高效率。</p>
<p>今天中午自己炒鸡肉，放了作料很香，就是抄的有点烧，总体还是可以的。<br>赶集耽误了学习时间，买了一些东西。<br>日期  2020/10/10 22：58</p>
<h1 id="学习安排-17"><a href="#学习安排-17" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把黑马面面项目视频看完。"><a href="#今天把黑马面面项目视频看完。" class="headerlink" title="今天把黑马面面项目视频看完。"></a>今天把黑马面面项目视频看完。</h3><h3 id="今天把移动端rem，就差案例看完了。"><a href="#今天把移动端rem，就差案例看完了。" class="headerlink" title="今天把移动端rem，就差案例看完了。"></a>今天把移动端rem，就差案例看完了。</h3><h3 id="明天把rem的视频接着看完，就看flex布局的，把笔记写上。"><a href="#明天把rem的视频接着看完，就看flex布局的，把笔记写上。" class="headerlink" title="明天把rem的视频接着看完，就看flex布局的，把笔记写上。"></a>明天把rem的视频接着看完，就看flex布局的，把笔记写上。</h3><h3 id="明天把webapi第三天看一半视频。"><a href="#明天把webapi第三天看一半视频。" class="headerlink" title="明天把webapi第三天看一半视频。"></a>明天把webapi第三天看一半视频。</h3><p>总结一下：最近干扰的因素太多，自己慢慢调整。</p>
<p>日期  2020/10/11 22：40</p>
<h1 id="学习安排-18"><a href="#学习安排-18" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把rem的视频看完，flex布局还没写笔记（给自己差评）。"><a href="#今天把rem的视频看完，flex布局还没写笔记（给自己差评）。" class="headerlink" title="今天把rem的视频看完，flex布局还没写笔记（给自己差评）。"></a>今天把rem的视频看完，flex布局还没写笔记（给自己差评）。</h3><h3 id="今天把webapi第三天看一半视频。我突然好喜欢原生JS什么鬼。"><a href="#今天把webapi第三天看一半视频。我突然好喜欢原生JS什么鬼。" class="headerlink" title="今天把webapi第三天看一半视频。我突然好喜欢原生JS什么鬼。"></a>今天把webapi第三天看一半视频。我突然好喜欢原生JS什么鬼。</h3><h3 id="明天把flex布局的笔记写上。"><a href="#明天把flex布局的笔记写上。" class="headerlink" title="明天把flex布局的笔记写上。"></a>明天把flex布局的笔记写上。</h3><h3 id="明天把webapi第三天的视频看完，笔记一写。"><a href="#明天把webapi第三天的视频看完，笔记一写。" class="headerlink" title="明天把webapi第三天的视频看完，笔记一写。"></a>明天把webapi第三天的视频看完，笔记一写。</h3><p>总结一下：最近学习状态有点下滑啊，兄弟。咱们要有干劲。<br>定个大目标：10.20之前要做完的事情：webapi学完，黑马面面的项目完成，品优购的项目完成。<br>html5和css3的笔记一做。还有把pink老师的前端视频，过一遍，写个结构图。</p>
<p>最近接触到的布局：rem 响应式布局  flex布局（又称伸缩布局）流式布局<br>日期  2020/10/12 22：30</p>
<h1 id="学习安排-19"><a href="#学习安排-19" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把流式布局视频看完。"><a href="#今天把流式布局视频看完。" class="headerlink" title="今天把流式布局视频看完。"></a>今天把流式布局视频看完。</h3><h3 id="今天把webapi第三天视频看完。"><a href="#今天把webapi第三天视频看完。" class="headerlink" title="今天把webapi第三天视频看完。"></a>今天把webapi第三天视频看完。</h3><h3 id="明天把flex布局的笔记写上。-1"><a href="#明天把flex布局的笔记写上。-1" class="headerlink" title="明天把flex布局的笔记写上。"></a>明天把flex布局的笔记写上。</h3><h3 id="复习html-css-看webapi视频"><a href="#复习html-css-看webapi视频" class="headerlink" title="复习html css  看webapi视频"></a>复习html css  看webapi视频</h3><p>总结一下：最近要把网页布局好好的复习一遍。<br>日期  2020/10/13 22：45</p>
<h2 id="时间跳转魔法"><a href="#时间跳转魔法" class="headerlink" title="时间跳转魔法"></a>时间跳转魔法</h2><h1 id="学习安排-20"><a href="#学习安排-20" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把前端移动端布局看了"><a href="#今天把前端移动端布局看了" class="headerlink" title="今天把前端移动端布局看了"></a>今天把前端移动端布局看了</h3><h3 id="今天把前端笔记在写了。"><a href="#今天把前端笔记在写了。" class="headerlink" title="今天把前端笔记在写了。"></a>今天把前端笔记在写了。</h3><h3 id="今天把webapi第五天视频看完了。"><a href="#今天把webapi第五天视频看完了。" class="headerlink" title="今天把webapi第五天视频看完了。"></a>今天把webapi第五天视频看完了。</h3><h3 id="最近把-html-css-复习完，就动手项目品优购的项目。"><a href="#最近把-html-css-复习完，就动手项目品优购的项目。" class="headerlink" title="最近把 html css 复习完，就动手项目品优购的项目。"></a>最近把 html css 复习完，就动手项目品优购的项目。</h3><h3 id="最近把-黑马面面的项目要动手了。"><a href="#最近把-黑马面面的项目要动手了。" class="headerlink" title="最近把 黑马面面的项目要动手了。"></a>最近把 黑马面面的项目要动手了。</h3><p>总结一下：明天好好加油学习。<br>日期  2020/10/16 21：04</p>
<h1 id="学习安排-21"><a href="#学习安排-21" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把webapi第三天视频笔记一做；"><a href="#今天把webapi第三天视频笔记一做；" class="headerlink" title="今天把webapi第三天视频笔记一做；"></a>今天把webapi第三天视频笔记一做；</h3><h3 id="今天把CSS复习；"><a href="#今天把CSS复习；" class="headerlink" title="今天把CSS复习；"></a>今天把CSS复习；</h3><h3 id="明天把webapi第四天笔记一做。"><a href="#明天把webapi第四天笔记一做。" class="headerlink" title="明天把webapi第四天笔记一做。"></a>明天把webapi第四天笔记一做。</h3><h3 id="明天把CSS复习完；"><a href="#明天把CSS复习完；" class="headerlink" title="明天把CSS复习完；"></a>明天把CSS复习完；</h3><p>总结一下：明天好好加油学习。<br>日期  2020/10/18 21：04</p>
<h1 id="学习安排-22"><a href="#学习安排-22" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="最近学完了webapi，要总结一下学完的东西；"><a href="#最近学完了webapi，要总结一下学完的东西；" class="headerlink" title="最近学完了webapi，要总结一下学完的东西；"></a>最近学完了webapi，要总结一下学完的东西；</h3><h3 id="最近把学完的案例写到博客上面；"><a href="#最近把学完的案例写到博客上面；" class="headerlink" title="最近把学完的案例写到博客上面；"></a>最近把学完的案例写到博客上面；</h3><h3 id="明天把JQ第一天视频看完，做笔记。"><a href="#明天把JQ第一天视频看完，做笔记。" class="headerlink" title="明天把JQ第一天视频看完，做笔记。"></a>明天把JQ第一天视频看完，做笔记。</h3><h3 id="明天把CSS继续复习，写笔记；"><a href="#明天把CSS继续复习，写笔记；" class="headerlink" title="明天把CSS继续复习，写笔记；"></a>明天把CSS继续复习，写笔记；</h3><p>总结一下：明天好好加油学习。<br>日期  2020/10/23 22：04</p>
<h1 id="学习安排-23"><a href="#学习安排-23" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把JQ的第一天学完了，笔记也写了"><a href="#今天把JQ的第一天学完了，笔记也写了" class="headerlink" title="今天把JQ的第一天学完了，笔记也写了"></a>今天把JQ的第一天学完了，笔记也写了</h3><h3 id="今天把css看了一点点。"><a href="#今天把css看了一点点。" class="headerlink" title="今天把css看了一点点。"></a>今天把css看了一点点。</h3><h3 id="明天把css细节方面写到博客上面。顺便看下张鑫旭的css世界这本书。"><a href="#明天把css细节方面写到博客上面。顺便看下张鑫旭的css世界这本书。" class="headerlink" title="明天把css细节方面写到博客上面。顺便看下张鑫旭的css世界这本书。"></a>明天把css细节方面写到博客上面。顺便看下张鑫旭的css世界这本书。</h3><h3 id="明天把WebApi的事例总结下来，并且完成第一天的案例，写到博客上面。"><a href="#明天把WebApi的事例总结下来，并且完成第一天的案例，写到博客上面。" class="headerlink" title="明天把WebApi的事例总结下来，并且完成第一天的案例，写到博客上面。"></a>明天把WebApi的事例总结下来，并且完成第一天的案例，写到博客上面。</h3><h3 id="还有一些其他的笔记写上。"><a href="#还有一些其他的笔记写上。" class="headerlink" title="还有一些其他的笔记写上。"></a>还有一些其他的笔记写上。</h3><p>总结一下：今天是一个特殊的日子，加油吧！<br>日期  2020/10/24 22：45</p>
<h1 id="学习安排-24"><a href="#学习安排-24" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把webapi的案例写完了，总体还是看一遍就懂了，自己也可以独立写出来。"><a href="#今天把webapi的案例写完了，总体还是看一遍就懂了，自己也可以独立写出来。" class="headerlink" title="今天把webapi的案例写完了，总体还是看一遍就懂了，自己也可以独立写出来。"></a>今天把webapi的案例写完了，总体还是看一遍就懂了，自己也可以独立写出来。</h3><h3 id="今天把CSS细节补了一些（后续接的补上）。webapi第一天的案例太简单了，就不写博客上面了。"><a href="#今天把CSS细节补了一些（后续接的补上）。webapi第一天的案例太简单了，就不写博客上面了。" class="headerlink" title="今天把CSS细节补了一些（后续接的补上）。webapi第一天的案例太简单了，就不写博客上面了。"></a>今天把CSS细节补了一些（后续接的补上）。webapi第一天的案例太简单了，就不写博客上面了。</h3><h3 id="今天把其他的笔记也补上了。"><a href="#今天把其他的笔记也补上了。" class="headerlink" title="今天把其他的笔记也补上了。"></a>今天把其他的笔记也补上了。</h3><h3 id="明天继续JQuery的第二天的学习。"><a href="#明天继续JQuery的第二天的学习。" class="headerlink" title="明天继续JQuery的第二天的学习。"></a>明天继续JQuery的第二天的学习。</h3><h3 id="把昨天没有看的CSS书籍，看一下"><a href="#把昨天没有看的CSS书籍，看一下" class="headerlink" title="把昨天没有看的CSS书籍，看一下"></a>把昨天没有看的CSS书籍，看一下</h3><h3 id="继续补CSS细节的博客。"><a href="#继续补CSS细节的博客。" class="headerlink" title="继续补CSS细节的博客。"></a>继续补CSS细节的博客。</h3><p>总结一下：加油吧孩子！<br>日期  2020/10/25 22：21</p>
<h1 id="学习安排-25"><a href="#学习安排-25" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把JQuery的第二天的学习结束了。"><a href="#今天把JQuery的第二天的学习结束了。" class="headerlink" title="今天把JQuery的第二天的学习结束了。"></a>今天把JQuery的第二天的学习结束了。</h3><h3 id="今天把张鑫旭的css世界这本书稍微看了一下，和被人的评价一样，白话有点多。"><a href="#今天把张鑫旭的css世界这本书稍微看了一下，和被人的评价一样，白话有点多。" class="headerlink" title="今天把张鑫旭的css世界这本书稍微看了一下，和被人的评价一样，白话有点多。"></a>今天把张鑫旭的css世界这本书稍微看了一下，和被人的评价一样，白话有点多。</h3><h3 id="明天继续JQuery的第三天的学习。"><a href="#明天继续JQuery的第三天的学习。" class="headerlink" title="明天继续JQuery的第三天的学习。"></a>明天继续JQuery的第三天的学习。</h3><p>总结一下：加油吧孩子！<br>日期  2020/10/26 22：21</p>
<h1 id="学习安排-26"><a href="#学习安排-26" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把高级JS第四的内容学完了，这几天去学校了，耽误了学习进度。"><a href="#今天把高级JS第四的内容学完了，这几天去学校了，耽误了学习进度。" class="headerlink" title="今天把高级JS第四的内容学完了，这几天去学校了，耽误了学习进度。"></a>今天把高级JS第四的内容学完了，这几天去学校了，耽误了学习进度。</h3><h3 id="上一次的学习安排还是JQ第二天的，很久没有更新学习任务了。"><a href="#上一次的学习安排还是JQ第二天的，很久没有更新学习任务了。" class="headerlink" title="上一次的学习安排还是JQ第二天的，很久没有更新学习任务了。"></a>上一次的学习安排还是JQ第二天的，很久没有更新学习任务了。</h3><h3 id="明天把ES6学完，后面慢慢学vue，自己就写JS项目了"><a href="#明天把ES6学完，后面慢慢学vue，自己就写JS项目了" class="headerlink" title="明天把ES6学完，后面慢慢学vue，自己就写JS项目了"></a>明天把ES6学完，后面慢慢学vue，自己就写JS项目了</h3><p>总结一下：加油吧孩子！<br>日期  2020/11/6 22：30</p>
<h1 id="学习安排-27"><a href="#学习安排-27" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把ES6学完-，只是高级JS还有一些笔记没补上"><a href="#今天把ES6学完-，只是高级JS还有一些笔记没补上" class="headerlink" title="今天把ES6学完 ，只是高级JS还有一些笔记没补上"></a>今天把ES6学完 ，只是高级JS还有一些笔记没补上</h3><h3 id="今天电脑更新好久啊，不过为了我想要的功能有了。"><a href="#今天电脑更新好久啊，不过为了我想要的功能有了。" class="headerlink" title="今天电脑更新好久啊，不过为了我想要的功能有了。"></a>今天电脑更新好久啊，不过为了我想要的功能有了。</h3><h3 id="明天把之前的JS笔记补上，然后我发现我看的ES6好像不是完整的，明天在B站继续看完剩下的。"><a href="#明天把之前的JS笔记补上，然后我发现我看的ES6好像不是完整的，明天在B站继续看完剩下的。" class="headerlink" title="明天把之前的JS笔记补上，然后我发现我看的ES6好像不是完整的，明天在B站继续看完剩下的。"></a>明天把之前的JS笔记补上，然后我发现我看的ES6好像不是完整的，明天在B站继续看完剩下的。</h3><h3 id="明天把品优购的项目终于要动手了，还有就是VUE的学习要放到后天了。"><a href="#明天把品优购的项目终于要动手了，还有就是VUE的学习要放到后天了。" class="headerlink" title="明天把品优购的项目终于要动手了，还有就是VUE的学习要放到后天了。"></a>明天把品优购的项目终于要动手了，还有就是VUE的学习要放到后天了。</h3><p>总结一下：加油吧孩子！<br>日期  2020/11/7 23：11</p>
<h1 id="学习安排-28"><a href="#学习安排-28" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把B站的es6看了一些，就没看了，我希望等下次做项目的时候用到，我再去看。"><a href="#今天把B站的es6看了一些，就没看了，我希望等下次做项目的时候用到，我再去看。" class="headerlink" title="今天把B站的es6看了一些，就没看了，我希望等下次做项目的时候用到，我再去看。"></a>今天把B站的es6看了一些，就没看了，我希望等下次做项目的时候用到，我再去看。</h3><h3 id="今天终于把品优购的项目动手了，明天加油写吧。"><a href="#今天终于把品优购的项目动手了，明天加油写吧。" class="headerlink" title="今天终于把品优购的项目动手了，明天加油写吧。"></a>今天终于把品优购的项目动手了，明天加油写吧。</h3><h3 id="明天继续写品优购的项目"><a href="#明天继续写品优购的项目" class="headerlink" title="明天继续写品优购的项目"></a>明天继续写品优购的项目</h3><h3 id="明天把后端的视频看下，node-gulp基础试看第一天的内容。"><a href="#明天把后端的视频看下，node-gulp基础试看第一天的内容。" class="headerlink" title="明天把后端的视频看下，node + gulp基础试看第一天的内容。"></a>明天把后端的视频看下，node + gulp基础试看第一天的内容。</h3><p>总结一下：最近学习有点迷，可能之前学习的我怕会后面用不到，会忘掉。<br>希望最近做做静态页面项目来让自己有点安全感。<br>日期  2020/11/8 21：31</p>
<h1 id="学习安排-29"><a href="#学习安排-29" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天写品优购的项目。学习状态还可以"><a href="#今天写品优购的项目。学习状态还可以" class="headerlink" title="今天写品优购的项目。学习状态还可以"></a>今天写品优购的项目。学习状态还可以</h3><h3 id="今天不该看前端视频的，有时候还是太年轻了，等我学完vue再来看后面视频。"><a href="#今天不该看前端视频的，有时候还是太年轻了，等我学完vue再来看后面视频。" class="headerlink" title="今天不该看前端视频的，有时候还是太年轻了，等我学完vue再来看后面视频。"></a>今天不该看前端视频的，有时候还是太年轻了，等我学完vue再来看后面视频。</h3><h3 id="明天继续写品优购的项目-1"><a href="#明天继续写品优购的项目-1" class="headerlink" title="明天继续写品优购的项目"></a>明天继续写品优购的项目</h3><h3 id="明天看vue的内容，写到博客上面。"><a href="#明天看vue的内容，写到博客上面。" class="headerlink" title="明天看vue的内容，写到博客上面。"></a>明天看vue的内容，写到博客上面。</h3><p>总结一下：明天继续加油，要的就是这种学习状态。<br>日期  2020/11/9 22：38</p>
<h1 id="学习安排-30"><a href="#学习安排-30" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天写品优购的项目。学习状态还可以-1"><a href="#今天写品优购的项目。学习状态还可以-1" class="headerlink" title="今天写品优购的项目。学习状态还可以"></a>今天写品优购的项目。学习状态还可以</h3><h3 id="今天学习vue，感觉vue还是很快乐的，明天继续加油。"><a href="#今天学习vue，感觉vue还是很快乐的，明天继续加油。" class="headerlink" title="今天学习vue，感觉vue还是很快乐的，明天继续加油。"></a>今天学习vue，感觉vue还是很快乐的，明天继续加油。</h3><h3 id="明天继续写品优购的项目，可以简单的完成我的项目了，后面还需要优化一些，写JS的效果。"><a href="#明天继续写品优购的项目，可以简单的完成我的项目了，后面还需要优化一些，写JS的效果。" class="headerlink" title="明天继续写品优购的项目，可以简单的完成我的项目了，后面还需要优化一些，写JS的效果。"></a>明天继续写品优购的项目，可以简单的完成我的项目了，后面还需要优化一些，写JS的效果。</h3><h3 id="明天上午学习vue，继续写笔记。"><a href="#明天上午学习vue，继续写笔记。" class="headerlink" title="明天上午学习vue，继续写笔记。"></a>明天上午学习vue，继续写笔记。</h3><p>总结一下：明天继续加油，最近要看一些数据结构和算法设计的知识。<br>日期  2020/11/10 22：12</p>
<p>总结一下：今天算是把vue第一天的学习任务完成了，品优购的项目勉强完成吧，<br>说说最近的安排，仿写京东的界面，把JS效果写进去。写的时候就复习JS了。<br>希望经过仿写京东界面让自己得到提升吧。<br>VUE的学习和移动端布局还得继续起来，最近就把写京东的这个项目的注意点写到博客里面，还有红宝石书也得看看了。</p>
<h1 id="学习安排-31"><a href="#学习安排-31" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把品优购的项目算是大致完成了界面。"><a href="#今天把品优购的项目算是大致完成了界面。" class="headerlink" title="今天把品优购的项目算是大致完成了界面。"></a>今天把品优购的项目算是大致完成了界面。</h3><h3 id="今天把vue第一天的内容完成了。"><a href="#今天把vue第一天的内容完成了。" class="headerlink" title="今天把vue第一天的内容完成了。"></a>今天把vue第一天的内容完成了。</h3><h3 id="明天把写京东界面要注意的点，代码命名规范，网站排名提升等要求写到博客里面，就开始动手项目。"><a href="#明天把写京东界面要注意的点，代码命名规范，网站排名提升等要求写到博客里面，就开始动手项目。" class="headerlink" title="明天把写京东界面要注意的点，代码命名规范，网站排名提升等要求写到博客里面，就开始动手项目。"></a>明天把写京东界面要注意的点，代码命名规范，网站排名提升等要求写到博客里面，就开始动手项目。</h3><h3 id="明天可以学习vue第二天的内容了。"><a href="#明天可以学习vue第二天的内容了。" class="headerlink" title="明天可以学习vue第二天的内容了。"></a>明天可以学习vue第二天的内容了。</h3><p>日期  2020/11/11 22：12</p>
<p>总结一下：今天看VUE第二天的视频，竟然有点难，看是看的懂，只是自己JS基础还是要加强，<br>明天要复习JS的基础语法，还有高级语法需要复习。vue的学习先暂停一下，然后就是京东项目的书写了，已经开了一个头。<br>上午复习JS基础语法，下午写京东界面。晚上复习移动端布局。</p>
<h1 id="学习安排-32"><a href="#学习安排-32" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天把动手了京东的项目"><a href="#今天把动手了京东的项目" class="headerlink" title="今天把动手了京东的项目"></a>今天把动手了京东的项目</h3><h3 id="今天把vue视频看了一下，自己不足的地方还是很多"><a href="#今天把vue视频看了一下，自己不足的地方还是很多" class="headerlink" title="今天把vue视频看了一下，自己不足的地方还是很多"></a>今天把vue视频看了一下，自己不足的地方还是很多</h3><h3 id="明天把JS基础还是要加强"><a href="#明天把JS基础还是要加强" class="headerlink" title="明天把JS基础还是要加强"></a>明天把JS基础还是要加强</h3><h3 id="明天写京东的项目，复习移动端布局"><a href="#明天写京东的项目，复习移动端布局" class="headerlink" title="明天写京东的项目，复习移动端布局"></a>明天写京东的项目，复习移动端布局</h3><p>日期  2020/11/12 21:18</p>
<p>总结一下：今天学习状态很不好，都是百度收录搞的我很烦，最近弄了。好好学习JS基础和高级JS。<br>再去学vue，最后在学响应式布局吧。<br>最近的月总结也得写了。这个月顺便给自己打个分吧。</p>
<h1 id="学习安排-33"><a href="#学习安排-33" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天继续动手了京东项目，收益匪浅"><a href="#今天继续动手了京东项目，收益匪浅" class="headerlink" title="今天继续动手了京东项目，收益匪浅"></a>今天继续动手了京东项目，收益匪浅</h3><h3 id="今天简单的看了一下JS基础，今天没怎么好好学习，很失望。"><a href="#今天简单的看了一下JS基础，今天没怎么好好学习，很失望。" class="headerlink" title="今天简单的看了一下JS基础，今天没怎么好好学习，很失望。"></a>今天简单的看了一下JS基础，今天没怎么好好学习，很失望。</h3><h3 id="明天把JS基础还是要加强，京东的项目继续写。"><a href="#明天把JS基础还是要加强，京东的项目继续写。" class="headerlink" title="明天把JS基础还是要加强，京东的项目继续写。"></a>明天把JS基础还是要加强，京东的项目继续写。</h3><h3 id="明天晚上还得学vue才行，感觉还是得加油学习新的知识。"><a href="#明天晚上还得学vue才行，感觉还是得加油学习新的知识。" class="headerlink" title="明天晚上还得学vue才行，感觉还是得加油学习新的知识。"></a>明天晚上还得学vue才行，感觉还是得加油学习新的知识。</h3><p>日期  2020/11/13 23:00</p>
<p>总结一下：每天上午，都没好好学习啊。晚上2点才睡，早上起不来，惭愧啊。<br>下午写的京东布局，自己要学习的东西还是不够的。<br>晚上学了vue,之前觉得vue简单，后面觉得难，现在觉得很简单了，可能是看明白了哈哈哈哈。</p>
<h1 id="学习安排-34"><a href="#学习安排-34" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天继续写的京东布局"><a href="#今天继续写的京东布局" class="headerlink" title="今天继续写的京东布局"></a>今天继续写的京东布局</h3><h3 id="今天学习vue的品牌过滤的代码。"><a href="#今天学习vue的品牌过滤的代码。" class="headerlink" title="今天学习vue的品牌过滤的代码。"></a>今天学习vue的品牌过滤的代码。</h3><h3 id="明天休息，去赶集，下午钓鱼放松一下。"><a href="#明天休息，去赶集，下午钓鱼放松一下。" class="headerlink" title="明天休息，去赶集，下午钓鱼放松一下。"></a>明天休息，去赶集，下午钓鱼放松一下。</h3><h3 id="晚上做做毕设，把自己的毕设完善一下。"><a href="#晚上做做毕设，把自己的毕设完善一下。" class="headerlink" title="晚上做做毕设，把自己的毕设完善一下。"></a>晚上做做毕设，把自己的毕设完善一下。</h3><p>日期  2020/11/14 23:19</p>
<p>总结一下：本来今天想休息的，但是好像停不下来，下午看了一下论文格式，然后做了一下毕业设计的其他功能。<br>晚上调代码好久啊。但是不觉得累的。其实我还是很喜欢物联网的。但是也喜欢前端啊，哈哈哈。<br>感觉自己闲不下来了。自己打算买一个灯罩，把毕业设计的功能用到实用上面。</p>
<h1 id="学习安排-35"><a href="#学习安排-35" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天好像没有休息"><a href="#今天好像没有休息" class="headerlink" title="今天好像没有休息"></a>今天好像没有休息</h3><h3 id="今天也没有去钓鱼休闲，在弄毕设。"><a href="#今天也没有去钓鱼休闲，在弄毕设。" class="headerlink" title="今天也没有去钓鱼休闲，在弄毕设。"></a>今天也没有去钓鱼休闲，在弄毕设。</h3><h3 id="明天把JS基础还是要加强，看红宝石书，看红宝石书，看红宝石书。下午京东项目。"><a href="#明天把JS基础还是要加强，看红宝石书，看红宝石书，看红宝石书。下午京东项目。" class="headerlink" title="明天把JS基础还是要加强，看红宝石书，看红宝石书，看红宝石书。下午京东项目。"></a>明天把JS基础还是要加强，看红宝石书，看红宝石书，看红宝石书。下午京东项目。</h3><h3 id="明天晚上还得学vue。"><a href="#明天晚上还得学vue。" class="headerlink" title="明天晚上还得学vue。"></a>明天晚上还得学vue。</h3><p>日期  2020/11/15 22:40</p>
<p>总结一下：昨天16号的总结没有写了，昨晚把vue第二天的视频看完了，但是后面学习vue就要看node.js 的基础了。现在的安排就是之前的vue视频不看了。明天看node基础视频。<br>vue的学习延时一段时间。今天把js基础的第二天的知识复习完了，每天复习收获很多。<br>最近也看了红宝石的书籍，还不错，讲的真透彻，需要自己慢慢的啃下来。</p>
<h1 id="学习安排-36"><a href="#学习安排-36" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天复习JS基础视频"><a href="#今天复习JS基础视频" class="headerlink" title="今天复习JS基础视频"></a>今天复习JS基础视频</h3><h3 id="今天还是做京东的项目。"><a href="#今天还是做京东的项目。" class="headerlink" title="今天还是做京东的项目。"></a>今天还是做京东的项目。</h3><h3 id="明天上午复习js基础第三天视频，看红宝石书。下午京东的项目。"><a href="#明天上午复习js基础第三天视频，看红宝石书。下午京东的项目。" class="headerlink" title="明天上午复习js基础第三天视频，看红宝石书。下午京东的项目。"></a>明天上午复习js基础第三天视频，看红宝石书。下午京东的项目。</h3><h3 id="明天晚上学习node-js。"><a href="#明天晚上学习node-js。" class="headerlink" title="明天晚上学习node.js。"></a>明天晚上学习node.js。</h3><p>日期  2020/11/17 22:40</p>
<p>总结一下：最近学习node.js的基础了，感觉还可以的，最近打算好好看红宝石书籍了。<br>JS复习还在继续，感觉复习很有收获</p>
<h1 id="学习安排-37"><a href="#学习安排-37" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天复习JS基础视频-1"><a href="#今天复习JS基础视频-1" class="headerlink" title="今天复习JS基础视频"></a>今天复习JS基础视频</h3><h3 id="今天还是做京东的项目，晚上学习node。"><a href="#今天还是做京东的项目，晚上学习node。" class="headerlink" title="今天还是做京东的项目，晚上学习node。"></a>今天还是做京东的项目，晚上学习node。</h3><h3 id="明天上午复习js基础第三天视频，看红宝石书。下午京东的项目。-1"><a href="#明天上午复习js基础第三天视频，看红宝石书。下午京东的项目。-1" class="headerlink" title="明天上午复习js基础第三天视频，看红宝石书。下午京东的项目。"></a>明天上午复习js基础第三天视频，看红宝石书。下午京东的项目。</h3><h3 id="明天晚上学习gulp模块使用。"><a href="#明天晚上学习gulp模块使用。" class="headerlink" title="明天晚上学习gulp模块使用。"></a>明天晚上学习gulp模块使用。</h3><p>日期  2020/11/18 22:55</p>
<p>总结一下：最近一直想看红宝石的书，一直没有时间啊。真的是太忙了，还是我没有放在心上，这件是事情。<br>最近学习gulp打包工具，还是不难的，然后vue好久没学习了。最近有一个想法，想实现一下，下次写上来。</p>
<h1 id="学习安排-38"><a href="#学习安排-38" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天复习JS基础视频-2"><a href="#今天复习JS基础视频-2" class="headerlink" title="今天复习JS基础视频"></a>今天复习JS基础视频</h3><h3 id="今天还是做京东的项目，晚上学习gulp。"><a href="#今天还是做京东的项目，晚上学习gulp。" class="headerlink" title="今天还是做京东的项目，晚上学习gulp。"></a>今天还是做京东的项目，晚上学习gulp。</h3><h3 id="明天上午复习js基础第四天视频，。下午京东的项目。"><a href="#明天上午复习js基础第四天视频，。下午京东的项目。" class="headerlink" title="明天上午复习js基础第四天视频，。下午京东的项目。"></a>明天上午复习js基础第四天视频，。下午京东的项目。</h3><h3 id="明天晚上学习gulp模块使用。把之前的node基础和gulpd的一些笔记写到博客上面来。"><a href="#明天晚上学习gulp模块使用。把之前的node基础和gulpd的一些笔记写到博客上面来。" class="headerlink" title="明天晚上学习gulp模块使用。把之前的node基础和gulpd的一些笔记写到博客上面来。"></a>明天晚上学习gulp模块使用。把之前的node基础和gulpd的一些笔记写到博客上面来。</h3><p>日期  2020/11/19 22:17</p>
<p>总结一下：今天晚上仔细看了一下css世界的书籍，感觉很不适合我，<br>最近可以了解css权威指南的这本书，感觉CSS还是要加强一波的。布局要学习的还有很多，自己不足的地方太多了。<br>最近把http学习完了，后面要接着学数据库了。<br>最近几天的安排是把htpp协议的笔记写到博客上面，gulp打包工具的笔记写上来。<br>最近把js基础复习完，就动手CSS的基础巩固，京东项目继续写。晚上写笔记，复习http.</p>
<h1 id="学习安排-39"><a href="#学习安排-39" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天上午，下午看完http协议的视频，接下来准备写笔记了"><a href="#今天上午，下午看完http协议的视频，接下来准备写笔记了" class="headerlink" title="今天上午，下午看完http协议的视频，接下来准备写笔记了"></a>今天上午，下午看完http协议的视频，接下来准备写笔记了</h3><h3 id="今天晚上看了css世界，这本书不适合我这种小白吧。"><a href="#今天晚上看了css世界，这本书不适合我这种小白吧。" class="headerlink" title="今天晚上看了css世界，这本书不适合我这种小白吧。"></a>今天晚上看了css世界，这本书不适合我这种小白吧。</h3><h3 id="明天上午复习js基础。。下午京东的项目。"><a href="#明天上午复习js基础。。下午京东的项目。" class="headerlink" title="明天上午复习js基础。。下午京东的项目。"></a>明天上午复习js基础。。下午京东的项目。</h3><h3 id="明天晚上gulpd和http的一些笔记写到博客上面来。"><a href="#明天晚上gulpd和http的一些笔记写到博客上面来。" class="headerlink" title="明天晚上gulpd和http的一些笔记写到博客上面来。"></a>明天晚上gulpd和http的一些笔记写到博客上面来。</h3><p>日期  2020/11/22 22:29</p>
<p>总结一下：今天是糟糕的一天，停电的一天，晚上来电了。自己看了一会数据库的内容。<br>昨天的安排都没有执行，很难受的一天。明天继续干它。</p>
<h1 id="学习安排-40"><a href="#学习安排-40" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天停电，然后睡觉也比较多，可能天气比较冷了。明天加油干吧。"><a href="#今天停电，然后睡觉也比较多，可能天气比较冷了。明天加油干吧。" class="headerlink" title="今天停电，然后睡觉也比较多，可能天气比较冷了。明天加油干吧。"></a>今天停电，然后睡觉也比较多，可能天气比较冷了。明天加油干吧。</h3><p>明天还要继续学习一个CSS轮播图的效果，写到博客上面来。晚上复习了一下JS基础。</p>
<h3 id="明天上午复习js基础。。下午京东的项目。-1"><a href="#明天上午复习js基础。。下午京东的项目。-1" class="headerlink" title="明天上午复习js基础。。下午京东的项目。"></a>明天上午复习js基础。。下午京东的项目。</h3><h3 id="明天晚上gulpd和http的一些笔记写到博客上面来。-1"><a href="#明天晚上gulpd和http的一些笔记写到博客上面来。-1" class="headerlink" title="明天晚上gulpd和http的一些笔记写到博客上面来。"></a>明天晚上gulpd和http的一些笔记写到博客上面来。</h3><p>日期  2020/11/23 21:15</p>
<p>总结一下：最近要重新安排时间了，由于冬季很多时间点不一样了。<br>今天JS基础还是没有好好复习，本来打算做CSS轮播图的，感觉用处不大，浏览器兼容性不好。<br>最近安排学flex布局，把它学精，再说。下午写京东还是很过瘾的。晚上写了一些gulp笔记，基础有加强了一波。</p>
<h1 id="学习安排-41"><a href="#学习安排-41" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天上午学习了JS基础一点点内容，有事忙去了"><a href="#今天上午学习了JS基础一点点内容，有事忙去了" class="headerlink" title="今天上午学习了JS基础一点点内容，有事忙去了"></a>今天上午学习了JS基础一点点内容，有事忙去了</h3><h3 id="今天写京东项目，最近要加强flex布局了，晚上写gulp博客笔记，晚上看了一会数据库。"><a href="#今天写京东项目，最近要加强flex布局了，晚上写gulp博客笔记，晚上看了一会数据库。" class="headerlink" title="今天写京东项目，最近要加强flex布局了，晚上写gulp博客笔记，晚上看了一会数据库。"></a>今天写京东项目，最近要加强flex布局了，晚上写gulp博客笔记，晚上看了一会数据库。</h3><h3 id="明天上午复习js基础。下午京东的项目。"><a href="#明天上午复习js基础。下午京东的项目。" class="headerlink" title="明天上午复习js基础。下午京东的项目。"></a>明天上午复习js基础。下午京东的项目。</h3><h3 id="明天晚上学习VUE了。"><a href="#明天晚上学习VUE了。" class="headerlink" title="明天晚上学习VUE了。"></a>明天晚上学习VUE了。</h3><p>日期  2020/11/24 22:06</p>
<p>总结一下：今天是糟糕的一天，也不能这样说。JS基础算是复习完毕了，但是昨天安排的任务没有动手，晚点看下vue的学习视频，毕竟vue很重要的。接下来可以安排好好学习vue 和flex布局。然后写京东项目。</p>
<h1 id="学习安排-42"><a href="#学习安排-42" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天全部在学习JS基础的复习内容。明天可以学习flex布局了。"><a href="#今天全部在学习JS基础的复习内容。明天可以学习flex布局了。" class="headerlink" title="今天全部在学习JS基础的复习内容。明天可以学习flex布局了。"></a>今天全部在学习JS基础的复习内容。明天可以学习flex布局了。</h3><h3 id="明天上午flex布局。下午京东的项目。"><a href="#明天上午flex布局。下午京东的项目。" class="headerlink" title="明天上午flex布局。下午京东的项目。"></a>明天上午flex布局。下午京东的项目。</h3><h3 id="明天晚上学习VUE了。-1"><a href="#明天晚上学习VUE了。-1" class="headerlink" title="明天晚上学习VUE了。"></a>明天晚上学习VUE了。</h3><p>日期  2020/11/25 21:55</p>
<p>总结一下：最近学习安排，首先把gulp的笔记补完，还有http的笔记。然后学习flex布局<br>然后写京东项目，学习vue基础，等到vue需要学习ajax的时候，看ajax视频学习</p>
<h1 id="学习安排-43"><a href="#学习安排-43" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天全部在学习JS基础的复习内容。明天可以学习flex布局了。-1"><a href="#今天全部在学习JS基础的复习内容。明天可以学习flex布局了。-1" class="headerlink" title="今天全部在学习JS基础的复习内容。明天可以学习flex布局了。"></a>今天全部在学习JS基础的复习内容。明天可以学习flex布局了。</h3><h3 id="明天上午。下午写gulp笔记，写完gulp笔记再进行其他学习。"><a href="#明天上午。下午写gulp笔记，写完gulp笔记再进行其他学习。" class="headerlink" title="明天上午。下午写gulp笔记，写完gulp笔记再进行其他学习。"></a>明天上午。下午写gulp笔记，写完gulp笔记再进行其他学习。</h3><h3 id="明天晚上把VUE第一天的笔记写到博客上面，然后学习vue第二天的内容。"><a href="#明天晚上把VUE第一天的笔记写到博客上面，然后学习vue第二天的内容。" class="headerlink" title="明天晚上把VUE第一天的笔记写到博客上面，然后学习vue第二天的内容。"></a>明天晚上把VUE第一天的笔记写到博客上面，然后学习vue第二天的内容。</h3><p>日期  2020/11/26 22:12</p>
<p>总结一下：最近终于可以学习Ajax了，最近只有一个任务就是学习Ajax，然后写http的笔记<br>其他的都不管。</p>
<h1 id="学习安排-44"><a href="#学习安排-44" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天全部在学习express框架，Ajax"><a href="#今天全部在学习express框架，Ajax" class="headerlink" title="今天全部在学习express框架，Ajax"></a>今天全部在学习express框架，Ajax</h3><h3 id="明天学习Ajax"><a href="#明天学习Ajax" class="headerlink" title="明天学习Ajax"></a>明天学习Ajax</h3><h3 id="明天写http的笔记"><a href="#明天写http的笔记" class="headerlink" title="明天写http的笔记"></a>明天写http的笔记</h3><p>日期  2020/11/27 22:38</p>
<p>总结一下：今天学习了好久AJax 第一天的学习内容还差一点，明天加油。<br>今天早上没有起来，太难了。今天立了一个flag。希望明天不要打脸吧。<br>明天早上起来把vue笔记写到博客上面来。<br>下午和晚上学习Ajax.</p>
<h1 id="学习安排-45"><a href="#学习安排-45" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习Ajax"><a href="#今天学习Ajax" class="headerlink" title="今天学习Ajax"></a>今天学习Ajax</h3><h3 id="明天上午写vue笔记"><a href="#明天上午写vue笔记" class="headerlink" title="明天上午写vue笔记"></a>明天上午写vue笔记</h3><h3 id="明天下午和晚上学习Ajax"><a href="#明天下午和晚上学习Ajax" class="headerlink" title="明天下午和晚上学习Ajax."></a>明天下午和晚上学习Ajax.</h3><p>日期  2020/11/28 22:38</p>
<p>总结一下：好想吐槽AJAX的学习，怎么说呢，有点难吧。毕竟才看了第一遍视频，也还好，可以理解。<br>希望好好学习AJAX的学习，但是前端的项目感觉好难找啊。想做几个项目的啊。<br>目前自己在做的就是京东 然后还想找一个 vue的项目。慢慢找吧。</p>
<h1 id="学习安排-46"><a href="#学习安排-46" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习Ajax-1"><a href="#今天学习Ajax-1" class="headerlink" title="今天学习Ajax"></a>今天学习Ajax</h3><h3 id="明天上午写vue笔记-1"><a href="#明天上午写vue笔记-1" class="headerlink" title="明天上午写vue笔记"></a>明天上午写vue笔记</h3><h3 id="明天下午和晚上学习Ajax-1"><a href="#明天下午和晚上学习Ajax-1" class="headerlink" title="明天下午和晚上学习Ajax."></a>明天下午和晚上学习Ajax.</h3><p>日期  2020/11/29 21:31</p>
<p>总结一下：今天没有学习AJAX学习了vue的知识，明天开始悲剧的AJAX的学习。<br>vue感觉还是很难得，奋斗的青年。</p>
<h1 id="学习安排-47"><a href="#学习安排-47" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习了vue-AJAX没有学习"><a href="#今天学习了vue-AJAX没有学习" class="headerlink" title="今天学习了vue,AJAX没有学习"></a>今天学习了vue,AJAX没有学习</h3><h3 id="明天上午和下午学习Ajax"><a href="#明天上午和下午学习Ajax" class="headerlink" title="明天上午和下午学习Ajax."></a>明天上午和下午学习Ajax.</h3><h3 id="明天晚上学习node-http的知识。"><a href="#明天晚上学习node-http的知识。" class="headerlink" title="明天晚上学习node http的知识。"></a>明天晚上学习node http的知识。</h3><p>日期  2020/11/30 00:03</p>
<p>总结一下：今天直接睡到11点起来，然后自己没有吃饭就直接学习到下午三点，有点猛。<br>下午学习了看了AJax视频。晚上学习了一会儿HTTP的学习。明天继续加油。</p>
<h1 id="学习安排-48"><a href="#学习安排-48" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习了vue-AJAX没有学习-1"><a href="#今天学习了vue-AJAX没有学习-1" class="headerlink" title="今天学习了vue,AJAX没有学习"></a>今天学习了vue,AJAX没有学习</h3><h3 id="明天上午有事，下午学习Ajax"><a href="#明天上午有事，下午学习Ajax" class="headerlink" title="明天上午有事，下午学习Ajax."></a>明天上午有事，下午学习Ajax.</h3><h3 id="明天晚上学习node-http的知识。-1"><a href="#明天晚上学习node-http的知识。-1" class="headerlink" title="明天晚上学习node http的知识。"></a>明天晚上学习node http的知识。</h3><p>日期  2020/12/1 22:01</p>
<p>总结一下：今天上午和朋友的喜酒去，结婚感觉很快啊，自己还想着不能早结婚。<br>可能觉得现在人结婚都很晚了吧，26 27差不多吧。<br>今天吃完饭就睡觉到下午3点多，学习到晚上7点多自己发面条算吃晚饭了。<br>AJAX第二天的内容已经学习完毕了，明天可以把第三天的内容学完了。<br>5号前学完四天的ajax视频了。晚上还是学习http,越看越感觉http就还好了，不是很难。</p>
<h1 id="学习安排-49"><a href="#学习安排-49" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习了AJAX学习"><a href="#今天学习了AJAX学习" class="headerlink" title="今天学习了AJAX学习"></a>今天学习了AJAX学习</h3><h3 id="明天下午学习Ajax"><a href="#明天下午学习Ajax" class="headerlink" title="明天下午学习Ajax."></a>明天下午学习Ajax.</h3><h3 id="明天晚上学习node-http的知识。-2"><a href="#明天晚上学习node-http的知识。-2" class="headerlink" title="明天晚上学习node http的知识。"></a>明天晚上学习node http的知识。</h3><p>日期  2020/12/02 22:59</p>
<p>总结一下：今天把ajax第三天视频看完了，明天敲敲代码，把笔记写到博客上面来。明天可以把http的视频看完，<br>然后笔记写完就OK了。最近要安排学习vue了。</p>
<h1 id="学习安排-50"><a href="#学习安排-50" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习了AJAX学习，http协议。"><a href="#今天学习了AJAX学习，http协议。" class="headerlink" title="今天学习了AJAX学习，http协议。"></a>今天学习了AJAX学习，http协议。</h3><h3 id="明天上午写http笔记和ajax笔记。下午学习Ajax"><a href="#明天上午写http笔记和ajax笔记。下午学习Ajax" class="headerlink" title="明天上午写http笔记和ajax笔记。下午学习Ajax."></a>明天上午写http笔记和ajax笔记。下午学习Ajax.</h3><h3 id="明天晚上学习vue的知识。"><a href="#明天晚上学习vue的知识。" class="headerlink" title="明天晚上学习vue的知识。"></a>明天晚上学习vue的知识。</h3><p>日期  2020/12/03 22:50</p>
<p>总结一下：最近又在拖了AJAX视频看完了，代码的话，怎么敲，笔记也没写。今天把vue的组件化开发学完了，笔记也写到<br>博客上面了。明天干vue基础的最后一天了。<br>今天晚上看了XYG的比赛视频，心脏有点受不了，还好最后一局赢了。</p>
<h1 id="学习安排-51"><a href="#学习安排-51" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习了vue的组件化开发"><a href="#今天学习了vue的组件化开发" class="headerlink" title="今天学习了vue的组件化开发"></a>今天学习了vue的组件化开发</h3><h3 id="明天学习vue的前端交互"><a href="#明天学习vue的前端交互" class="headerlink" title="明天学习vue的前端交互"></a>明天学习vue的前端交互</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>日期  2020/12/05 12:51</p>
<p>总结一下：今天学习有点差，明天把vue的学习完全结束，把ajax的学习补上。</p>
<h1 id="学习安排-52"><a href="#学习安排-52" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习了vue前后端交互，但是还没学完。"><a href="#今天学习了vue前后端交互，但是还没学完。" class="headerlink" title="今天学习了vue前后端交互，但是还没学完。"></a>今天学习了vue前后端交互，但是还没学完。</h3><h3 id="明天学习vue的前端交互-1"><a href="#明天学习vue的前端交互-1" class="headerlink" title="明天学习vue的前端交互"></a>明天学习vue的前端交互</h3><p>日期  2020/12/06 22:51</p>
<p>总结一下：今天vue基础学习完了，明天把ajax笔记补上，然后学习webpack打包。</p>
<h1 id="学习安排-53"><a href="#学习安排-53" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习把vue基础学习完了。。"><a href="#今天学习把vue基础学习完了。。" class="headerlink" title="今天学习把vue基础学习完了。。"></a>今天学习把vue基础学习完了。。</h3><h3 id="明天把ajax笔记补上，然后学习webpack。"><a href="#明天把ajax笔记补上，然后学习webpack。" class="headerlink" title="明天把ajax笔记补上，然后学习webpack。"></a>明天把ajax笔记补上，然后学习webpack。</h3><p>日期  2020/12/07 22:06</p>
<p>总结一下：今天把ajax的笔记补了一下，还有一点点内容没有加上，明天好好学习webpack打包。</p>
<h1 id="学习安排-54"><a href="#学习安排-54" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习把vue基础学习完了。明天好好学习webpack的打包工具。"><a href="#今天学习把vue基础学习完了。明天好好学习webpack的打包工具。" class="headerlink" title="今天学习把vue基础学习完了。明天好好学习webpack的打包工具。"></a>今天学习把vue基础学习完了。明天好好学习webpack的打包工具。</h3><h3 id="明天学习webpack。"><a href="#明天学习webpack。" class="headerlink" title="明天学习webpack。"></a>明天学习webpack。</h3><h3 id="明天学习bootstrap框架。"><a href="#明天学习bootstrap框架。" class="headerlink" title="明天学习bootstrap框架。"></a>明天学习bootstrap框架。</h3><p>日期  2020/12/08 21:53</p>
<p>总结一下：明天可以把webpack学习完毕了，最近就是小程序和bootstrap了。。</p>
<h1 id="学习安排-55"><a href="#学习安排-55" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习webpack，大致的看了一下bootstrap的视频。最近要学习bootstrap和小程序了。"><a href="#今天学习webpack，大致的看了一下bootstrap的视频。最近要学习bootstrap和小程序了。" class="headerlink" title="今天学习webpack，大致的看了一下bootstrap的视频。最近要学习bootstrap和小程序了。"></a>今天学习webpack，大致的看了一下bootstrap的视频。最近要学习bootstrap和小程序了。</h3><h3 id="明天学习webpack。-1"><a href="#明天学习webpack。-1" class="headerlink" title="明天学习webpack。"></a>明天学习webpack。</h3><h3 id="明天学习bootstrap框架。-1"><a href="#明天学习bootstrap框架。-1" class="headerlink" title="明天学习bootstrap框架。"></a>明天学习bootstrap框架。</h3><p>日期  2020/12/09 22:19</p>
<p>总结一下：最近的学习就是复习CSS和JS，看书加强学习，网站闯关学习。<br>把vue学的知识点看，之前没有完成的案例写好。还有就是bootstrap的学习。<br>1.JS CSS 外加看书<br>2.vue案例制作<br>3.bootstrap的学习</p>
<h1 id="学习安排-56"><a href="#学习安排-56" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习webpack，大致的看了一下bootstrap的视频。"><a href="#今天学习webpack，大致的看了一下bootstrap的视频。" class="headerlink" title="今天学习webpack，大致的看了一下bootstrap的视频。"></a>今天学习webpack，大致的看了一下bootstrap的视频。</h3><h3 id="明天学习JS和CSS，随便把webpack的笔记补上来。"><a href="#明天学习JS和CSS，随便把webpack的笔记补上来。" class="headerlink" title="明天学习JS和CSS，随便把webpack的笔记补上来。"></a>明天学习JS和CSS，随便把webpack的笔记补上来。</h3><h3 id="明天学习bootstrap框架。-2"><a href="#明天学习bootstrap框架。-2" class="headerlink" title="明天学习bootstrap框架。"></a>明天学习bootstrap框架。</h3><p>日期  2020/12/10 22:25</p>
<p>总结一下：最近要加大安排力度了，高效率的学习一下了。</p>
<h1 id="学习安排-57"><a href="#学习安排-57" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天复习DOM的第一天内容，晚上把vue的项目给放到码云上面了，复习了flex布局。"><a href="#今天复习DOM的第一天内容，晚上把vue的项目给放到码云上面了，复习了flex布局。" class="headerlink" title="今天复习DOM的第一天内容，晚上把vue的项目给放到码云上面了，复习了flex布局。"></a>今天复习DOM的第一天内容，晚上把vue的项目给放到码云上面了，复习了flex布局。</h3><h3 id="明天学习把vue的案例看一遍，然后学习B站的那一个vue。"><a href="#明天学习把vue的案例看一遍，然后学习B站的那一个vue。" class="headerlink" title="明天学习把vue的案例看一遍，然后学习B站的那一个vue。"></a>明天学习把vue的案例看一遍，然后学习B站的那一个vue。</h3><h3 id="明天学习html和css-看css的书籍。"><a href="#明天学习html和css-看css的书籍。" class="headerlink" title="明天学习html和css.看css的书籍。"></a>明天学习html和css.看css的书籍。</h3><p>日期  2020/12/11 22:25</p>
<p>总结一下：最近要加大安排力度了，高效率的学习一下了。</p>
<h1 id="学习安排-58"><a href="#学习安排-58" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天看了一下css书籍，有点迷。最近打算做几个项目来学习。而不是专门去看视频学习。"><a href="#今天看了一下css书籍，有点迷。最近打算做几个项目来学习。而不是专门去看视频学习。" class="headerlink" title="今天看了一下css书籍，有点迷。最近打算做几个项目来学习。而不是专门去看视频学习。"></a>今天看了一下css书籍，有点迷。最近打算做几个项目来学习。而不是专门去看视频学习。</h3><p>项目里面有什么不会的再回头去看视频，那样会记的很清楚。把bootstrap顶部页面写完了。</p>
<h3 id="明天学习bootstrap学习安排一波"><a href="#明天学习bootstrap学习安排一波" class="headerlink" title="明天学习bootstrap学习安排一波"></a>明天学习bootstrap学习安排一波</h3><h3 id="明天学习把vue的电商项目继续做，然后写一个vue案例。"><a href="#明天学习把vue的电商项目继续做，然后写一个vue案例。" class="headerlink" title="明天学习把vue的电商项目继续做，然后写一个vue案例。"></a>明天学习把vue的电商项目继续做，然后写一个vue案例。</h3><p>日期  2020/12/12 21:20</p>
<p>总结一下：原来bootstrap没有那么的简单啊。</p>
<h1 id="学习安排-59"><a href="#学习安排-59" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天继续写bootstrap的案例，明天可以完结了。可以发布到线上。"><a href="#今天继续写bootstrap的案例，明天可以完结了。可以发布到线上。" class="headerlink" title="今天继续写bootstrap的案例，明天可以完结了。可以发布到线上。"></a>今天继续写bootstrap的案例，明天可以完结了。可以发布到线上。</h3><h3 id="明天可以学习完bootstrap"><a href="#明天可以学习完bootstrap" class="headerlink" title="明天可以学习完bootstrap"></a>明天可以学习完bootstrap</h3><h3 id="明天学习把vue的电商项目继续做，然后写一个vue案例。-1"><a href="#明天学习把vue的电商项目继续做，然后写一个vue案例。-1" class="headerlink" title="明天学习把vue的电商项目继续做，然后写一个vue案例。"></a>明天学习把vue的电商项目继续做，然后写一个vue案例。</h3><p>日期  2020/12/13 22:53</p>
<p>总结一下：bootstrap的任务终于完成了，明天动手vue商城的项目，然后写vue案例。</p>
<h1 id="学习安排-60"><a href="#学习安排-60" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天完成了bootstrap的案例，发布到线上了，但是还不够的我感觉还得自己总结项目。"><a href="#今天完成了bootstrap的案例，发布到线上了，但是还不够的我感觉还得自己总结项目。" class="headerlink" title="今天完成了bootstrap的案例，发布到线上了，但是还不够的我感觉还得自己总结项目。"></a>今天完成了bootstrap的案例，发布到线上了，但是还不够的我感觉还得自己总结项目。</h3><h3 id="明天学习vue商城的案例。"><a href="#明天学习vue商城的案例。" class="headerlink" title="明天学习vue商城的案例。"></a>明天学习vue商城的案例。</h3><h3 id="明天学习写vue案例，把git的使用方法写到博客上面来。"><a href="#明天学习写vue案例，把git的使用方法写到博客上面来。" class="headerlink" title="明天学习写vue案例，把git的使用方法写到博客上面来。"></a>明天学习写vue案例，把git的使用方法写到博客上面来。</h3><p>日期  2020/12/14 23:16</p>
<p>总结一下：最近把还是动手项目。等我把黑马商城（vue），和uinapp的项目完成，就可以总复习了。</p>
<h1 id="学习安排-61"><a href="#学习安排-61" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天完成了黑马商城（vue）的第一天内容。"><a href="#今天完成了黑马商城（vue）的第一天内容。" class="headerlink" title="今天完成了黑马商城（vue）的第一天内容。"></a>今天完成了黑马商城（vue）的第一天内容。</h3><h3 id="明天学习vue商城的案例。-1"><a href="#明天学习vue商城的案例。-1" class="headerlink" title="明天学习vue商城的案例。"></a>明天学习vue商城的案例。</h3><h3 id="明天把第一天学习的知识点和上传代码以及怎么建立分支写到博客上面来。"><a href="#明天把第一天学习的知识点和上传代码以及怎么建立分支写到博客上面来。" class="headerlink" title="明天把第一天学习的知识点和上传代码以及怎么建立分支写到博客上面来。"></a>明天把第一天学习的知识点和上传代码以及怎么建立分支写到博客上面来。</h3><p>日期  2020/12/16 23:01</p>
<p>总结一下：最近在学习uniapp。</p>
<h1 id="学习安排-62"><a href="#学习安排-62" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天完成了黑马商城（uniapp）项目的内容。"><a href="#今天完成了黑马商城（uniapp）项目的内容。" class="headerlink" title="今天完成了黑马商城（uniapp）项目的内容。"></a>今天完成了黑马商城（uniapp）项目的内容。</h3><h3 id="明天学习黑马商城（uniapp）。"><a href="#明天学习黑马商城（uniapp）。" class="headerlink" title="明天学习黑马商城（uniapp）。"></a>明天学习黑马商城（uniapp）。</h3><p>日期  2020/12/18 01:13</p>
<p>总结一下：最近在学习uniapp，今天写了vue案例，收益颇深。</p>
<h1 id="学习安排-63"><a href="#学习安排-63" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天完成了黑马商城（uniapp）项目的内容。-1"><a href="#今天完成了黑马商城（uniapp）项目的内容。-1" class="headerlink" title="今天完成了黑马商城（uniapp）项目的内容。"></a>今天完成了黑马商城（uniapp）项目的内容。</h3><h3 id="明天学习黑马商城（uniapp）明天可以结束了这个uniapp的项目了。"><a href="#明天学习黑马商城（uniapp）明天可以结束了这个uniapp的项目了。" class="headerlink" title="明天学习黑马商城（uniapp）明天可以结束了这个uniapp的项目了。"></a>明天学习黑马商城（uniapp）明天可以结束了这个uniapp的项目了。</h3><p>日期  2020/12/19 23:09</p>
<p>总结一下：今天算是把uniapp的项目完成了，明天花一天时间看看一些代码，然后记一些笔记。</p>
<h1 id="学习安排-64"><a href="#学习安排-64" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天完成了黑马商城（uniapp）项目。"><a href="#今天完成了黑马商城（uniapp）项目。" class="headerlink" title="今天完成了黑马商城（uniapp）项目。"></a>今天完成了黑马商城（uniapp）项目。</h3><h3 id="明天记录一些uniapp的笔记内容。"><a href="#明天记录一些uniapp的笔记内容。" class="headerlink" title="明天记录一些uniapp的笔记内容。"></a>明天记录一些uniapp的笔记内容。</h3><p>日期  2020/12/20 00:52</p>
<p>总结一下：今天学习HTML，最近也找vue的项目</p>
<h1 id="学习安排-65"><a href="#学习安排-65" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习HTML，把最新的vue项目搭建了，之前的vue项目不适合学习。"><a href="#今天学习HTML，把最新的vue项目搭建了，之前的vue项目不适合学习。" class="headerlink" title="今天学习HTML，把最新的vue项目搭建了，之前的vue项目不适合学习。"></a>今天学习HTML，把最新的vue项目搭建了，之前的vue项目不适合学习。</h3><h3 id="明天学习HTML，和vue视频学习。"><a href="#明天学习HTML，和vue视频学习。" class="headerlink" title="明天学习HTML，和vue视频学习。"></a>明天学习HTML，和vue视频学习。</h3><p>日期  2020/12/23 00:37</p>
<p>总结一下：今天学习HTML，然后学习vue</p>
<h1 id="学习安排-66"><a href="#学习安排-66" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习HTML，找到了一个适合自己的vue学习视频"><a href="#今天学习HTML，找到了一个适合自己的vue学习视频" class="headerlink" title="今天学习HTML，找到了一个适合自己的vue学习视频"></a>今天学习HTML，找到了一个适合自己的vue学习视频</h3><h3 id="明天学习HTML，和vue视频学习。-1"><a href="#明天学习HTML，和vue视频学习。-1" class="headerlink" title="明天学习HTML，和vue视频学习。"></a>明天学习HTML，和vue视频学习。</h3><p>日期  2020/12/24 00:32</p>
<p>总结一下：今天学习HTML，然后学习vue</p>
<h1 id="学习安排-67"><a href="#学习安排-67" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习HTML-又重新学习了vue，，感觉比以前更得心应手了，找了git视频教程"><a href="#今天学习HTML-又重新学习了vue，，感觉比以前更得心应手了，找了git视频教程" class="headerlink" title="今天学习HTML,又重新学习了vue，，感觉比以前更得心应手了，找了git视频教程"></a>今天学习HTML,又重新学习了vue，，感觉比以前更得心应手了，找了git视频教程</h3><p>打算最近看看。</p>
<h3 id="明天学习HTML，和vue视频学习。-2"><a href="#明天学习HTML，和vue视频学习。-2" class="headerlink" title="明天学习HTML，和vue视频学习。"></a>明天学习HTML，和vue视频学习。</h3><p>日期  2020/12/24 22:59</p>
<p>总结一下：今天看了git的视频，也没有那么的难</p>
<h1 id="学习安排-68"><a href="#学习安排-68" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习HTML-git的学习"><a href="#今天学习HTML-git的学习" class="headerlink" title="今天学习HTML,git的学习"></a>今天学习HTML,git的学习</h3><h3 id="明天学习HTML，和git的学习。"><a href="#明天学习HTML，和git的学习。" class="headerlink" title="明天学习HTML，和git的学习。"></a>明天学习HTML，和git的学习。</h3><p>日期  2020/12/25 23:01</p>
<p>总结一下：今天看了git的视频，也没有那么的难，<br>明天的学习任务就是css学习完第七天的内容，死命令。</p>
<h1 id="学习安排-69"><a href="#学习安排-69" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习HTML-git的学习-1"><a href="#今天学习HTML-git的学习-1" class="headerlink" title="今天学习HTML,git的学习"></a>今天学习HTML,git的学习</h3><h3 id="明天学习HTML，和git的学习，vue的学习。"><a href="#明天学习HTML，和git的学习，vue的学习。" class="headerlink" title="明天学习HTML，和git的学习，vue的学习。"></a>明天学习HTML，和git的学习，vue的学习。</h3><p>日期  2020/12/26 00:01</p>
<p>总结一下：我要减去午睡时间了，好好学习吧孩子。<br>把基础打牢一些，还有很多知识没去复习呢。</p>
<h1 id="学习安排-70"><a href="#学习安排-70" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习HTML学习"><a href="#今天学习HTML学习" class="headerlink" title="今天学习HTML学习"></a>今天学习HTML学习</h3><h3 id="明天学习HTML。"><a href="#明天学习HTML。" class="headerlink" title="明天学习HTML。"></a>明天学习HTML。</h3><p>日期  2020/12/27 23:33</p>
<p>总结一下：今天是没有午觉的一天，学习了html5,看了git视频。<br>也总结了最近的学习方法。以后会加上一个进度条显示学习时长。</p>
<h1 id="学习安排-71"><a href="#学习安排-71" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习HTML学习-1"><a href="#今天学习HTML学习-1" class="headerlink" title="今天学习HTML学习"></a>今天学习HTML学习</h3><h3 id="明天学习HTML，git。"><a href="#明天学习HTML，git。" class="headerlink" title="明天学习HTML，git。"></a>明天学习HTML，git。</h3><p>今天学习时长: <progress value="4"  min="0" max="12"></progress>4小时<br>日期  2020/12/28  00:14</p>
<p>总结一下：今天学习状态还可以，但是CSS的知识真的有点难多啊。</p>
<h1 id="学习安排-72"><a href="#学习安排-72" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习HTML学习-2"><a href="#今天学习HTML学习-2" class="headerlink" title="今天学习HTML学习"></a>今天学习HTML学习</h3><h3 id="明天学习HTML，git。-1"><a href="#明天学习HTML，git。-1" class="headerlink" title="明天学习HTML，git。"></a>明天学习HTML，git。</h3><p>今天学习时长: <progress value="6"  min="0" max="12"></progress>6小时<br>日期  2020/12/29  23:02</p>
<p>总结一下：今天的学习状态很好，我真的觉得vue太TM牛皮了，很方便程序员开发。<br>今天把css3继续学习，看了vue的案列。CSS3终于快学习完了。</p>
<h1 id="学习安排-73"><a href="#学习安排-73" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习了css3-vue案列。"><a href="#今天学习了css3-vue案列。" class="headerlink" title="今天学习了css3,vue案列。"></a>今天学习了css3,vue案列。</h3><h3 id="明天学习HTML，git。最好明天结束git-的视频和笔记，但是git的视频还是要来重新看一遍。"><a href="#明天学习HTML，git。最好明天结束git-的视频和笔记，但是git的视频还是要来重新看一遍。" class="headerlink" title="明天学习HTML，git。最好明天结束git 的视频和笔记，但是git的视频还是要来重新看一遍。"></a>明天学习HTML，git。最好明天结束git 的视频和笔记，但是git的视频还是要来重新看一遍。</h3><p>今天学习时长: <progress value="6.5"  min="0" max="12"></progress>6.5小时<br>日期  2020/12/30  23:20</p>
<p>总结一下：今天算是把git学习完了，后面就是我的加强git的学习了。<br>今天也算掌握了一些知识，还算充足。</p>
<h1 id="学习安排-74"><a href="#学习安排-74" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习了css3-vue案列。-1"><a href="#今天学习了css3-vue案列。-1" class="headerlink" title="今天学习了css3,vue案列。"></a>今天学习了css3,vue案列。</h3><h3 id="明天学习HTML，把flex布局再复习，把那一个flex布局的项目写完。学习vue。"><a href="#明天学习HTML，把flex布局再复习，把那一个flex布局的项目写完。学习vue。" class="headerlink" title="明天学习HTML，把flex布局再复习，把那一个flex布局的项目写完。学习vue。"></a>明天学习HTML，把flex布局再复习，把那一个flex布局的项目写完。学习vue。</h3><p>小米官网的书写。</p>
<p>今天学习时长: <progress value="4"  min="0" max="12"></progress>4小时<br>日期  2020/12/31  22:07</p>
<p>总结一下：今天学习状态有点不好，可能是因为是元旦节了，就想放松自己。、<br>这种做法是不对的，学习就是学习，和过节无关的。</p>
<h1 id="学习安排-75"><a href="#学习安排-75" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习了vue。"><a href="#今天学习了vue。" class="headerlink" title="今天学习了vue。"></a>今天学习了vue。</h3><h3 id="明天学习vue，最近真的被vue吸引了上了。"><a href="#明天学习vue，最近真的被vue吸引了上了。" class="headerlink" title="明天学习vue，最近真的被vue吸引了上了。"></a>明天学习vue，最近真的被vue吸引了上了。</h3><p>今天学习时长: <progress value="5.5"  min="0" max="12"></progress>5.5小时<br>日期  2020/01/02 22:33</p>
<p>总结一下：已经沉迷于vue无可自拔了。</p>
<h1 id="学习安排-76"><a href="#学习安排-76" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习了vue。-1"><a href="#今天学习了vue。-1" class="headerlink" title="今天学习了vue。"></a>今天学习了vue。</h3><h3 id="明天学习vue，最近真的被vue吸引了上了。-1"><a href="#明天学习vue，最近真的被vue吸引了上了。-1" class="headerlink" title="明天学习vue，最近真的被vue吸引了上了。"></a>明天学习vue，最近真的被vue吸引了上了。</h3><p>今天学习时长: <progress value="5"  min="0" max="12"></progress>5小时<br>日期  2020/01/03 22:49</p>
<p>总结一下：vue还是很有意思的，最近动手ES6的语法。</p>
<h1 id="学习安排-77"><a href="#学习安排-77" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习了vue。-2"><a href="#今天学习了vue。-2" class="headerlink" title="今天学习了vue。"></a>今天学习了vue。</h3><h3 id="明天学习vue和ES6，最近真的被vue吸引了上了。"><a href="#明天学习vue和ES6，最近真的被vue吸引了上了。" class="headerlink" title="明天学习vue和ES6，最近真的被vue吸引了上了。"></a>明天学习vue和ES6，最近真的被vue吸引了上了。</h3><p>今天学习时长: <progress value="5"  min="0" max="12"></progress>5小时<br>日期  2020/01/04 23:25</p>
<p>总结一下：昨天的学习任务没有继续写了，实在太累了。做项目如果粗心真的找个问题都要找好久。<br>感觉自己还算有点耐心的，孰能生巧嘛。好想动手我的vue的项目。</p>
<h1 id="学习安排-78"><a href="#学习安排-78" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习了vue。-3"><a href="#今天学习了vue。-3" class="headerlink" title="今天学习了vue。"></a>今天学习了vue。</h3><h3 id="明天学习vue和ES6，最近真的被vue吸引了上了。-1"><a href="#明天学习vue和ES6，最近真的被vue吸引了上了。-1" class="headerlink" title="明天学习vue和ES6，最近真的被vue吸引了上了。"></a>明天学习vue和ES6，最近真的被vue吸引了上了。</h3><p>今天学习时长: <progress value="5"  min="0" max="12"></progress>5小时<br>日期  2020/01/06 23:21</p>
<p>总结一下：今天学习状态有点差，明天干个8个小时</p>
<h1 id="学习安排-79"><a href="#学习安排-79" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习了vue。-4"><a href="#今天学习了vue。-4" class="headerlink" title="今天学习了vue。"></a>今天学习了vue。</h3><h3 id="明天学习vue和ES6，最近真的被vue吸引了上了。-2"><a href="#明天学习vue和ES6，最近真的被vue吸引了上了。-2" class="headerlink" title="明天学习vue和ES6，最近真的被vue吸引了上了。"></a>明天学习vue和ES6，最近真的被vue吸引了上了。</h3><p>今天学习时长: <progress value="4"  min="0" max="12"></progress>4小时<br>日期  2020/01/07 00:09</p>
<p>总结一下：自己还是真的懒啊，干了六个小时，太失望了。<br>不过这种追求解决问题的动手能力还是值得表扬的。<br>就像之前写轮播图的时候，自己也是要追求完美一些，这次的这个不知道算不算一个bug<br>明天写到博客上面来。</p>
<p>一个人真正变强的时候，就是他遇到问题的时候，就是变强的时候。</p>
<h1 id="学习安排-80"><a href="#学习安排-80" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习了vue。-5"><a href="#今天学习了vue。-5" class="headerlink" title="今天学习了vue。"></a>今天学习了vue。</h3><h3 id="明天学习vue。"><a href="#明天学习vue。" class="headerlink" title="明天学习vue。"></a>明天学习vue。</h3><p>今天学习时长: <progress value="6"  min="0" max="12"></progress>6小时<br>日期  2020/01/08 00:18</p>
<p>总结一下：vue总算学习完了吧，最近动手项目和看面试视频。</p>
<h1 id="学习安排-81"><a href="#学习安排-81" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天学习了vue。-6"><a href="#今天学习了vue。-6" class="headerlink" title="今天学习了vue。"></a>今天学习了vue。</h3><h3 id="明天动手vue项目，然后看面试视频。顺便把vue学习总结写下。"><a href="#明天动手vue项目，然后看面试视频。顺便把vue学习总结写下。" class="headerlink" title="明天动手vue项目，然后看面试视频。顺便把vue学习总结写下。"></a>明天动手vue项目，然后看面试视频。顺便把vue学习总结写下。</h3><p>今天学习时长: <progress value="5.5"  min="0" max="12"></progress>5.5小时<br>日期  2020/01/10 22:42</p>
<p>总结一下：今天主要写博客，和动手了项目以及路由的配置</p>
<h1 id="学习安排-82"><a href="#学习安排-82" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天看vue的面试视频，然后自己也动手了项目。。"><a href="#今天看vue的面试视频，然后自己也动手了项目。。" class="headerlink" title="今天看vue的面试视频，然后自己也动手了项目。。"></a>今天看vue的面试视频，然后自己也动手了项目。。</h3><h3 id="明天动手vue项目，然后看面试视频。顺便把vue学习总结写下。-1"><a href="#明天动手vue项目，然后看面试视频。顺便把vue学习总结写下。-1" class="headerlink" title="明天动手vue项目，然后看面试视频。顺便把vue学习总结写下。"></a>明天动手vue项目，然后看面试视频。顺便把vue学习总结写下。</h3><p>今天学习时长: <progress value="5.5"  min="0" max="12"></progress>5.5小时<br>日期  2020/01/11 23：13</p>
<p>总结一下：发现自己有时候学习完太累了，就不想写学习安排了，因为最近都是在看vue的面试题，<br>之前打算准备的项目也被我给舍弃了。又得重新准备另一项目。</p>
<h1 id="学习安排-83"><a href="#学习安排-83" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天看vue的面试视频。"><a href="#今天看vue的面试视频。" class="headerlink" title="今天看vue的面试视频。"></a>今天看vue的面试视频。</h3><h3 id="明天看vue面试题，然后需要动手项目了。"><a href="#明天看vue面试题，然后需要动手项目了。" class="headerlink" title="明天看vue面试题，然后需要动手项目了。"></a>明天看vue面试题，然后需要动手项目了。</h3><p>今天学习时长: <progress value="5.5"  min="0" max="12"></progress>5.5小时<br>日期  2020/01/14 23：13</p>
<p>总结一下：最近动手项目完之后，再回过头看vue的面试题，最近慢慢复习JS吧。</p>
<h1 id="学习安排-84"><a href="#学习安排-84" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天动手vue手机端去哪儿的项目。"><a href="#今天动手vue手机端去哪儿的项目。" class="headerlink" title="今天动手vue手机端去哪儿的项目。"></a>今天动手vue手机端去哪儿的项目。</h3><h3 id="明天复习JS，继续动手项目。"><a href="#明天复习JS，继续动手项目。" class="headerlink" title="明天复习JS，继续动手项目。"></a>明天复习JS，继续动手项目。</h3><p>今天学习时长: <progress value="5.5"  min="0" max="12"></progress>5.5小时<br>日期  2020/01/16 23:30</p>
<p>总结一下：写项目的坑真多的一批。</p>
<h1 id="学习安排-85"><a href="#学习安排-85" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天vue手机端去哪儿的项目。"><a href="#今天vue手机端去哪儿的项目。" class="headerlink" title="今天vue手机端去哪儿的项目。"></a>今天vue手机端去哪儿的项目。</h3><h3 id="明天复习JS，继续动手项目。-1"><a href="#明天复习JS，继续动手项目。-1" class="headerlink" title="明天复习JS，继续动手项目。"></a>明天复习JS，继续动手项目。</h3><p>今天学习时长: <progress value="4.5"  min="0" max="12"></progress>4.5小时<br>日期  2020/01/17 23:45</p>
<p>总结一下：明天可以结束我的项目了，后面要把这个月的时间做一个安排了。</p>
<h1 id="学习安排-86"><a href="#学习安排-86" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天vue手机端去哪儿的项目。-1"><a href="#今天vue手机端去哪儿的项目。-1" class="headerlink" title="今天vue手机端去哪儿的项目。"></a>今天vue手机端去哪儿的项目。</h3><h3 id="明天继续动手项目。"><a href="#明天继续动手项目。" class="headerlink" title="明天继续动手项目。"></a>明天继续动手项目。</h3><p>今天学习时长: <progress value="3"  min="0" max="12"></progress>3小时<br>日期  2020/01/20 21:54</p>
<p>总结一下：最近几天有些事情耽误了，今天算是勉强完成了，但是bug有点多，<br>明天继续完成。</p>
<h1 id="学习安排-87"><a href="#学习安排-87" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天vue手机端去哪儿的项目。-2"><a href="#今天vue手机端去哪儿的项目。-2" class="headerlink" title="今天vue手机端去哪儿的项目。"></a>今天vue手机端去哪儿的项目。</h3><h3 id="明天vue手机端去哪儿的结束项目，开始复习JS和ES6。"><a href="#明天vue手机端去哪儿的结束项目，开始复习JS和ES6。" class="headerlink" title="明天vue手机端去哪儿的结束项目，开始复习JS和ES6。"></a>明天vue手机端去哪儿的结束项目，开始复习JS和ES6。</h3><p>今天学习时长: <progress value="4"  min="0" max="12"></progress>4小时<br>日期  2020/01/25 22:49</p>
<p>总结一下：最近的任务就是复习HTML和CSS的知识，复习到30号；</p>
<h1 id="学习安排-88"><a href="#学习安排-88" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天复习HTML和CSS的面试题。"><a href="#今天复习HTML和CSS的面试题。" class="headerlink" title="今天复习HTML和CSS的面试题。"></a>今天复习HTML和CSS的面试题。</h3><h3 id="明天复习HTML和CSS的面试题。"><a href="#明天复习HTML和CSS的面试题。" class="headerlink" title="明天复习HTML和CSS的面试题。"></a>明天复习HTML和CSS的面试题。</h3><p>今天学习时长: <progress value="5"  min="0" max="12"></progress>5小时<br>日期  2020/01/28 21:50</p>
<p>总结一下：css的复习时间，没我想象的短，最近看JS的知识，之前还不想来复习JS，现在感觉JS也就这样了，最近要好好复习了。</p>
<h1 id="学习安排-89"><a href="#学习安排-89" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天复习HTML和JS。"><a href="#今天复习HTML和JS。" class="headerlink" title="今天复习HTML和JS。"></a>今天复习HTML和JS。</h3><h3 id="明天JS的知识，还可以复习HTML的三栏布局。"><a href="#明天JS的知识，还可以复习HTML的三栏布局。" class="headerlink" title="明天JS的知识，还可以复习HTML的三栏布局。"></a>明天JS的知识，还可以复习HTML的三栏布局。</h3><p>今天学习时长: <progress value="3"  min="0" max="12"></progress>3小时<br>日期  2020/02/02 21:26</p>
<p>总结一下：最近已经开始复习JS把api复习完毕。</p>
<h1 id="学习安排-90"><a href="#学习安排-90" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天JSapi。"><a href="#今天JSapi。" class="headerlink" title="今天JSapi。"></a>今天JSapi。</h3><h3 id="明天JS的知识。"><a href="#明天JS的知识。" class="headerlink" title="明天JS的知识。"></a>明天JS的知识。</h3><p>今天学习时长: <progress value="5"  min="0" max="12"></progress>5小时<br>日期  2020/02/04 21:51</p>
<p>总结一下：好好加油复习完JS的api吧</p>
<h1 id="学习安排-91"><a href="#学习安排-91" class="headerlink" title="学习安排"></a>学习安排</h1><h3 id="今天JSapi。-1"><a href="#今天JSapi。-1" class="headerlink" title="今天JSapi。"></a>今天JSapi。</h3><h3 id="明天JS的知识。-1"><a href="#明天JS的知识。-1" class="headerlink" title="明天JS的知识。"></a>明天JS的知识。</h3><p>今天学习时长: <progress value="5.5"  min="0" max="12"></progress>5.5小时<br>日期  2020/02/05 22：52</p>
]]></content>
      <categories>
        <category>学习过程</category>
      </categories>
      <tags>
        <tag>明日学习安排表</tag>
      </tags>
  </entry>
  <entry>
    <title>相对未来几个月的自己说</title>
    <url>/2020/ckpf35ksg009fjov4772s6hfx/</url>
    <content><![CDATA[<img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3837448350,735493117&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0 ;margin-top: 15px; float: left;">

<p style="float: left;margin-left: 20px"> <h4>不就是学习嘛！</h4><br>
</p>



<a id="more"></a>

<h2 id="给自己里一个flag。"><a href="#给自己里一个flag。" class="headerlink" title="给自己里一个flag。"></a>给自己里一个flag。</h2><h2 id="不就是学习前端嘛。"><a href="#不就是学习前端嘛。" class="headerlink" title="不就是学习前端嘛。"></a>不就是学习前端嘛。</h2><h2 id="希望以后可以吹牛皮，我就是在大四换了一个专业学习，自己自学嘛。"><a href="#希望以后可以吹牛皮，我就是在大四换了一个专业学习，自己自学嘛。" class="headerlink" title="希望以后可以吹牛皮，我就是在大四换了一个专业学习，自己自学嘛。"></a>希望以后可以吹牛皮，我就是在大四换了一个专业学习，自己自学嘛。</h2><h2 id="然后就学的还可以，就随随便便找了一个工作。"><a href="#然后就学的还可以，就随随便便找了一个工作。" class="headerlink" title="然后就学的还可以，就随随便便找了一个工作。"></a>然后就学的还可以，就随随便便找了一个工作。</h2>]]></content>
      <categories>
        <category>学习过程</category>
      </categories>
      <tags>
        <tag>学习flag</tag>
      </tags>
  </entry>
  <entry>
    <title>大四来学校的一天</title>
    <url>/2020/ckpf35ksb0094jov43zi916xq/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="73d2c9df5ce9cc0250387ef5c43bb602f44eccbfd29378e257b94d74a2e9d0ab"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>作为日记加密</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器学习(HTTP协议)</title>
    <url>/2020/ckpf35kkg000zjov41dnicr2h/</url>
    <content><![CDATA[<div style="background-color: rgb(255, 251, 240);">
<img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1190025235,171050128&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;">
<div style="float: left;margin:20px 15px;width: 500px;height: 137px">
<h4 style="padding: 0;margin: 0;">服务器的学习</h4>
<div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">
HTTP协议的初理解学习
</div>


</div>


<a id="more"></a>
<br>
<br>
<br>
<br>
<br>
<br>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<p><strong>IP地址</strong><br>IP地址:互联网中设备的唯一标识。<br>IP是Internet Protocol Address的简写，代表互联网协议地址.</p>
<hr>
<p><strong>域名</strong><br>由于IP地址难于记忆，所以产生了域名的概念，所谓域名就是平时上网所使用的网址。<br><code>http://www.itheima.com  =&gt;  http://124.165.219.100/</code><br>虽然在地址栏中输入的是网址, 但是最终还是会将域名转换为ip才能访问到指定的网站服务器</p>
<hr>
<p><strong>端口</strong><br>端口是计算机与外界通讯交流的出口，用来区分服务器电脑中提供的不同的服务。<br><strong>浏览器的默认端口是80</strong></p>
<hr>
<p><strong>URL</strong><br>统一资源定位符，又叫URL（Uniform Resource Locator），是专为标识Internet网上资源位置而设的一种编址方式，我们平时所说的<code>网页地址指的即是URL。</code></p>
<p><strong>URL的组成</strong><br>传输协议://服务器IP或域名:端口/资源所在位置标识<br><code>http://www.itcast.cn/news/20181018/09152238514.html</code><br>http：超文本传输协议，提供了一种发布和接收HTML页面的方法。</p>
<hr>
<p><strong>创建web服务器</strong></p>
<p>// 引入http模块<br><code>const http = require(&quot;http&quot;);</code><br>// 创建 web服务器<br><code>const app = http.createServer();</code><br>// 当客户端发送请求时<br><code>app.on(&quot;request&quot;, (req, res) =&gt; {</code><br>  // 服务器端给客户端响应一个 h2<br>  <code>res.end(&quot;&lt;h2&gt;hello user&lt;/h2&gt;&quot;);</code><br><code>});</code><br>// 启动监听端口<br><code>app.listen(3000);</code><br><code>console.log(&quot;服务器已经启动成功&quot;);</code></p>
<hr>
<p><strong>请求报文</strong></p>
<ol>
<li><p>请求方式 （Request Method）<br>GET     请求数据<br>POST   发送数据</p>
</li>
<li><p>请求地址 （Request URL）<br><code>app.on(&#39;request&#39;, (req, res) =&gt; {</code><br>  <code>req.headers  // 获取请求报文</code><br>  <code>req.headers[&#39;accept&#39;]  // 获取请求报文</code><br>  <code>req.url      // 获取请求地址</code><br>  <code>req.method   // 获取请求方法</code><br><code>});</code></p>
</li>
</ol>
<hr>
<p><strong>响应报文</strong></p>
<ol>
<li><p>HTTP状态码<br>200 请求成功<br>404 请求的资源没有被找到,有可能路径配置问题<br>500 服务器端错误<br>400 客户端请求有语法错误</p>
</li>
<li><p>内容类型<br>text/html<br>text/css<br>application/javascript<br>image/jpeg<br>application/json</p>
<p><code>app.on(&#39;request&#39;, (req, res) =&gt; {</code><br>  // 设置响应报文 200响应状态码，可以自己设置，后面是反应的文本类型<br>  <code>res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/html;charset=utf8&#39;</code><br> <code>});</code><br><code>});</code></p>
</li>
</ol>
<hr>
<p><strong>HTTP请求与响应处理</strong><br>请求参数<br>客户端向服务器端发送请求时，有时需要携带一些客户信息，客户信息需要通过请求参数的形式传递到服务器端，比如登录操作。</p>
<p><strong>GET请求参数</strong></p>
<p>参数被放置在浏览器地址栏中，例如：<code>http://localhost:3000/?name=zhangsan&amp;age=20</code><br>参数获取需要借助系统模块url，url模块用来处理url地址</p>
<p><code>const http = require(&#39;http&#39;);</code><br>// 导入url系统模块 用于处理url地址<br> <code>const url = require(&#39;url&#39;);</code><br> <code>const app = http.createServer();</code><br> <code>app.on(&#39;request&#39;, (req, res) =&gt; {</code><br>// 将url路径的各个部分解析出来并返回对象<br>// true 代表将参数解析为对象格式<br>//let {query,pathname} = url.parse(req.url, true);<br>//将 url.parse(req.url, true) 结构出来 query ，pathname<br>// pathname 是请求地址的路径 /list<br>     <code>let {query,pathname} = url.parse(req.url, true);</code><br>    <code>console.log(query.);</code><br>    <code>console.log(pathname);</code><br> <code>});</code><br> <code>app.listen(3000);</code></p>
<img src="/image/TCP/HTTP/01.png">

<p><strong>POST请求参数</strong><br>参数被放置在请求体中进行传输<br>获取POST参数需要使用data事件和end事件<br>使用querystring系统模块将参数转换为对象格式</p>
<p> // 导入系统模块querystring 用于将HTTP参数转换为对象格式<br><code>const querystring = require(&#39;querystring&#39;);</code><br> <code>app.on(&#39;request&#39;, (req, res) =&gt; {</code><br><code>let postData = &#39;&#39;;</code><br>     // 监听参数传输事件<br>     <code>req.on(&#39;data&#39;, (chunk) =&gt; postData += chunk;);</code><br>     // 监听参数传输完毕事件<br>     <code>req.on(&#39;end&#39;, () =&gt; {</code><br>     // 处理成对象格式<br>         <code>console.log(querystring.parse(postData));</code><br>     <code>});</code><br> <code>});</code></p>
<img src="/image/TCP/HTTP/02.png">
<img src="/image/TCP/HTTP/03.png">

<hr>
<p><strong>路由</strong><br> // 当客户端发来请求的时候<br> <code>app.on(&#39;request&#39;, (req, res) =&gt; {</code><br>     // 获取客户端的请求路径<br>     <code>let { pathname } = url.parse(req.url);</code><br>     <code>if (pathname == &#39;/&#39; || pathname == &#39;/index&#39;) {</code><br>        <code>res.end(&#39;欢迎来到首页&#39;);</code><br>    <code>} else if (pathname == &#39;/list&#39;) {</code><br>        <code>es.end(&#39;欢迎来到列表页页&#39;);</code><br>   <code>} else {</code><br>       <code>res.end(&#39;抱歉, 您访问的页面出游了&#39;);</code><br>     <code>}</code><br> <code>});</code></p>
<img src="/image/TCP/HTTP/04.png">

<hr>
<p><strong>静态资源</strong><br>服务器端不需要处理，可以直接响应给客户端的资源就是静态资源，例如CSS、JavaScript、image文件。</p>
<p><strong>动态资源</strong><br>相同的请求地址不同的响应资源，这种资源就是动态资源。<br><img src="/image/TCP/HTTP/05.png"><br>代码书写<br><img src="/image/TCP/HTTP/06.png"></p>
<hr>
<p><strong>Node.js异步编程</strong><br>同步API, 异步API</p>
<p> // 路径拼接<br><code>const public = path.join(__dirname, &#39;public&#39;);</code><br> // 请求地址解析<br> <code>const urlObj = url.parse(req.url);</code><br> // 读取文件<br> <code>fs.readFile(&#39;./demo.txt&#39;, &#39;utf8&#39;, (err, result) =&gt; {</code><br>     <code>console.log(result);</code><br> <code>});</code></p>
<p><strong>同步API：只有当前API执行完成后，才能继续执行下一个API</strong></p>
<p><code>console.log(&#39;before&#39;);</code><br><code>console.log(&#39;after&#39;);</code></p>
<p><strong>异步API：当前API的执行不会阻塞后续代码的执行</strong><br><code>异步API里面不能用return来取回函数的返回值</code></p>
<img src="/image/TCP/HTTP/08.png">

<p><code>console.log(&#39;before&#39;);</code><br><code>setTimeout(</code><br>   <code>() =&gt; { console.log(&#39;last&#39;);</code><br><code>}, 2000);</code><br><code>console.log(&#39;after&#39;);</code></p>
<p><strong>回调函数</strong><br><code>回调函数,可以取回异步API里面的返回值</code><br>  // getData函数定义<br> <code>function getData (callback) {}</code><br>  // getData函数调用<br> <code>getData (() =&gt; {});</code><br><img src="/image/TCP/HTTP/07.png"></p>
<p><strong>使用回调函数获取异步API执行结果</strong></p>
<p><code>function getMsg (callback) {</code><br>   <code>setTimeout(function () {</code><br>      <code>callback ({ msg: &#39;Hello Node.js&#39; })</code><br>   <code>}, 2000);</code><br><code>}</code><br><code>getMsg (function (msg) {</code><br>    <code>console.log(msg);</code><br><code>});</code></p>
<p><strong>同步API, 异步API的区别（代码执行顺序）</strong><br><code>同步API从上到下依次执行，前面代码会阻塞后面代码的执行</code><br><code>for (var i = 0; i &lt; 100000; i++) {</code><br>    <code>console.log(i);</code><br><code>}</code><br><code>console.log(&#39;for循环后面的代码&#39;);</code></p>
<p><code>异步API不会等待API执行完成后再向下执行代码</code><br><code>console.log(&#39;代码开始执行&#39;);</code><br><code>setTimeout(() =&gt; { console.log(&#39;2秒后执行的代码&#39;)}, 2000);</code><br><code>setTimeout(() =&gt; { console.log(&#39;&quot;0秒&quot;后执行的代码&#39;)}, 0);</code><br><code>console.log(&#39;代码结束执行&#39;);</code></p>
<img src="/image/TCP/HTTP/09.png">



<p><strong>Node.js中的异步API</strong><br><img src="/image/TCP/HTTP/10.png"></p>
<p>异步API的回调函数可以依次读取文件 1 2 3,但是会产生异步编程中回调地狱的问题，使代码看起来不直观。<br><code>const fs = require(&#39;fs&#39;);</code></p>
<p><code>fs.readFile(&#39;./1.txt&#39;, &#39;utf8&#39;, (err, result1) =&gt; {</code><br>   <code>console.log(result1);</code><br>  <code>fs.readFile(&#39;./2.txt&#39;, &#39;utf8&#39;, (err, result2) =&gt; {</code><br>       <code>console.log(result2);</code><br>       <code>fs.readFile(&#39;./3.txt&#39;, &#39;utf8&#39;, (err, result3) =&gt; {</code><br>           <code>console.log(result3);</code><br>       <code>})</code><br>  <code>})</code><br><code>})</code></p>
<p><strong>Promise</strong><br><code>Promise出现的目的是解决Node.js异步编程中回调地狱的问题。</code></p>
<p><code>let promise = new Promise((resolve, reject) =&gt; {</code><br>   <code>setTimeout(() =&gt; {</code><br>       <code>if (true) {</code><br>         <code>resolve({name: &#39;张三&#39;})</code><br>      <code>}else {</code><br>        <code>reject(&#39;失败了&#39;)</code><br>      <code>}</code><br>   <code>}, 2000);</code><br><code>});</code><br><code>promise.then(result =&gt; console.log(result); // {name: &#39;张三&#39;})</code><br>      <code>.catch(error =&gt; console.log(error); // 失败了)</code></p>
<p><strong>使用promise来解决回调地狱问题</strong></p>
<p><code>const fs = require(&#39;fs&#39;);</code></p>
<p><code>function p1() {</code><br>   <code>return new Promise((resolve, reject) =&gt; {</code><br>      <code>fs.readFile(&#39;./1.txt&#39;, &#39;utf8&#39;, (err, result) =&gt; {</code><br>           <code>resolve(result);</code><br>      <code>})</code><br>   <code>})</code></p>
<p><code>}</code></p>
<p><code>function p2() {</code><br>  <code>return new Promise((resolve, reject) =&gt; {</code><br>      <code>fs.readFile(&#39;./2.txt&#39;, &#39;utf8&#39;, (err, result) =&gt; {</code><br>        <code>resolve(result);</code><br>       <code>})</code><br>   <code>})</code></p>
<p><code>}</code></p>
<p><code>function p3() {</code><br>   <code>return new Promise((resolve, reject) =&gt; {</code><br>       <code>fs.readFile(&#39;./300.txt&#39;, &#39;utf8&#39;, (err, result) =&gt; {</code><br>           <code>if (err != null) {</code><br>               <code>reject(err);</code><br>           <code>} else {</code><br>                <code>resolve(result);</code><br>        <code>}</code><br>       <code>})</code><br>   <code>})</code></p>
<p><code>}</code></p>
<p><code>p1().then((r1) =&gt; {</code><br>        <code>console.log(r1);</code><br>      <code>return p2()</code><br>   <code>})</code><br>  <code>.then((r2) =&gt; {</code><br>      <code>console.log(r2);</code><br>      <code>return p3()</code><br>   <code>})</code><br>  <code>.then((r3) =&gt; {</code><br>      <code>console.log(r3);</code><br>      <code>return p3()</code><br>  <code>})</code><br>   <code>.catch((err) =&gt; {</code><br>       <code>console.log(err);</code><br>   <code>})</code></p>
<hr>
<p><strong>异步函数</strong><br>异步函数是异步编程语法的终极解决方案，它可以让我们将异步代码写成同步的形式，让代码不再有回调函数嵌套，使代码变得清晰明了。</p>
<p><code>const fn = async () =&gt; {};</code></p>
<p><code>async function fn () {}</code></p>
<p>// 1.在普通函数定义的前面加上 async 关键字  普通函数就变成了异步函数<br>// 2.异步函数默认的返回值是promise对象<br>// 3.在异步函数内部使用throw 关键字进行错误的抛出，并且阻止程序向下执行。<br>//<br>// await关键字<br>// 1.它只能 出现 在异步函数中<br>// 2.await promise 它可以暂停异步函数的执行 等待promise对象返回结果后再向下继续执行</p>
<p><code>async function fn() {</code><br>    <code>return 123;</code><br><code>}</code><br><code>console.log(fn());</code></p>
<p>返回值 <code>Promise { 123 }</code></p>
<p>// async function fn() {</p>
<p>//     return 123;<br>//     throw ‘发生了一些错误’<br>// }</p>
<p>// fn().then(function (data) {<br>//     console.log(data);<br>// }).catch((err) =&gt; {<br>//     console.log(err);<br>// })</p>
<p>依次打印p1 p2 p3<br><code>async function p1() {</code><br>    <code>return &#39;p1&#39;;</code><br><code>}</code></p>
<p><code>async function p2() {</code><br>    <code>return &#39;p2&#39;;</code><br><code>}</code></p>
<p><code>async function p3() {</code><br>    <code>return &#39;p3&#39;;</code><br><code>}</code></p>
<p><code>async function run() {</code><br>   <code>let r1 = await p1()</code><br>    <code>let r2 = await p2()</code><br>   <code>let r3 = await p3()</code><br>    <code>console.log(r1);</code><br>    <code>console.log(r2);</code><br>    <code>console.log(r3);</code><br><code>}</code><br><code>run();</code></p>
<p>async关键字</p>
<ol>
<li>普通函数定义前加async关键字 普通函数变成异步函数</li>
<li>异步函数默认返回promise对象</li>
<li>在异步函数内部使用return关键字进行结果返回 结果会被包裹的promise对象中 return关键字代替了resolve方法</li>
<li>在异步函数内部使用throw关键字抛出程序异常</li>
<li>调用异步函数再链式调用then方法获取异步函数执行结果</li>
<li>调用异步函数再链式调用catch方法获取异步函数执行的错误信息</li>
</ol>
<p>await关键字</p>
<ol>
<li>await关键字只能出现在异步函数中</li>
<li>await promise await后面只能写promise对象 写其他类型的API是不不可以的</li>
<li>await关键字可是暂停异步函数向下执行 直到promise返回结果</li>
</ol>
<p><strong>依次读取1.txt 2.txt 3.txt 文件</strong></p>
<p><code>const fs = require(&#39;fs&#39;);</code><br>//改造现有的异步API 让其返回promise对象 从而支持异步函数语法<br><code>const promisify = require(&#39;util&#39;).promisify;</code><br>// 调用promisify 方法改造现有的异步API  让其返回promise对象<br><code>const readFile = promisify(fs.readFile);</code></p>
<p><code>async function run() {</code><br>    <code>let r1 = await readFile(&#39;./1.txt&#39;, &#39;utf8&#39;)</code><br>   <code>let r2 = await readFile(&#39;./2.txt&#39;, &#39;utf8&#39;)</code><br>    <code>let r3 = await readFile(&#39;./3.txt&#39;, &#39;utf8&#39;)</code><br>   <code>console.log(r1);</code><br>    <code>console.log(r2);</code><br>    <code>console.log(r3);</code><br><code>}</code><br><code>run();</code></p>
<hr>
<p><strong>node.js全部变量 global</strong><br><img src="/image/TCP/HTTP/11.png"></p>
</p>

<hr>
<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

<div style="text-align: center; color: red">
  <strong>get和post提交请求的两种方式的区别</strong>
</div>

<p>1)get是以字节为单位，只接受ASCII，而post是以字符为单位提交<br>2)get是明文方式，提交的数据会显示在地址栏中，一般不用来传输一些敏感的数据，因为传输的数据暴露在外面了。而post是暗文方式提交<br>3)get在浏览器中回退是无害的，而post会再次提交请求<br>4)get会被浏览器主动缓存，而post不会，除非手动设置<br>5)get和post在传输字节数上一般没有限制，个别浏览器会有，可以理解为get一般不超过2k,而post一般不超过2M。</p>
</p>

<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>


<p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">

</p>



</div>]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>HTTP（超文本链接）协议</tag>
      </tags>
  </entry>
  <entry>
    <title>物联网比赛完结篇</title>
    <url>/2020/ckpf35kse009ajov4026mgedu/</url>
    <content><![CDATA[<img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1337805466,2847045578&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0 ;margin-top: 15px; float: left;">

<p style="float: left;margin-left: 20px"> 物联网比赛已经结束有几天了，然后最近也有点小迷茫。先说说比赛吧！

</p>

<a id="more"></a>

<h3>
    比赛那天还是有点紧张的，采用的线上答辩的模式。一上场的时候，评委第一句话就是：PPT讲快点。<br>
    我就知道评委老师可能看了很多PPT觉得还是看实物来的简单粗暴。然后快速的念了一遍PPT就实物展示。<br>
    展示的时候出了一点点的小意外。有一个功能忘记演示了，后来又补上了，演示的时候没有出什么意外。<br>
    评委问的问题有点让我觉得太长远了，也让我明白这次大赛的意义了。<br>
    说真的这次大赛真的没有用心的来准备。不然微信小程序我会把这个功能加上的。<br>
    比赛完后我自己把之前的一个微信小程序连接EDP协议的代码看懂了。有点遗憾吧！<br>
    要是早点看懂我就可以用上了比赛。比赛结束后，我就知道我可能是省三了。<br>
    比赛结果出来有点意外，竟然是省一。让我有点错觉，要是我在学校参加这个比赛，可能我会进国赛。<br>
    在家里参加比赛还是太懒惰了。<br>

</h3>
<h3>
    说说为什么觉得迷茫吧！大学学习的知识还是太少了。这次在网上找兼职，发现自己懂的太少了。<br>
    尽管有几张好一点的证书，但是自己会的太少了，也学习的太分散了。<br>
    尤其在电路知识掌握的太少了，但是又不想走电路方面。<br>
    想走物联网的方面，发现没有我想要的物联网方面的职位。太难了。。。。。。<br>
    想好好找一个智能家居公司呀<br>
    好好加油吧！<br>
</h3>]]></content>
      <categories>
        <category>大学比赛</category>
      </categories>
      <tags>
        <tag>物联网大赛</tag>
      </tags>
  </entry>
  <entry>
    <title>物联网比赛</title>
    <url>/2020/ckpf35ksd0098jov4ehkkcst2/</url>
    <content><![CDATA[<!DOCTYPE html>
<html>
<head>
    <title></title>
  <meta name="generator" content="hexo-theme-ayer">
<link rel="alternate" href="/atom.xml" title="前端小菜鸟" type="application/atom+xml">
</head>
<style type="text/css">
    .aaa,.bbb{
        color: green
    }
    /*.bbb{
        color: red
    }*/
/*    body {
    background-image: url("/image/back/haibian.jpg ");
    background-repeat: no-repeat;
    background-position: center top;*/
}
</style>
<body>
<p><h2 class="aaa">
<br>

<img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1337805466,2847045578&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0 ;margin-top: 15px; float: left;">

<p style="float: left;margin-left: 20px"> 今天比赛终于结束了，总结一下吧！

</p>











<a id="more"></a>
<p>这次比赛没有认真的参加，就是随便做了一个东西。<br><br>我也没想到还进西部决赛，拿一个省三奖差不多了。<br><br>本来还想弄一个微信小程序控制的，发现自己好像那么的强。<br><br>（挖一个坑，最近把微信小程序连接esp8266的方案补上）<br></p>
</h2></p>

<p><h2 class="bbb">
其实比自己强的人很多，不要骄傲。<br>
一个人的比赛还是有点累的，这次比赛还是不满意的很多事情基本都是我一个参加，和老师也有点争执。。。。。。。<br>这次比赛的作品有时间我就写到博客上面（又给自己挖坑了）<br>
之前学的STM32单片机的笔记我也要转到博客上面了（疯狂给自己挖坑中）。<br>
最近就主要写微信小程序连接esp8266和毕业生个人简历的填写。（最近要好好写简历，找实习工作了)<br>

</h2></p>

</body>
</html>]]></content>
      <categories>
        <category>大学比赛</category>
      </categories>
      <tags>
        <tag>比赛总结</tag>
      </tags>
  </entry>
  <entry>
    <title>其实你不懂她</title>
    <url>/2020/ckpf35ksf009djov4cfhghqoc/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="54c06c05431ecac5964776c7a290b05bc765d078b1f68bb20e89a45238f47116"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>作为日记加密</tag>
      </tags>
  </entry>
  <entry>
    <title>网络协议 </title>
    <url>/2020/ckpf35kqp007njov44ljibz3j/</url>
    <content><![CDATA[<img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3179742327,3183607317&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0 ;margin-top: 15px; float: left;">

<p style="float: left;margin-left: 20px"> TCP and UDP协议 <br>
 今天了解一些常用的网络协议。TCP和UDP是目前比较常用的网络协议</p>

<a id="more"></a>

<h2>TCP（Transmission Control Protocol，传输控制协议）</h2>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
  <meta name="generator" content="hexo-theme-ayer">
<link rel="alternate" href="/atom.xml" title="前端小菜鸟" type="application/atom+xml">
</head>
<style>
    .le{
        text-align: left
    }
    .con{
        text-align: center;
    }
</style>
<body>
<h4 class="le">
1.tcp是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接。<br />
2.一个TCP连接必须要经过三次“对话”才能建立起来，其中的过程非常复杂<br />
3.只简单的描述下这三次对话的简单过程：<br />
4.主机A向主机B发出连接请求数据包：“我想给你发数据，可以吗？”，这是第一次对话；<br />
5.主机B向主机A发送同意连接和要求同步（同步就是两台主机一个在发送，一个在接收，协调工作）的数据包：“可以，你什<br />么时候发？”，这是第二次对话；<br />
6.主机A再发出一个数据包确认主机B的要求同步：“我现在就发，你接着吧！”，这是第三次对话<br />
三次“对话”的目的是使数据包的发送和接收同步，经过三次“对话”之后，主机A才向主机B正式发送数据。</h4>



<h2 class="le"> UDP（User Data Protocol，用户数据报协议）</h2>
<h4 class="le">
 1. UDP是一个非连接的协议，传输数据之前源端和终端不建立连接，当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上。在发送端，UDP传送数据的速度仅仅是受应用程序生成数据的速度、计算机的能力和传输带宽的限制；在接收端，UDP把每个消息段放在队列中，应用程序每次从队列中读一个消息段。<br />
2. 由于传输数据不建立连接，因此也就不需要维护连接状态，包括收发状态等，因此一台服务机可同时向多个客户机传输相同的消息。<br />
3. UDP信息包的标题很短，只有8个字节，相对于TCP的20个字节信息包的额外开销很小。<br />
4. 吞吐量不受拥挤控制算法的调节，只受应用软件生成数据的速率、传输带宽、源端和终端主机性能的限制。<br />
5. UDP使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态表（这里面有许多参数）。<br />
6. UDP是面向报文的。发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付给IP层。既不拆分，也不合并，而是保留这些报文的边界，因此，应用程序需要选择合适的报文大小</h4>



<h2 class="le">  下面介绍tcp协议的运用场景</h2>
<h4 class="le">
TCP一般用于文件传输（FTP HTTP 对数据准确性要求高，速度可以相对慢），发送或接收邮件（POP IMAP SMTP <br />对数据准确性要求高，非紧急应用），远程登录（TELNET SSH 对数据准确性有一定要求，有连接的概念）等等；<br />
TCP协议是基于连接的可靠协议，有流量控制和差错控制，也正因为有可靠性的保证和控制手段，所以传输效率比UDP低；UDP<br />协议是基于无连接的不可靠协议，没有控制手段，仅仅是将数据发送给对方，因此效率比TCP要高。</h4>



<h2 class="le"> udp的使用场景</h2>
<h4 class="le">
UDP一般用于即时通信（QQ聊天 对数据准确性和丢包要求比较低，但速度必须快），<br />
在线视频（RTSP 速度一定要快，保证视频连续，但是偶尔花了一个图像帧，人们还是能接受的），<br />
网络语音电话（VoIP 语音数据包一般比较小，需要高速发送，偶尔断音或串音也没有问题）等等。 <br />
作为知识的扩展，可以再说一些其他应用。比如，TCP可以用于网络数据库，分布式高精度计算系统的数据传输；<br />
UDP可以用于服务系统内部之间的数据传输，因为数据可能比较多，内部系统局域网内的丢包错包率又很低，即便丢包，顶多是操作无效，这种情况下，UDP经常被使用。</h4><br /><br />


<h3 class="con"> 为什么有些场景使用TCP而有些场景使用UDP这两者之间的联系在于他们之间的优缺点。</h3>

<h3 class="con">TCP的优缺点：<br />
优点:能够保证数据传输是完整的<br />
缺点:由于每次都需要传输确认信息,导致传输效率降低<br />
场景:多用于必须保证数据完整性的场景,例如文本信息,支付信息等!</h3>
<h3 class="con">
UDP的优缺点：<br />
优点：传输效率高<br />
缺点：可靠性不如TCP协议<br />
场景：UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。比如QQ消息,视频聊天,语音聊天</h3>

<h3 class="con">下面这张图让大家看看哪些协议用到了TCP和UDP的</h3>
<img src="/image/tcp.png">

<h2><a href="https://www.youtube.com/watch?v=SLY4Ud53UGs" target="_blank"> TCP UDP详解视频（科学上网可以观看）</a></h2>
<iframe src="//player.bilibili.com/player.html?aid=27593391&cid=47614638&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<script src="/yts/jsbin/desktop_polymer_v2-vflv_6xn7/desktop_polymer_v2.js" type="text/javascript" name="desktop_polymer_v2/desktop_polymer_v2" class="js-httpswwwyoutubecomytsjsbindesktop_polymer_v2vflv_6xn7desktop_polymer_v2js"></script>
  </body>
</html>



]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>TCP-UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>个人介绍</title>
    <url>/2019/about/</url>
    <content><![CDATA[<blockquote>
<p>A Coder, live in shaoyang, China.</p>
</blockquote>
<p>姓名：伍俊<br>现居：西安（读书）<br>GitHub: <a href="https://github.com/wujun1234567" target="_blank" rel="noopener">wujun1234567</a><br>twitter: <a href="https://twitter.com/wujun1997" target="_blank" rel="noopener">wujun1997</a><br>QQ: <a href="http://wpa.qq.com/msgrd?v=3&uin=2062429896&site=qq&menu=yes" target="_blank" rel="noopener">2062429896</a><br>微信: yueqianlongmanihao(越前龙马你好)<br>网易云音乐:<a href="https://music.163.com/#/my/m/music/playlist?id=2146827508" target="_blank" rel="noopener">我喜欢的歌</a><br>大学专业：电子信息工程<br>大学经历：加入本专业的电子实验室，获得一些小奖。<br>现在从事行业：前端开发<br>目前学习的知识点: html css H5 CSS3  flex布局  bootstrap JS JQ  node.js VUE Uniapp </p>
<a id="more"></a>

<!-- ![avatar.jpg](https://i.loli.net/2019/12/02/Hw5WJIMKzi1YrU8.jpg) -->


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
  <meta name="generator" content="hexo-theme-ayer">
<style type="text/css">
    div img {
        float: left;


<pre><code>}</code></pre><p></style></p>
<link rel="alternate" href="/atom.xml" title="前端小菜鸟" type="application/atom+xml">
</head>
<body>

<div> <img height ="300"  src="/image/about_my/wulianwang.jpg">
 <img height="300"  src="/image/about_my/hulianwang.jpg"></div>
<div><img  height ="300"  src="/image/about_my/diansai.jpg">
 <img   height ="300"    src="/image/about_my/shuxue.jpg"></div>

 <!-- <img    src="/image/about_my/wujun.png"> -->

</body>
</html>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2016/ckpf35kq4006tjov45pildglu/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="b0a10ca151d8a3d1006089117e05c860c2f5fccf3991d8e9969afe23f779021e">3c6c452153b4339fc3b60da63f68454c53c52847eb90c0038e0b11057613995c4a22c71d83a18ffb528b8d9f9eb4a9df</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>作为日记加密</tag>
      </tags>
  </entry>
</search>
