<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端小菜鸟</title>
  
  <subtitle>伍俊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wujun1234567.github.io/"/>
  <updated>2021-02-21T08:54:53.192Z</updated>
  <id>https://wujun1234567.github.io/</id>
  
  <author>
    <name>越前龙马</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS里的面试题判断数据类型的三种方式</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19nf003rnkv4g3sz2j85/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19nf003rnkv4g3sz2j85/</id>
    <published>2021-02-21T08:54:53.000Z</published>
    <updated>2021-02-21T08:54:53.192Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS里的面试题箭头函数和普通函数的区别</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19ok004hnkv48456gcwc/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19ok004hnkv48456gcwc/</id>
    <published>2021-02-21T08:04:14.000Z</published>
    <updated>2021-02-21T08:04:14.212Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS里的面试题把字符串的字母取反</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19nv0044nkv4d2bqhrts/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19nv0044nkv4d2bqhrts/</id>
    <published>2021-02-21T08:03:28.000Z</published>
    <updated>2021-02-21T08:03:28.351Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS里的算法题洗牌算法</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19my003ankv40c4pa5u8/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19my003ankv40c4pa5u8/</id>
    <published>2021-02-20T12:36:03.000Z</published>
    <updated>2021-02-20T12:56:45.866Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的算法题洗牌算法</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">洗牌算法应该是接触的第一个算法，算法真的是一个神奇的东西</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的算法题洗牌算法</strong></div><ul><li>洗牌算法  用来求一个随机数组的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">var arr &#x3D; [1, 9, 3];<br>function fn(arr) &#123;<br>&#x2F;&#x2F; 克隆数组<br>  var crr &#x3D; arr.concat();<br>  var len &#x3D; crr.length<br>  for (var i &#x3D; 0; i &lt; len; i++) &#123;<br>    &#x2F;&#x2F; 获取 0 -2 <br>    var index &#x3D; Math.floor(Math.random() * crr.length);<br>    console.log(index);<br>    var temp &#x3D; crr[index]<br>    crr[index] &#x3D; crr[i]<br>    crr[i] &#x3D; temp<br>  &#125;<br>  return crr;<br>&#125;<br>for (var i &#x3D; 0; i &lt; 10; i++) &#123;<br>  console.log(fn(arr));<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><img src="/image/JSsuanfa/01.png"><img src="/image/JSsuanfa/02.png"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的算法题洗牌算法&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
洗牌算法应该是接触的第一个算法，算法真的是一个神奇的东西
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS算法" scheme="https://wujun1234567.github.io/categories/JS%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JS里的算法题洗牌算法" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E7%AE%97%E6%B3%95%E9%A2%98%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JS里的面试题随机排序</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19ox0050nkv41zqa3og1/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19ox0050nkv41zqa3og1/</id>
    <published>2021-02-20T08:04:24.000Z</published>
    <updated>2021-02-20T12:34:29.548Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的面试题随机排序</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的面试题随机排序</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的面试题随机排序</strong></div><ol><li>自带的sort() 方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain">var arr &#x3D; [1, 9, 3, 8, 5, 6, 7]<br><br>function fn(arr) &#123;<br>  var arr1 &#x3D; arr.concat()<br><br>  arr1.sort(function (n1, n2) &#123;<br>    return Math.random() - 0.5<br>  &#125;)<br>  return arr1<br>&#125;<br><br>for (var i &#x3D; 0; i &lt; 10; i++) &#123;<br>  console.log(fn(arr));<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>递归的方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">var arr &#x3D; [1, 9, 3, 8, 5, 6, 7];<br>function fn(arr) &#123;<br>  var ret &#x3D; [];<br>  var crr &#x3D; arr.concat();<br>  (function () &#123;<br>    if (!crr.length) &#123;<br>      return<br>    &#125;<br>    &#x2F;&#x2F; 获取 0 -6 <br>    var index &#x3D; Math.floor(Math.random() * crr.length);<br>    ret &#x3D; ret.concat(crr.splice(index, 1));<br>    arguments.callee();  &#x2F;&#x2F; 调用自动执行函数<br>  &#125;)()<br>  return ret;<br>&#125;<br>for (var i &#x3D; 0; i &lt; 10; i++) &#123;<br>  console.log(fn(arr));<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li>迭代的方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plain">var arr &#x3D; [1, 9, 3, 8, 5, 6, 7];<br><br>function fn(arr) &#123;<br>  var ret &#x3D; [];<br>  var crr &#x3D; arr.concat();<br>  var len &#x3D; crr.length<br>  for (var i &#x3D; 0; i &lt; len; i++) &#123;<br>    &#x2F;&#x2F; 获取 0 -6 <br>    var index &#x3D; Math.floor(Math.random() * crr.length);<br>    ret &#x3D; ret.concat(crr.splice(index, 1));<br>  &#125;<br>  return ret;<br>&#125;<br>for (var i &#x3D; 0; i &lt; 10; i++) &#123;<br>  console.log(fn(arr));<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>洗牌算法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">var arr &#x3D; [1, 9, 3];<br><br>function fn(arr) &#123;<br>  var crr &#x3D; arr.concat();<br>  var len &#x3D; crr.length<br>  for (var i &#x3D; 0; i &lt; len; i++) &#123;<br>    &#x2F;&#x2F; 获取 0 -6 <br>    var index &#x3D; Math.floor(Math.random() * crr.length);<br>    console.log(index);<br>    var temp &#x3D; crr[index]<br>    crr[index] &#x3D; crr[i]<br>    crr[i] &#x3D; temp<br>  &#125;<br>  return crr;<br>&#125;<br>for (var i &#x3D; 0; i &lt; 10; i++) &#123;<br>  console.log(fn(arr));<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的面试题随机排序&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的面试题随机排序
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS面试题" scheme="https://wujun1234567.github.io/categories/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="JS里的面试题随机排序" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9A%8F%E6%9C%BA%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS里的面试题逻辑与逻辑或运算</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19op004nnkv4elggfhp7/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19op004nnkv4elggfhp7/</id>
    <published>2021-02-20T07:46:59.000Z</published>
    <updated>2021-02-20T07:46:59.853Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS里的面试题深拷贝和浅拷贝</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19oo004knkv4hpn1bzvp/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19oo004knkv4hpn1bzvp/</id>
    <published>2021-02-20T02:31:26.000Z</published>
    <updated>2021-02-20T02:31:26.723Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS里的面试题千分符</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19of004bnkv49fc90b7h/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19of004bnkv49fc90b7h/</id>
    <published>2021-02-20T02:28:00.000Z</published>
    <updated>2021-02-20T02:29:12.956Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的面试题千分符</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的面试题千分符</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的面试题千分符</strong></div><ul><li>千分符去重<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plain">var number &#x3D; &#39;1245341231578&#39;<br>var result &#x3D; &#39;&#39;<br>var step &#x3D; 0<br><br>function fn(num) &#123;<br>  for (var i &#x3D; num.length - 1; i &gt;&#x3D; 0; i--) &#123;<br>    result &#x3D; num[i] + result<br>    step++<br>    if (step &#x3D;&#x3D; 3 &amp;&amp; i !&#x3D; 0) &#123;<br>      result &#x3D; &#39;,&#39; + result<br>      step &#x3D; 0<br>    &#125;<br>  &#125;<br>  return result<br>&#125;<br>console.log(fn(number));<br></code></pre></td></tr></table></figure></li></ul></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的面试题千分符&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的面试题千分符
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS面试题" scheme="https://wujun1234567.github.io/categories/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="JS里的面试题千分符" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8D%83%E5%88%86%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>JS里的面试题数组去重</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19nt0042nkv4gbadeafd/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19nt0042nkv4gbadeafd/</id>
    <published>2021-02-20T01:54:41.000Z</published>
    <updated>2021-02-20T01:54:41.046Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS里的面试题Promise的使用</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19n1003enkv43q7q3sii/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19n1003enkv43q7q3sii/</id>
    <published>2021-02-19T15:26:23.000Z</published>
    <updated>2021-02-19T15:26:23.321Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS里的面试题继承</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19os004tnkv46sjd3d81/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19os004tnkv46sjd3d81/</id>
    <published>2021-02-19T14:47:55.000Z</published>
    <updated>2021-02-19T15:22:30.663Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的面试题继承</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的面试题继承</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的面试题继承</strong></div><img src="/image/JSmianshi/27.png"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的面试题继承&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的面试题继承
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS面试题" scheme="https://wujun1234567.github.io/categories/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="JS里的面试题继承" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>JS里的面试题解析url参数</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19ot004vnkv4gvayhgjv/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19ot004vnkv4gvayhgjv/</id>
    <published>2021-02-19T12:33:13.000Z</published>
    <updated>2021-02-19T14:46:41.987Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的面试题解析url参数</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的面试题解析url参数</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的面试题解析url参数</strong></div><p><strong>使用split把字符串转换成数组类型的</strong></p><img src="/image/JSmianshi/26.png"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的面试题解析url参数&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的面试题解析url参数
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS面试题" scheme="https://wujun1234567.github.io/categories/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="JS里的面试题解析url参数" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E8%A7%A3%E6%9E%90url%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>CSS里的demo实现滑动单选框</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19iw000mnkv4fq7g19ry/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19iw000mnkv4fq7g19ry/</id>
    <published>2021-02-19T01:48:03.000Z</published>
    <updated>2021-02-19T02:04:50.911Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">CSS里的demo实现滑动单选框</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">CSS里的demo实现滑动单选框</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>CSS里的demo实现滑动单选框</strong></div><p>效果图展示</p><img src="/image/CSSdemo/01.gif"><p>介绍代码之前复习一下 <code>label</code>的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">第一种：我们点击了span 里面的 按钮 两个字 input 的单选框会被选中<br> &lt;label&gt;  <br>     &lt;input type&#x3D;&quot;checkbox&quot;  &gt;  <br>     &lt;span&gt;按钮&lt;&#x2F;span&gt;<br>   &lt;&#x2F;label&gt;<br><br>第二种 : 我们点击了span 里面的 按钮 两个字 input 的单选框会被选中 <br>label 里面的 for属性的值等于  input id属性里面的值<br> &lt;label for&#x3D;&#39;input_id&#39;&gt;&lt;span&gt;按钮&lt;&#x2F;span&gt;&lt;&#x2F;label&gt;<br> &lt;input id&#x3D;&#39;input_id&#39; type&#x3D;&quot;checkbox&quot;  &gt;<br></code></pre></td></tr></table></figure><p>代码展示<br><img src="/image/CSSdemo/01.png"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;CSS里的demo实现滑动单选框&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
CSS里的demo实现滑动单选框
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="CSSdemo" scheme="https://wujun1234567.github.io/categories/CSSdemo/"/>
    
    
      <category term="CSS里的demo实现滑动单选框" scheme="https://wujun1234567.github.io/tags/CSS%E9%87%8C%E7%9A%84demo%E5%AE%9E%E7%8E%B0%E6%BB%91%E5%8A%A8%E5%8D%95%E9%80%89%E6%A1%86/"/>
    
  </entry>
  
  <entry>
    <title>JS里的面试题冒泡排序</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19np003ynkv4a5xy5g7f/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19np003ynkv4a5xy5g7f/</id>
    <published>2021-02-18T16:02:20.000Z</published>
    <updated>2021-02-18T16:42:26.590Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的面试题冒泡排序</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的面试题冒泡排序</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的面试题冒泡排序</strong></div><img src="/image/JSmianshi/24.png"><img src="/image/JSmianshi/25.png"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的面试题冒泡排序&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的面试题冒泡排序
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS面试题" scheme="https://wujun1234567.github.io/categories/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="JS里的面试题冒泡排序" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS里的面试题交换两个变量的值</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19n5003hnkv47hd1btdo/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19n5003hnkv47hd1btdo/</id>
    <published>2021-02-18T15:15:03.000Z</published>
    <updated>2021-02-18T15:15:03.450Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS里的面试题数组和对象API</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19or004qnkv4cjje88l7/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19or004qnkv4cjje88l7/</id>
    <published>2021-02-17T04:37:53.000Z</published>
    <updated>2021-02-17T12:25:16.262Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的面试题数组和对象API</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的面试题数组和对象API</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的面试题数组和对象API</strong></div><p><strong>数组API</strong></p><ul><li>forEach 遍历所有元素</li></ul><img src="/image/JSmianshi/17.png"><ul><li>every 判断所有元素是否都符合条件</li></ul><img src="/image/JSmianshi/18.png"><ul><li>some 判断是否有至少一个元素符合条件</li></ul><img src="/image/JSmianshi/19.png"><ul><li>sort 排序</li></ul><img src="/image/JSmianshi/20.png"><p>return a-b //升序<br>return b-a //降序</p><ul><li>map 对元素重新组装，生成新的数组</li></ul><img src="/image/JSmianshi/21.png"><ul><li>filter 过滤符合条件的元素</li></ul><img src="/image/JSmianshi/22.png"><p><strong>对象API</strong></p><p>for(var k in obj)</p><img src="/image/JSmianshi/23.png"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">if(obj.hasOwnproperty(key))  &#x2F;&#x2F; 判断 obj是否有 key这个属性<br></code></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的面试题数组和对象API&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的面试题数组和对象API
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS面试题" scheme="https://wujun1234567.github.io/categories/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="JS里的面试题数组和对象API" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B0%E7%BB%84%E5%92%8C%E5%AF%B9%E8%B1%A1API/"/>
    
  </entry>
  
  <entry>
    <title>JS里的面试题作用域和闭包</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19nm003vnkv4dda33rpx/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19nm003vnkv4dda33rpx/</id>
    <published>2021-02-16T10:18:51.000Z</published>
    <updated>2021-02-18T08:55:53.960Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的面试题作用域和闭包</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的面试题作用域和闭包</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的面试题作用域和闭包</strong></div><p>执行上下文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">console.log(a)  &#x2F;&#x2F; undefined<br>var a &#x3D; 100<br><br>fn(&#39;zhangsan&#39;)<br>function fn (name) &#123;<br>age &#x3D; 20<br>console.log(name,age)<br>var age<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>this 的使用</strong><br>this 需要在执行时，才能确认值，定义的时候是无法确认的</p><ul><li>作为构造函数执行</li><li>作为对象属性执行</li><li>作为普通函数执行</li><li>call apply bind</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">var a &#x3D; &#123;<br>name: &#39;A&#39;,<br>fn: function ()&#123;<br>console.log(this.name)<br>&#125;<br>&#125;<br>a.fn()  &#x2F;&#x2F; this &#x3D;&#x3D;&#x3D; a<br>a.fn.call(&#123;name:&#39;B&#39;&#125;) &#x2F;&#x2F; this &#x3D;&#x3D;&#x3D; &#123;name:&#39;B&#39;&#125;<br>var fn1 &#x3D; a.fn<br>fn1() &#x2F;&#x2F; this &#x3D;&#x3D;&#x3D; window<br></code></pre></td></tr></table></figure><p><strong>闭包</strong></p><p>1.函数作为返回值<br>2.函数作为参数来传递</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain">function F1()&#123;<br>var a &#x3D; 100<br>return function()&#123;<br>console.log(a) &#x2F;&#x2F; 自由变量，父作用域寻找<br>&#125;<br>&#125;<br><br>var f1 &#x3D; F1()<br><br>function F2(fn)&#123;<br>var a &#x3D; 200<br>fn()  &#x2F;&#x2F; 打印 100<br>&#125;<br>F2(f1)<br></code></pre></td></tr></table></figure><p>创建 10 个 <code>&lt;a&gt;</code>标签，点击的时候弹出来对应的序号</p><img src="/image/JSmianshi/07.png"><p>面试题</p><img src="/image/JSmianshi/08.png"><p>面试题</p><img src="/image/JSmianshi/09.png"><p>面试题</p><img src="/image/JSmianshi/10.png"><p>面试题</p><img src="/image/JSmianshi/11.png"><p>注意的是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain"> function bar() &#123;<br>        if (!foo) &#123;<br>          var foo &#x3D; 10;<br>        &#125;<br>        console.log(foo); <br>      &#125;<br>看做以下，先把判断条件给忽略,存在变量提升，foo是 undefined ；！undefined  &#x3D; true <br> function bar() &#123;<br>       <br>          var foo &#x3D; 10;<br><br>        console.log(foo); <br>      &#125;<br></code></pre></td></tr></table></figure><p>面试题</p><img src="/image/JSmianshi/12.png"><p>面试题</p><img src="/image/JSmianshi/13.png"><p>面试题</p><img src="/image/JSmianshi/14.png"><p>注意：</p><ul><li>不管 if 条件成不成立，都需要变量提升</li><li>window.a = undefined</li><li>var a ; 但凡是声明的变量还是函数，都是window里面的属性</li><li>“a” in  window  : a 是不是 window 里面的属性</li><li>!(“a” in window) = ! true =  false</li></ul><p>相当于以下这个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">var a<br>if (!(&quot;a&quot; in window)) &#123;<br>  a &#x3D; 1;<br>&#125;<br>console.log(a);  &#x2F;&#x2F; undefined<br></code></pre></td></tr></table></figure><p>面试题</p><img src="/image/JSmianshi/15.png"><p>在JS的非严格模式下函数的实参集合与形参变量存在映射关系：不管其中谁改变了，另一个都会跟着发生改变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">function fn(a)&#123;<br>&#x2F;&#x2F; &#x3D;&gt; a&#x3D;10<br>arguments[0] &#x3D; 100<br>&#x2F;&#x2F; &#x3D;&gt; a&#x3D;100<br><br>a&#x3D;1000<br>&#x2F;&#x2F;&#x3D;&gt;arguments[0] &#x3D;&#x3D;&#x3D;1000<br>&#125;<br>fn(10)<br></code></pre></td></tr></table></figure><img src="/image/JSmianshi/16.png"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的面试题作用域和闭包&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的面试题作用域和闭包
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS面试题" scheme="https://wujun1234567.github.io/categories/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="JS里的面试题作用域和闭包" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>JS里的面试题原型和原型链</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19oi004fnkv4gcg29ybz/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19oi004fnkv4gcg29ybz/</id>
    <published>2021-02-16T04:41:21.000Z</published>
    <updated>2021-02-18T08:55:53.943Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的面试题原型和原型链</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的面试题原型和原型链</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的面试题原型和原型链</strong></div><ul><li><p>var a = {} 其实是 var a = new Object() 的语法糖</p></li><li><p>var a = [] 其实是 var a = new Array() 的语法糖</p></li><li><p>function Foo(){…} 其实是 var Foo = new Function(…)</p></li><li><p>使用 instanceof 判断一个函数是否是一个变量的构造函数</p></li></ul><p>语法糖：语法糖（Syntactic sugar），也译为糖衣语法，是由英国计算机科学家彼得·约翰·兰达（Peter J. Landin）发明的一个术语，指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。</p><p>之所以叫「语法」糖，不只是因为加糖后的代码功能与加糖前保持一致，更重要的是，糖在不改变其所在位置的语法结构的前提下，实现了运行时的等价。可以简单理解为，加糖后的代码编译后跟加糖前一毛一样。</p><p>准确判断一个变量是数组类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">var arr &#x3D; []<br>arr instanceof Array  &#x2F;&#x2F; true<br>typeof arr &#x2F;&#x2F; object , typeof 是无法判断是否是数组的<br></code></pre></td></tr></table></figure><ul><li><p>所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（除了 null）</p></li><li><p>所有的引用类型（数组、对象、函数），都有一个 <code>__proto__</code>属性,属性值是一个普通的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">var obj &#x3D; &#123;&#125;; obj.a &#x3D; 100;<br>console.log(obj.__proto__);<br>console.log(obj.__proto__ &#x3D;&#x3D;&#x3D; Object.prototype)<br></code></pre></td></tr></table></figure></li><li><p>所有的函数，都有一个prototype属性，属性值也是一个普通的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">function fn () &#123;&#125;<br>fn.a &#x3D; 100;<br>console.log(fn.prototype)<br></code></pre></td></tr></table></figure></li><li><p>所有的引用类型（数组、对象、函数），<code>__proto__</code>属性值指向它的构造函数的 “ prototype “属性值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">var obj &#x3D; &#123;&#125;; obj.a &#x3D; 100;<br>console.log(obj.__proto__);<br>console.log(obj.__proto__ &#x3D;&#x3D;&#x3D; Object.prototype)<br></code></pre></td></tr></table></figure></li></ul><p>描述 new 一个对象的过程</p><ul><li>创建一个新对象</li><li>this指向这个新对象</li><li>执行代码，即对this赋值</li><li>返回 this</li></ul><p>原型链的面试题</p><p>如图所示：<br><img src="/image/JSmianshi/04.png"></p><p>hero.name == Hero() 里面的this.name ,this指向的就是Hero<br>也就是 hero.name == Hero.name</p><p>同理 hero.sayme == Hero.sayme 打印的是一个函数</p><p>如图所示：<br><img src="/image/JSmianshi/05.png"></p><p>如图所示：<br><img src="/image/JSmianshi/06.png"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的面试题原型和原型链&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的面试题原型和原型链
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS面试题" scheme="https://wujun1234567.github.io/categories/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="JS里的面试题原型和原型链" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>JS里的面试题变量类型和计算</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19nz0049nkv43nm3gcdy/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19nz0049nkv43nm3gcdy/</id>
    <published>2021-02-15T13:47:49.000Z</published>
    <updated>2021-02-18T08:55:53.925Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的面试题变量类型和计算</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的面试题变量类型和计算</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的面试题变量类型和计算</strong></div><ol><li>值类型 VS 引用类型</li></ol><p>值类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">var a &#x3D; 100<br>var b &#x3D; a <br>a &#x3D; 200<br>console.log(b) &#x2F;&#x2F; 100<br></code></pre></td></tr></table></figure><p>引用类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">var a &#x3D; &#123;age:20&#125;<br>var b &#x3D; a<br>b.age &#x3D; 21 <br>console.log(a.age)  &#x2F;&#x2F; 21<br></code></pre></td></tr></table></figure><ol start="2"><li>typeof 运算符 可以识别六种 number string boolean object function undefined</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">typeof undefined   &#x2F;&#x2F; undefined<br>typeof &#39;abc&#39;   &#x2F;&#x2F; string<br>typeof 123   &#x2F;&#x2F; number<br>typeof true   &#x2F;&#x2F; boolean<br>typeof &#123;&#125;   &#x2F;&#x2F; object<br>typeof []   &#x2F;&#x2F; object<br>typeof null   &#x2F;&#x2F; object<br>typeof console.log   &#x2F;&#x2F; function<br></code></pre></td></tr></table></figure><p>变量计算-强制数据类型转换</p><ul><li><p>字符串拼接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">var a &#x3D; 100 + 10  &#x2F;&#x2F; 110<br>var b &#x3D; 100 + &#39;10&#39;  &#x2F;&#x2F; &#39;10010&#39;<br></code></pre></td></tr></table></figure></li><li><p>== 运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">100 &#x3D;&#x3D; &#39;100&#39; &#x2F;&#x2F; true 把数值 100 转换成 字符串 100<br>0 &#x3D;&#x3D; &#39;&#39; &#x2F;&#x2F; true 把 0 和&#39;&#39; 都转换为false<br>null &#x3D;&#x3D; undefined &#x2F;&#x2F; true 把 null 和 undefined 都转换为false<br></code></pre></td></tr></table></figure></li><li><p>if语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain">var a &#x3D; true<br>if(a)&#123;<br><br>&#125;<br>var b &#x3D; 100<br>if(b)&#123;  &#x2F;&#x2F; 100转换为 true<br><br>&#125;<br>var c &#x3D; &#39;&#39;<br>if(c)&#123;  &#x2F;&#x2F; 空字符串转换为 false<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>逻辑运算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">console.log(10 &amp;&amp; 0) &#x2F;&#x2F;0<br>console.log(&#39;&#39; || &#39;abc&#39;) &#x2F;&#x2F;abc<br>console.log(!window.abc) &#x2F;&#x2F; !undefined &#x3D; true<br></code></pre></td></tr></table></figure></li></ul><p>何时用 == 和 ===</p><p>除了 == null 之外 ，其他都一律用 === </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">const obj &#x3D; &#123;x: 100&#125;<br>if(obj.a &#x3D;&#x3D; null)&#123;&#125;<br>&#x2F;&#x2F; 相当于<br>&#x2F;&#x2F; if (obj.a &#x3D;&#x3D;&#x3D; null || obj.a &#x3D;&#x3D;&#x3D; undefined)&#123;&#125;<br></code></pre></td></tr></table></figure><p>看一个对象的属性是否存在的时候用双等于<br>看一个if语句里面的参数是否存在的时候用双等于</p><p>===：称为等同符，当两边值的类型相同时，直接比较值，若类型不相同，直接返回false；</p><p>==：称为等值符，当等号两边的类型相同时，直接比较值是否相等，若不相同，则先转化为类型相同的值，再进行比较；</p><p>==运算符进行判断时会自动进行类型转换</p><p>JS里的内置函数 - 数据封装类对象<br>Object<br>Array<br>Boolean<br>Number<br>String<br>Function<br>Date<br>RegExp<br>Error</p><p>内置对象</p><p>Math<br>JSON</p><p>JS变量按照存储方式区分为 值类型和引用类型</p><p><a href="https://www.cnblogs.com/leiting/p/8081413.html" target="_blank" rel="noopener">区别参考</a></p><p>JSON 是一个JS对象 也是一种数据格式  </p><p>把JSON数据格式转换成字符串格式 JSON.stringify({a:10, b:20})<br>把字符串数据转换成JSON数据格式 JSON.parse(‘{“a”:10, “b”:20}’)</p><img src="/image/JSmianshi/03.png"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的面试题变量类型和计算&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的面试题变量类型和计算
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS面试题" scheme="https://wujun1234567.github.io/categories/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="JS里的面试题变量类型和计算" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>2021年的新年日记</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19hu0006nkv4aj9temqo/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19hu0006nkv4aj9temqo/</id>
    <published>2021-02-12T15:21:08.000Z</published>
    <updated>2021-02-12T15:43:15.674Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">2021年的新年日记</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">2021年的新年日记</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 0em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>2021年的新年日记</strong></div><p>新年快乐吧！</p><p style="text-indent: 2em;">    今天喝了白酒又抽了几根烟，我已经至少五六年没有抽烟了。以前小时候因为好奇抽过烟，后来知道抽烟牙齿不好，就没有再抽过了。</p><p style="text-indent: 2em;">  喝酒的话估计有很久很久了吧。追溯到小时候误会爸爸的白酒，以为是水。</p><p style="text-indent: 2em;">有人说这年头不会喝酒和抽烟是不会在外面交到朋友的，这是应酬必备的技能以前会抗拒，现在还是会抗拒。</p><p style="text-indent: 2em;">  不喜欢喝酒，不喜欢抽烟。好像会被身边的亲友们看做是异类吧。因为这是他们必备的技能，也是他们工作中的经验，要我接受这个的话，有点太难，但我理解他们的做法。只是我只想做一个技术交流者，认真的学习技术，靠自己的本事来做事。<p>这个世界未知的事情太多了，需要技术去探索未来的世界是什么样的。</p></p><p style="text-indent: 2em;">  今天和小伙伴夜晚散步了，但是我好像走不进他们聊天的话题里。他们聊的都是怎么去非正规的按摩，女生做的不正当的服务。那时会觉得我和他们距离好像被拉开了，没有共同话题。</p><p style="text-indent: 2em;">不喜欢改变自己，喜欢改变成自己想改变的样子.</p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;2021年的新年日记&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
2021年的新年日记
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="日记" scheme="https://wujun1234567.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="2021年的新年日记" scheme="https://wujun1234567.github.io/tags/2021%E5%B9%B4%E7%9A%84%E6%96%B0%E5%B9%B4%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS里的面试题防抖和节流的使用和区别</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19ov004ynkv47cxghhwr/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19ov004ynkv47cxghhwr/</id>
    <published>2021-02-11T08:20:10.000Z</published>
    <updated>2021-02-15T13:47:01.794Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的防抖和节流的使用和区别</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的防抖和节流的使用和区别</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的防抖和节流的使用和区别</strong></div><ol><li>防抖：顾名思义就是防止抖动；<br>比如说有一个发送请求的按钮，我不小心点击了两次，那么就会多发送一次多余的请求，会增加服务器的负担，我们利用防抖来处理，无论点击了几次，只会按照最后一次来处理。</li></ol><p>代码图<br><img src="/image/JSmianshi/01.png"></p><p>效果展示图<br><img src="/image/JSmianshi/01.gif"></p><ol start="2"><li>节流，就是节约流水，不能让水一下子流光了。<br>比如说有一个发送请求的按钮，我不小心点击了多次，那么就会多发送多次的请求，会增加服务器的负担，我们利用节流来处理，无论点击了几次，多会按照一秒钟一次发送请求。</li></ol><p>代码图<br><img src="/image/JSmianshi/02.png"></p><p>效果展示图<br><img src="/image/JSmianshi/02.gif"></p><p><strong>lodash.js处理防抖和节流</strong></p><p><a href="https://www.lodashjs.com/docs/lodash.debounce#_debouncefunc-wait0-options" target="_blank" rel="noopener">防抖的封装函数</a></p><p><a href="https://www.lodashjs.com/docs/lodash.throttle#_throttlefunc-wait0-options" target="_blank" rel="noopener">节流的封装函数</a></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的防抖和节流的使用和区别&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的防抖和节流的使用和区别
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS面试题" scheme="https://wujun1234567.github.io/categories/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="JS里的面试题防抖和节流的使用和区别" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>JS里的面试题判断一个字符出现最多的字符和字数</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19nb003onkv4fk7da3id/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19nb003onkv4fk7da3id/</id>
    <published>2021-02-08T15:46:26.000Z</published>
    <updated>2021-02-19T03:12:41.037Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的面试题判断一个字符出现最多的字符和字数</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的面试题判断一个字符出现最多的字符和字数</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的面试题判断一个字符出现最多的字符和字数</strong></div>方法一：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plain">var str &#x3D; &#39;acbcsasassass&#39;<br>var index &#x3D; 0<br>var value &#x3D; &#39;&#39;<br><br>var arr &#x3D; str.split(&#39;&#39;)<br>str &#x3D; arr.sort().join(&#39;&#39;)<br><br>var reg &#x3D; &#x2F;([a-zA-Z0-9_])\1+&#x2F;g<br><br>str.replace(reg,function(val,item)&#123;<br>if(index&lt;val.length)&#123;<br>index &#x3D; val.length<br>value &#x3D; item<br>&#125;<br>&#125;)<br><br>console.log(value,index)<br></code></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的面试题判断一个字符出现最多的字符和字数&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的面试题判断一个字符出现最多的字符和字数
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS面试题" scheme="https://wujun1234567.github.io/categories/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="JS里的面试题判断一个字符出现最多的字符和字数" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E5%92%8C%E5%AD%97%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS里的仿淘宝固定侧边栏</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19l90022nkv49wj4ga6n/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19l90022nkv49wj4ga6n/</id>
    <published>2021-02-05T14:47:58.000Z</published>
    <updated>2021-02-05T14:47:58.996Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS里的动画函数的封装</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19lq002enkv4beto6ai4/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19lq002enkv4beto6ai4/</id>
    <published>2021-02-05T14:46:42.000Z</published>
    <updated>2021-02-05T14:46:42.372Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS里的轮播图的案例</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19n7003knkv4gepp1fdr/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19n7003knkv4gepp1fdr/</id>
    <published>2021-02-05T14:45:47.000Z</published>
    <updated>2021-02-05T14:45:47.895Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS里的放大镜效果</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19me002tnkv4cdm7gdch/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19me002tnkv4cdm7gdch/</id>
    <published>2021-02-05T14:20:54.000Z</published>
    <updated>2021-02-05T14:36:35.163Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的放大镜效果</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的放大镜效果</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的放大镜效果</strong></div><p>代码如图所示<br><img src="/image/jsMethod/23.png"></p><p>效果展示图<br><img src="/image/jsMethod/14.gif"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的放大镜效果&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的放大镜效果
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS事件" scheme="https://wujun1234567.github.io/categories/JS%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="JS里的放大镜效果" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E6%94%BE%E5%A4%A7%E9%95%9C%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>JS里的模态框拖拽</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19mc002qnkv4a8cudysz/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19mc002qnkv4a8cudysz/</id>
    <published>2021-02-05T12:15:27.000Z</published>
    <updated>2021-02-05T12:38:08.408Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的模态框拖拽</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的模态框拖拽</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的模态框拖拽</strong></div><p>代码如图所示<br><img src="/image/jsMethod/22.png"></p><p>效果展示图<br><img src="/image/jsMethod/13.gif"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的模态框拖拽&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的模态框拖拽
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS事件" scheme="https://wujun1234567.github.io/categories/JS%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="JS里的模态框拖拽" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E6%A8%A1%E6%80%81%E6%A1%86%E6%8B%96%E6%8B%BD/"/>
    
  </entry>
  
  <entry>
    <title>JS里的登录跳转页面</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19mn0030nkv4fu3qdffo/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19mn0030nkv4fu3qdffo/</id>
    <published>2021-02-04T12:40:48.000Z</published>
    <updated>2021-02-04T12:43:58.794Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的登录跳转页面</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的登录跳转页面</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的登录跳转页面</strong></div><p>登录界面代码如图所示<br><img src="/image/jsMethod/20.png"></p><p>用户界面代码如图所示<br><img src="/image/jsMethod/21.png"></p><p>效果展示图<br><img src="/image/jsMethod/12.gif"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的登录跳转页面&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的登录跳转页面
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS事件" scheme="https://wujun1234567.github.io/categories/JS%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="JS里的登录跳转页面" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E7%99%BB%E5%BD%95%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>JS里的5秒钟之后跳转页面</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19km001pnkv45lh90a33/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19km001pnkv45lh90a33/</id>
    <published>2021-02-04T12:16:43.000Z</published>
    <updated>2021-02-04T12:29:42.759Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的5秒钟之后跳转页面</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的5秒钟之后跳转页面</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的5秒钟之后跳转页面</strong></div><p>代码如图所示<br><img src="/image/jsMethod/19.png"></p><p>效果展示图<br><img src="/image/jsMethod/11.gif"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的5秒钟之后跳转页面&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的5秒钟之后跳转页面
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS事件" scheme="https://wujun1234567.github.io/categories/JS%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="JS里的5秒钟之后跳转页面" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%845%E7%A7%92%E9%92%9F%E4%B9%8B%E5%90%8E%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>JS里的发送短信案例</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19pb005onkv48jv9aos5/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19pb005onkv48jv9aos5/</id>
    <published>2021-02-04T12:11:24.000Z</published>
    <updated>2021-02-04T12:13:56.551Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的发送短信案例</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的发送短信案例</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的发送短信案例</strong></div><p>代码如图所示<br><img src="/image/jsMethod/18.png"></p><p>效果展示图<br><img src="/image/jsMethod/10.gif"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的发送短信案例&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的发送短信案例
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS事件" scheme="https://wujun1234567.github.io/categories/JS%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="JS里的发送短信案例" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>JS里的倒计时案例</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19lk0028nkv45y8cbn6w/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19lk0028nkv45y8cbn6w/</id>
    <published>2021-02-04T11:51:58.000Z</published>
    <updated>2021-02-04T11:54:38.829Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的倒计时案例</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的倒计时案例</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的倒计时案例</strong></div><p>代码如图所示<br><img src="/image/jsMethod/17.png"></p><p>效果展示图<br><img src="/image/jsMethod/09.gif"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的倒计时案例&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的倒计时案例
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS事件" scheme="https://wujun1234567.github.io/categories/JS%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="JS里的倒计时案例" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E5%80%92%E8%AE%A1%E6%97%B6%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>JS里的调整窗口大小变化</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19mq0034nkv48aus46wo/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19mq0034nkv48aus46wo/</id>
    <published>2021-02-04T11:27:39.000Z</published>
    <updated>2021-02-04T11:35:19.548Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的调整窗口大小变化</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的调整窗口大小变化</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的调整窗口大小变化</strong></div><p>代码如图所示<br><img src="/image/jsMethod/16.png"></p><p>效果展示图<br><img src="/image/jsMethod/08.gif"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的调整窗口大小变化&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的调整窗口大小变化
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS事件" scheme="https://wujun1234567.github.io/categories/JS%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="JS里的调整窗口大小变化" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E8%B0%83%E6%95%B4%E7%AA%97%E5%8F%A3%E5%A4%A7%E5%B0%8F%E5%8F%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JS里的按键获取光标事件</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19mk002xnkv4gwhy6dm0/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19mk002xnkv4gwhy6dm0/</id>
    <published>2021-02-04T11:19:45.000Z</published>
    <updated>2021-02-04T11:25:07.721Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的按键获取光标事件</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的按键获取光标事件</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的按键获取光标事件</strong></div><p>代码如图所示<br><img src="/image/jsMethod/15.png"></p><p>效果展示图<br><img src="/image/jsMethod/07.gif"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的按键获取光标事件&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的按键获取光标事件
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS事件" scheme="https://wujun1234567.github.io/categories/JS%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="JS里的按键获取光标事件" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E6%8C%89%E9%94%AE%E8%8E%B7%E5%8F%96%E5%85%89%E6%A0%87%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>JS里的快递单号放大查询</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19m9002nnkv4hp2bh5r4/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19m9002nnkv4hp2bh5r4/</id>
    <published>2021-02-04T06:44:01.000Z</published>
    <updated>2021-02-04T06:45:33.970Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的快递单号放大查询</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的快递单号放大查询</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的快递单号放大查询</strong></div><p>代码如图所示<br><img src="/image/jsMethod/14.png"></p><p>效果展示图<br><img src="/image/jsMethod/06.gif"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的快递单号放大查询&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的快递单号放大查询
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS事件" scheme="https://wujun1234567.github.io/categories/JS%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="JS里的快递单号放大查询" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E5%BF%AB%E9%80%92%E5%8D%95%E5%8F%B7%E6%94%BE%E5%A4%A7%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>JS里的图片跟随鼠标事件</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19m4002knkv42dg1dnq4/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19m4002knkv42dg1dnq4/</id>
    <published>2021-02-04T03:36:14.000Z</published>
    <updated>2021-02-18T08:55:53.976Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的图片跟随鼠标事件</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的图片跟随鼠标事件</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的图片跟随鼠标事件</strong></div><p>代码如图所示<br><img src="/image/jsMethod/13.png"></p><p>效果展示图<br><img src="/image/jsMethod/05.gif"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的图片跟随鼠标事件&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的图片跟随鼠标事件
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS事件" scheme="https://wujun1234567.github.io/categories/JS%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="JS里的图片跟随鼠标事件" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E5%9B%BE%E7%89%87%E8%B7%9F%E9%9A%8F%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>JS里的动态生成表格</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19ln002cnkv4g38r7ce7/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19ln002cnkv4g38r7ce7/</id>
    <published>2021-02-03T12:29:20.000Z</published>
    <updated>2021-02-03T13:38:53.236Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的动态生成表格</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的动态生成表格</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的动态生成表格</strong></div><p>代码如图所示<br><img src="/image/jsMethod/12.png"></p><p>效果展示图<br><img src="/image/jsMethod/04.gif"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的动态生成表格&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的动态生成表格
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS事件" scheme="https://wujun1234567.github.io/categories/JS%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="JS里的动态生成表格" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E8%A1%A8%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>JS里的留言板案例</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19mv0037nkv45jsyffh9/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19mv0037nkv45jsyffh9/</id>
    <published>2021-02-03T11:41:19.000Z</published>
    <updated>2021-02-03T12:28:47.671Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的留言板案例</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的留言板案例</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的留言板案例</strong></div><p>代码如图所示<br><img src="/image/jsMethod/11.png"></p><p>效果展示图<br><img src="/image/jsMethod/03.gif"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的留言板案例&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的留言板案例
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS事件" scheme="https://wujun1234567.github.io/categories/JS%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="JS里的留言板案例" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E7%95%99%E8%A8%80%E6%9D%BF%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>JS里的下拉菜单</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19lh0026nkv46kw26xvl/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19lh0026nkv46kw26xvl/</id>
    <published>2021-02-03T10:53:33.000Z</published>
    <updated>2021-02-03T11:39:31.513Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的下拉菜单</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的下拉菜单</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的下拉菜单</strong></div><p>代码如图所示<br><img src="/image/jsMethod/10.png"></p><p>效果展示图<br><img src="/image/jsMethod/02.gif"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的下拉菜单&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的下拉菜单
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS事件" scheme="https://wujun1234567.github.io/categories/JS%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="JS里的下拉菜单" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>JS里的高级语法</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19oy0053nkv40jqe4gp3/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19oy0053nkv40jqe4gp3/</id>
    <published>2021-02-02T13:15:58.000Z</published>
    <updated>2021-02-18T08:58:50.787Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的高级语法</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的高级语法</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>ES6中类和对象</strong></div><ol><li>创建类，并且实例化</li></ol><img src="/image/JSgaoji/01.png"><ul><li>通过class 关键字创建类，类名习惯定义字母大写</li><li>类里面有个 constructor 函数，可以接收传递过来的参数，同时返回实例对象</li><li>constructor 函数 只要 new 生成实例时，就会自动调用这个函数，如果我们不写这个函数，类也会自动生成这个函数。</li></ul><ol start="2"><li>在类中添加方法</li></ol><img src="/image/JSgaoji/02.png"><ul><li>类里面的所有函数不需要写 function</li><li>多个函数之间不需要用逗号隔开</li></ul></div><div style="text-align: center; color: red">    <strong>类的继承</strong></div><ol><li>儿子继承父亲的方法</li></ol><img src="/image/JSgaoji/03.png"><ol start="2"><li>super 关键字用于访问和调用对象父类上的函数。，</li></ol><p>调用父类的构造函数</p><img src="/image/JSgaoji/04.png"><p>调用父类的普通函数</p><img src="/image/JSgaoji/05.png"><p>子类继承父类的方法，同时拓展自己的方法</p><img src="/image/JSgaoji/06.png"><ul><li>注意 super 关键字必须放在 子类的this 关键字的前面</li></ul><div style="text-align: center; color: red">    <strong>ES5中类和对象的三个注意点</strong></div><ol><li><p>在ES6 中没有变量提升 所以必须先定义类 才能通过类实例化对象</p></li><li><p>类里面的共有属性和方法一定要加 this 使用</p></li><li><p>类里面的this 指向的问题</p></li><li><p>constructor 里面的this指向实例对象，方法里面的this指向这个方法的调用者</p></li></ol><img src="/image/JSgaoji/07.png"><hr><div style="text-align: center; color: red">    <strong>构造函数和原型</strong></div><p>构造函数： 是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与new一起使用。<br>我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面</p><p>在 JS 中 使用构造函数时要注意以下两点</p><ol><li><p>构造函数用于创建某一类对象，其首字母要大写</p></li><li><p>构造函数要和new一起使用才有意义</p></li></ol><p>new在执行时会做四件事情</p><ul><li>在内存中创建一个空的对象</li><li>让this指向这个新的对象</li><li>执行构造函数里面的代码，给这个新对象添加属性和方法</li><li>返回这个新对象（所以构造函数里面不需要return）</li></ul><img src="/image/JSgaoji/08.png"><ul><li>静态成员：在构造函数身上添加的成员，只能由构造函数本身来访问</li></ul><img src="/image/JSgaoji/09.png"><ul><li>实例成员：在构造函数内部创建的对象成员，只能由实例化的对象来访问，this来创建</li></ul><img src="/image/JSgaoji/10.png"><p>构造函数存在内存浪费</p><img src="/image/JSgaoji/11.png"><div style="text-align: center; color: red">    <strong>构造函数原型prototype</strong></div><p>构造函数通过原型分配的函数是所有对象所共享的。</p><p>JS规定，每一个构造函数都有一个prototype属性，指向另一个对象，注意这个prototype就是一个对象<br>这个对象的所有属性和方法，都会被构造函数所拥有。</p><p>原型：一个对象，我们称为prototype为原型对象</p><p>原型的作用是： 共享方法</p><img src="/image/JSgaoji/12.png"><p>对象原型 <strong>proto</strong><br>对象都会有一个属性 <strong>proto</strong> 指向构造函数的prototype原型对象，之所以我们对象可以使用构造函数<br>prototype 原型对象的属性和方法，就是因为对象有<strong>proto</strong>原型的存在。</p><ul><li><p><strong>proto</strong> 对象原型和原型对象prototype是等价的</p></li><li><p><strong>proto</strong> 对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条线路，但是它是一个非标准属性，<br>因此实际开发中，不可以使用这个属性，它只是内部指向原型对象prototype</p></li></ul><img src="/image/JSgaoji/13.png"><p>constructor 构造函数</p><p>对象原型( <strong>proto</strong> ) 和构造函数 ( <strong>proto</strong> )原型对象里面都有一个属性constructor属性，<br>constructor我们称为构造函数，因为它指回构造函数本身。</p><p>如果我们修改了原来的原型对象，给原型对象赋值的是一个对象，则必须手动的利用constructor指回原来的构造函数。</p><img src="/image/JSgaoji/14.png"><p>构造函数，实例 ，原型对象三者之间的关系</p><img src="/image/JSgaoji/15.png"><p>原型链<br><img src="/image/JSgaoji/16.png"></p><p>原型对象 this指向的问题</p><p>构造函数里面的this 和 原型对象里面的this指向的是实例对象</p><img src="/image/JSgaoji/17.png"><p>扩展内置对象</p><p>可以通过原型对象，对原来的内置对象进行扩展自定义的方法，比如数组增加自定义求偶数和功能</p><img src="/image/JSgaoji/18.png"><hr><div style="text-align: center; color: red">    <strong>继承</strong></div><p>继承的call方法</p><ol><li>call() 可以调用函数<br>fn.call()</li></ol><img src="/image/JSgaoji/19.png"><ol start="2"><li>call() 可以改变这个函数的this指向，也可以传递参数</li></ol><img src="/image/JSgaoji/20.png"><p>借用构造函数继承父类型属性</p><img src="/image/JSgaoji/21.png"><p>借用原型对象继承方法</p><p>Son.prototype = Father.prototype<br>这样子类可以拿到父类的方法，但是子类自定义的方法也会被父类给拿到。</p><p>拿到的原因很简单，子构造函数的原型对象指向了父构造函数的原型对象<br>父构造函数的原型对象的地址给了孩子，修改了子原型对象，但是子构造函数的原型对象指向了父构造函数的原型对象。也会将父亲的原型对象修改</p><img src="/image/JSgaoji/22.png"><p>Son.prototype = new Father<br>Son.prototype.constructor = Son</p><img src="/image/JSgaoji/23.png"><img src="/image/JSgaoji/24.png"><hr><div style="text-align: center; color: red">    <strong>数组方法</strong></div><p>forEach的使用，可以替换 for 循环</p><img src="/image/JSgaoji/25.png"><p>filter筛选数组的方法，返回的是一个数组，而且把所有满足条件的元素返回回来</p><img src="/image/JSgaoji/26.png"><p>some 也是查找满足条件的元素是否存在  返回的是一个布尔值 如果查到第一个满足条件的元素就终止循环。</p><img src="/image/JSgaoji/27.png"><hr><div style="text-align: center; color: red">    <strong>字符串方法</strong></div><p>trim.()去除空格</p><img src="/image/JSgaoji/28.png"><hr><div style="text-align: center; color: red">    <strong>对象方法</strong></div><p>Object.keys 获取对象的属性名，不是属性值</p><img src="/image/JSgaoji/29.png"><p>Object.defineProperty()定义新属性或修改原有的属性</p><blockquote><p>Object.defineProperty(obj,prop,descriptor)</p></blockquote><p>Object.defineProperty() 第三个参数descriptor说明： 以对象形式{}书写</p><ul><li><p>value: 设置属性的值  默认为 undefined</p></li><li><p>writable: 值是否可以重写。 true | false 默认为 false</p></li><li><p>enumerable: 目标属性是否可以被枚举(遍历)。 true | false 默认false</p></li><li><p>configurable: 目标属性是否可以被删除或是否可以再次修改特性 true | false 默认为false</p></li></ul><img src="/image/JSgaoji/30.png"><hr><div style="text-align: center; color: red">    <strong>函数的定义和调用的方式</strong></div><p><strong>函数的定义</strong></p><ol><li><p>函数声明方式 function 关键字 （命名函数）</p></li><li><p>函数表达式（匿名函数）</p></li><li><p>new Function</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">var fn &#x3D; new Function(&#39;参数1&#39;,&#39;参数2&#39;,&#39;函数体&#39;)<br></code></pre></td></tr></table></figure><ul><li><p>Function里面参数都必须是字符串格式</p></li><li><p>第三种方式执行效率低，也不方便书写，因此较少使用</p></li><li><p>所有函数都是Function的实例（对象）</p></li><li><p>函数也属于对象</p></li></ul><img src="/image/JSgaoji/31.png"><img src="/image/JSgaoji/32.png"><p><strong>函数的调用</strong></p><ol><li><p>普通函数的方法</p></li><li><p>对象的方法</p></li><li><p>构造函数</p></li><li><p>绑定事件函数</p></li><li><p>定时器函数</p></li><li><p>立即执行函数</p></li></ol><img src="/image/JSgaoji/33.png"><p><strong>this的指向问题</strong></p><table><thead><tr><th align="left">调用方式</th><th align="left">this指向</th></tr></thead><tbody><tr><td align="left">普通函数调用</td><td align="left">window</td></tr><tr><td align="left">构造函数调用</td><td align="left">实例对象 原型对象里面的方法也是指向实例对象</td></tr><tr><td align="left">对象方法调用</td><td align="left">该方法所属对象</td></tr><tr><td align="left">事件绑定方法</td><td align="left">绑定事件对象</td></tr><tr><td align="left">定时器函数</td><td align="left">window</td></tr><tr><td align="left">立即执行函数</td><td align="left">window</td></tr></tbody></table><p><strong>函数内的this指向问题</strong></p><p>改变函数内this指向  JS 提供了三种方法 call()  apply()  bind()</p><ol><li>call()</li></ol><p>call 第一个可以调用函数  第二个可以改变函数内的this的 指向<br>call 主要用于实现继承</p><img src="/image/JSgaoji/34.png"><ol start="2"><li>apply()  应用   运用的意思</li></ol><p>apply() 第一个也是调用函数 第二个可以改变函数内部的this指向<br>但是它的参数必须是数组（伪数组）<br>apply 的主要应用 比如说我们可以利用 apply 借助于数学内置对象求最大值</p><img src="/image/JSgaoji/35.png"><ol start="3"><li>bind 方法  不会调用函数 但是能改变函数内部this指向</li></ol><blockquote><p>fun.bind(thisArg,arg1,arg2,…)</p></blockquote><ul><li>thisArg: 在fun函数运行时指定的this值</li><li>arg1,arg2 :传递的其他参数</li><li>返回由指定的this 值和初始化参数改造的原函数拷贝</li></ul><img src="/image/JSgaoji/36.png"><p>我有一个按钮，当我们点击之后，就禁用这个按钮，3秒钟之后开启这个按钮</p><img src="/image/JSgaoji/37.png"><img src="/image/JSgaoji/38.png"><div style="text-align: center; color: red">    <strong>call apply bind 的使用总结</strong></div><p>相同点：都可以改变函数内部的this指向</p><p>区别点：</p><ul><li>call和apply 会调用函数，并且改变函数内部this指向</li><li>call和apply 传递的参数不一样，call传递参数 a1,a2..形式  apply必须数组形式[arg]</li><li>bind 不会调用函数， 可以改变函数内部this指向</li></ul><p>主要应用场景：</p><ul><li>call经常做继承</li><li>apply 经常跟数组有关系，比如借助于数学对象实现数组最大值最小值</li><li>bind 不调用函数，但是还想改变this指向，比如改变定时器内部的this指向。</li></ul><div style="text-align: center; color: red">    <strong>严格模式</strong></div><p>严格模式对正常的JavaScript语义做了一些更改：</p><ol><li><p>消除了JavaScript语法的一些不合理，不严谨之处，减少了一些怪异行为。</p></li><li><p>消除代码运行的一些不安全之处，保证代码运行的安全。</p></li><li><p>提高了编译器效率，增加运行速度</p></li><li><p>禁用了在ECMAScript 的未来版本中可能会定义的一些语法 ，为未来新版本的JavaScript做好<br>铺垫，如一些保留字：class,enum,export,extends,impot,super 不能做变量名</p></li></ol><p><strong>为脚本开启严格模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>&lt;script&gt;<br>&#39;use strict&#39;<br>&lt;&#x2F;script&gt;<br><br>&lt;script&gt;<br>(function()&#123;<br>&#39;use strict&#39;<br>&#125;)()<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p><strong>为函数开启严格模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>&lt;script&gt;<br>function fn ()&#123;<br>&#39;use strict&#39;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><ol><li>变量规定</li></ol><ul><li><p>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量，严格模式禁止使用，先var声明再使用</p></li><li><p>严禁删除已经声明变量。例如， delete 对象 ; 语法是错误的</p></li></ul><p>注意： detele 只能删除 对象属性</p><ol start="2"><li>严格模式下this指向问题</li></ol><p>① 以前在全局作用域函数中的this指向window对象<br>② 严格模式下全局作用域中函数中的this是 undefined<br>③ 以前构造函数时，不加new也可以调用，当普通函数，this指向全局对象<br>④ 严格模式下，如果构造函数不加new调用，this指向的是undefined<br>⑤ new实例化的构造函数指向创建的对象实例<br>⑥ 定时器this还是指向window<br>⑦ 事件，对象还是指向调用者</p><ol start="3"><li>函数变化</li></ol><p>① 严格模式下函数里面的参数不允许有重名<br>② 严格模式下if语句里面不能有函数体<br>③ 严格模式下函数里面可以写函数</p><div style="text-align: center; color: red">    <strong>高阶函数</strong></div><p>高阶函数是对其他函数进行操作的函数，它接收函数作为参数或将函数作为返回值输出。</p><img src="/image/JSgaoji/39.png"><p>此时 fn 就是一个高阶函数<br>函数也是一种数据类型，同样可以作为参数，传递给另一个参数使用。最典型的就是作为回调函数。</p><hr><div style="text-align: center; color: red">    <strong>闭包</strong></div><p>变量根据作用域的不同分为两种：全部变量和局部变量</p><ol><li><p>函数内部可以使用全部变量</p></li><li><p>函数外部不可以使用局部变量</p></li><li><p>当函数执行完毕，本作用域内的局部变量会销毁。</p></li></ol><p>闭包指有权访问另一个函数作用域中的变量的函数<br>简单理解就是，一个作用域可以访问另一个函数内部的局部变量</p><img src="/image/JSgaoji/40.png"><p>闭包的作用：延伸了变量的作用范围</p><img src="/image/JSgaoji/41.png"><p>利用闭包的方式得到小li的索引号</p><img src="/image/JSgaoji/42.png"><hr><div style="text-align: center; color: red">    <strong>递归</strong></div><p>递归：一个函数在内部可以调用其本身</p><img src="/image/JSgaoji/43.png"><p>利用递归求数学题<br>求 1<em>2</em>3<em>4</em>n 的阶乘</p><img src="/image/JSgaoji/44.png"><p>利用递归函数求斐波那契数列<br>1 1 2 3 5 8 13  21…n</p><img src="/image/JSgaoji/45.png"><p>利用递归求： 根据id返回对应的数据对象</p><img src="/image/JSgaoji/46.png"><hr><div style="text-align: center; color: red">    <strong>深拷贝和浅拷贝</strong></div><ul><li>浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用（地址）</li><li>深拷贝拷贝多层，每一层级别的数据都会拷贝</li><li>Object.assign(target,…sources) ES6新增方法可以浅拷贝</li></ul><img src="/image/JSgaoji/48.png"><img src="/image/JSgaoji/47.png"><p>上图的代码只有改变 msg.age 里的数据，另一个对象里面的数据也会改变。</p><img src="/image/JSgaoji/49.png"><img src="/image/JSgaoji/50.png"><p>上图的代码只有改变 msg.age 里的数据，另一个对象里面的数据不会被改变。</p><div style="text-align: center; color: red">    <strong>正则表达式</strong></div><ol><li><p>利用RegExp对象来创建  正则表达式<br>var regexp = new RegExp(/123/);<br>console.log(regexp)</p></li><li><p>利用字面量创建 正则表达式<br>var rg = /123/;</p></li><li><p>test 方法用来检测字符串是否符合正则表达式要求的规范<br>console.log(reg.test(123))   // true<br>console.log(reg.test(‘abc’)) // false</p></li></ol><p><strong>正则表达式中的特殊字符</strong></p><ul><li>边界符<br>正则表达式中的边界符（位置符）用来提示字符所处在的位置，主要有两个字符</li></ul><table><thead><tr><th align="left">边界符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">表示匹配行首的文本(以谁开始)</td></tr><tr><td align="left">$</td><td align="left">表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><p>^ 和 $ 一起使用表示精确匹配</p><img src="/image/JSgaoji/51.png"><ul><li>字符类：[] 表示有一系列字符可供选择  只要匹配其中一个就可以了</li></ul><img src="/image/JSgaoji/52.png"><ul><li>字符组合</li></ul><img src="/image/JSgaoji/53.png"><ul><li>如果中括号里面有 ^ 表示取反的意思  千万和 我们边界符 ^ 别混淆</li></ul><img src="/image/JSgaoji/54.png"><ul><li>量词符  ： 用来设定某个模式出现的次数</li></ul><table><thead><tr><th align="left">量词</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">重复零次或者更多次</td></tr><tr><td align="left">+</td><td align="left">重复一次或者更多次</td></tr><tr><td align="left">?</td><td align="left">重复零次或一次</td></tr><tr><td align="left">{n}</td><td align="left">重复n次</td></tr><tr><td align="left">{n,}</td><td align="left">重复n次或更多次</td></tr><tr><td align="left">{n,m}</td><td align="left">重复n到m次</td></tr></tbody></table></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的高级语法&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的高级语法
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS语法" scheme="https://wujun1234567.github.io/categories/JS%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="JS里的高级语法" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JS里的Tab栏切换</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19kj001nnkv47jip6qxx/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19kj001nnkv47jip6qxx/</id>
    <published>2021-02-02T11:29:30.000Z</published>
    <updated>2021-02-03T10:52:16.123Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的Tab栏切换</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的Tab栏切换</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>JS里的Tab栏切换</strong></div><p>代码如图所示<br><img src="/image/jsMethod/09.png"></p><p>效果展示图<br><img src="/image/jsMethod/01.gif"></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的Tab栏切换&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的Tab栏切换
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS事件" scheme="https://wujun1234567.github.io/categories/JS%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="JS里的Tab栏切换" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84Tab%E6%A0%8F%E5%88%87%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>HTMLandCSS的面试题</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19jz0018nkv4d6vjbszl/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19jz0018nkv4d6vjbszl/</id>
    <published>2021-01-27T02:46:31.000Z</published>
    <updated>2021-02-02T13:24:20.363Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">HTMLandCSS的面试题</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">HTMLandCSS的面试题</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>如何理解HTML语义化</strong></div><p>html语义化就是用正确的标签来做正确的事情。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">错误的写法<br>&lt;div&gt;标题&lt;&#x2F;div&gt;<br>&lt;div&gt;段落&lt;&#x2F;div&gt;<br><br>正确的写法<br>&lt;h1&gt;标题&lt;&#x2F;h1&gt;<br>&lt;p&gt;段落&lt;&#x2F;p&gt;<br></code></pre></td></tr></table></figure><ul><li>让人更容易读懂（增加代码的可读性）</li><li>让搜索引擎更容易读懂（SEO）提高搜索排名</li></ul><hr><div style="text-align: center; color: red">    <strong>块状元素和内联元素</strong></div><blockquote><p>display: block/table;  div h1 h2 table ul ol p 等 可以设置宽高 垂直分布<br>display: inline        span  em i b  a strong  等 不可以设置宽高 水平分布<br>display: inline-block  img  buttom</p></blockquote><p>img input 是属于 行内替换元素</p><hr><div style="text-align: center; color: red">    <strong>盒模型宽度计算</strong></div><p>如下代码 请问div 的offsetwidth 是多大</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">div&#123;<br>width: 100px<br>padding: 10px<br>border: 1px solid #ccc<br>margin: 10px<br>&#125;<br></code></pre></td></tr></table></figure><p>offsetwidth = (内容宽度 + 内边距 + 边框)，无外边距<br>offsetwidth = 100 + 20 + 2 = 122</p><p>如果让offsetwidth 等于100px 如何做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">div&#123;<br>width: 100px<br>padding: 10px<br>border: 1px solid #ccc<br>margin: 10px<br>box-sizing: border-box<br>&#125;<br><br>盒子总的宽度为100px 实际元素的 width ！&#x3D; 100px<br>总的宽度为 padding + border + width &#x3D; 100px<br></code></pre></td></tr></table></figure><hr><div style="text-align: center; color: red">    <strong>如何实现一个三角形</strong></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">     &lt;style&gt;<br>     div &#123;<br>      width: 0px;<br>      height: 0px;<br>      border: 50px solid transparent;<br>      border-top-color: tomato;<br>           &#125;<br>     &lt;&#x2F;style&gt;<br>&lt;body&gt;<br>  &lt;div&gt;&lt;&#x2F;div&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure><hr><div style="text-align: center; color: red">    <strong>如何实现一个扇形</strong></div>在三角形的基础上加了一个border-radius<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain">  &lt;style&gt;<br>    div &#123;<br>      width: 0px;<br>      height: 0px;<br>      border: 50px solid transparent;<br>      border-top-color: tomato;<br>      border-radius: 50px;<br>    &#125;<br>  &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>  &lt;div&gt;&lt;&#x2F;div&gt;<br><br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure><hr><div style="text-align: center; color: red">    <strong>margin纵向重叠问题</strong></div><ul><li>相邻元素的margin-top 和 margin-bottom 会发生重叠</li><li>空白内容的<code>&lt;p&gt;&lt;/p&gt;</code>也会重叠</li></ul><p>如下代码，AAA 和 BBB之间的距离是多少</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">  &lt;style&gt;<br>    p &#123;<br>      font-size: 16px;<br>      line-height: 1;<br>      margin-top: 10px;<br>      margin-bottom: 15px;<br>    &#125;<br>  &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>  &lt;p&gt;AAA&lt;&#x2F;p&gt;<br>  &lt;p&gt;&lt;&#x2F;p&gt;<br>  &lt;p&gt;&lt;&#x2F;p&gt;<br>  &lt;p&gt;&lt;&#x2F;p&gt;<br>  &lt;p&gt;BBB&lt;&#x2F;p&gt;<br><br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure><p>答案是 15px 也就是AAA的bottom的距离</p></div><hr><div style="text-align: center; color: red">    <strong>margin负值问题</strong></div><p>首先需要注意的是<br>margin-top / left 是移动自身的<br>margin-bottom / right 是移动其他元素的</p><ul><li>margin-top 和 margin-left 负值，元素向上、向左移动</li><li>margin-right负值， 右侧元素左移，自身不受影响</li><li>margin-bottom负值， 下方元素上移，自身不受影响</li></ul><hr><div style="text-align: center; color: red">    <strong>什么是BFC？如何运用</strong></div><p>BFC： 块格式化上下文 (block formatting context)</p><ul><li>一块独立渲染区域，内部元素的渲染不会影响边界以外的元素</li></ul><p>BFC的理解与作用<br>形成BFC的常见条件</p><ul><li>float 属性不为 none</li><li>position 为absolute 或 fixed</li><li>display 为 inline-block, table-cell, table-caption, flex</li><li>overflow 不为 visible（hidden auto scroll）</li></ul><p>开启BFC特点作用</p><ol><li>解决margin叠加问题</li></ol><p>当没开启BFC时：上下两个盒子会有叠加的问题<br><img src="/image/cssDetailed/25.png"></p><p>当开启BFC时：上下两个盒子不会有叠加的问题<br><img src="/image/cssDetailed/26.png"></p><ol start="2"><li>解决margin传递问题</li></ol><p>给子盒子一个margin-top会导致父盒子也会有一个margin-top，和子盒子一起掉下来。<br><img src="/image/cssDetailed/27.png"></p><p>当开启BFC时：不会有margin传递问题，也可以给父盒子加边框解决这个问题<br><img src="/image/cssDetailed/28.png"></p><ol start="3"><li>解决浮动问题</li></ol><p>左浮动的盒子是不占有位置的，下面的盒子会升上来<br><img src="/image/cssDetailed/29.png"></p><p>当开启BFC时：不会有浮动问题<br><img src="/image/cssDetailed/30.png"></p><ol start="4"><li>解决覆盖问题</li></ol><img src="/image/cssDetailed/31.png"><p>当开启BFC时：不会有覆盖问题<br><img src="/image/cssDetailed/32.png"></p><hr><div style="text-align: center; color: red">    <strong>手写clearfix</strong></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">.clearfix:after &#123;<br>content: &quot;&quot;;<br>display: block;<br>clear: both;<br>&#125;<br>&#x2F;&#x2F; 兼容IE低版本<br>.clearfix&#123;<br>*zoom: 1;<br>&#125;<br></code></pre></td></tr></table></figure><p>清除浮动本质上是要消除浮动元素带来的一些影响（例如高度塌陷）</p><p>手写一个 clearfix：<br>给父元素添加 clearfix 类名，并在其 :after 伪元素添加 clear:both; 正常情况下不需要 display:block; 因为 div 默认是 block，<br>但可能被其它样式选择器设置为其它的方式，如果inline，就导致这个作用无效了，<br>所以需要加上 display:block; 同时给 .clearfix 设置 <code>*zoom</code>: 1; 属性以兼容低版本的 IE</p><hr><div style="text-align: center; color: red">    <strong>flex布局画一个三色骰子</strong></div>代码如图所示<img src="/image/cssDetailed/05.png"><p>实际效果图<br><img src="/image/cssDetailed/06.png"></p><hr><div style="text-align: center; color: red">    <strong>CSS定位</strong></div><p>定位：相对定位 绝对定位 固定定位 静态定位 粘连定位</p><p>absolute 和 relative 分别依据什么定位</p><ul><li><p>static 静态定位，默认的</p></li><li><p>relative 依据自身定位（不脱离文档流，占有空间）</p></li><li><p>absolute 依据最近已定位的祖先元素(如果找不到会依据body定位，脱离文档流，不占有空间)</p></li><li><p>fixed 固定定位，相当于浏览器的位置，（脱离文档流，不占有空间）</p></li><li><p>sticky 粘性定位 具有吸顶的效果</p></li></ul><p>具有定位的盒子里面的margin会失效</p><p>具有定位的行内元素可以给宽高</p><p>固定定位不占有位置</p><hr><div style="text-align: center; color: red">    <strong>CSS水平居中</strong></div><ul><li><p>inline/inline-block元素： text-align:center</p></li><li><p>block元素：margin: 0 auto</p></li><li><p>absolute元素：left:50% + margin-left负值一半元素宽度</p></li><li><p>absolute元素：left, right = 0 + margin: 0 auto</p></li><li><p>absolute元素：left:50% + transform:translate(-50%,0) </p></li><li><p>弹性元素：默认父元素display:flex; justify-content: center;</p></li></ul><hr><div style="text-align: center; color: red">    <strong>CSS垂直居中</strong></div> <ul><li><p>inline元素：line-height的值等于height值</p></li><li><p>absolute元素：top:50% + margin-top 负值一半元素高度</p></li><li><p>absolute元素：top:50% + transform:translate(0,-50%) </p></li><li><p>absolute元素：top,bottom = 0 + margin:auto 0; </p></li><li><p>弹性flex:默认父元素display:flex; align-items:center;</p></li><li><p>单元格table-cell元素：父元素 display:table-cell; vertical-align:middle;</p></li></ul><hr><div style="text-align: center; color: red">    <strong>CSS水平垂直居中</strong></div> <p>实现水平垂直居中的最简单的方式<br>父元素 display : flex<br>子元素 margin  : auto</p><p>代码如图所示<br><img src="/image/cssDetailed/07.png"></p><p>实际效果图<br><img src="/image/cssDetailed/08.png"></p><p>Flex</p><ul><li>父元素</li><li>display: flex;</li><li>justify-content: center;</li><li>align-items: center;</li></ul><p>代码如图所示<br><img src="/image/cssDetailed/18.png"></p><p>实际效果图<br><img src="/image/cssDetailed/19.png"></p><p>CSS3 transfrom</p><ul><li><p>父元素</p></li><li><p>position: relative;</p></li><li><p>子元素</p></li><li><p>transform: translate(-50%, -50%);</p></li><li><p>position: absolute;</p></li><li><p>top: 50%;</p></li><li><p>left: 50%;</p></li></ul><p>代码如图所示<br><img src="/image/cssDetailed/20.png"></p><p>实际效果图<br><img src="/image/cssDetailed/19.png"></p><p>display:table-cell</p><ul><li><p>父元素</p></li><li><p>display: table-cell;</p></li><li><p>vertical-align: middle;</p></li><li><p>text-align: center;</p></li><li><p>子元素</p></li><li><p>display: inline-block;</p></li><li><p>vertical-align: middle;</p></li></ul><p>代码如图所示<br><img src="/image/cssDetailed/21.png"></p><p>实际效果图<br><img src="/image/cssDetailed/22.png"></p><p>display:grid</p><ul><li><p>父元素</p></li><li><p>display: grid;</p></li><li><p>子元素</p></li><li><p>margin: auto;</p></li></ul><p>代码实际效果图</p><img src="/image/cssDetailed/33.png"><p>子绝父相<br>父元素</p><ul><li>position: relative;</li></ul><p>子元素</p><ul><li>position: absolute;</li><li>left: 0;</li><li>right: 0;</li><li>top: 0;</li><li>bottom: 0;</li><li>margin: auto;</li></ul><p>代码如图所示<br><img src="/image/cssDetailed/23.png"></p><p>实际效果图<br><img src="/image/cssDetailed/24.png"></p><p>子元素是文本时：<br>代码如图所示<br><img src="/image/cssDetailed/09.png"></p><p>实际效果图<br><img src="/image/cssDetailed/10.png"></p><p>子元素是块级元素时：</p><p>代码如图所示<br><img src="/image/cssDetailed/11.png"></p><p>实际效果图<br><img src="/image/cssDetailed/12.png"></p><p>多行文本实现水平垂直居中<br>代码如图所示<br><img src="/image/cssDetailed/13.png"></p><p>实际效果图<br><img src="/image/cssDetailed/14.png"></p><hr><div style="text-align: center; color: red">    <strong>line-height如何继承</strong></div> <ol><li>写百分比，比如200%，则继承计算出来的值</li></ol><p>代码如图所示<br><img src="/image/cssDetailed/15.png"></p><p>line-heigt = body的20px  x  200% = 40px </p><ol start="2"><li>写比例，如2/1.5,则继承该比例（比较好理解）</li></ol><p>代码如图所示<br><img src="/image/cssDetailed/16.png"></p><p>line-heigt = 2  x  16px = 32px </p><ol start="3"><li>写具体数值，如30px,则继承该值（比较好理解）</li></ol><p>代码如图所示<br><img src="/image/cssDetailed/17.png"></p><p>line-heigt = 30px </p><hr><div style="text-align: center; color: red">    <strong>盒模型</strong></div> <p>盒模型分为两种：标准盒模型和IE盒模型（怪异盒模型）</p><p>标准盒模型： content（内容区域） padding（内边距） margin（外边距） border（边框）<br>IE盒模型：content包含了padding和border </p><p>CSS盒模型和IE盒模型的区别：</p><p>在标准盒子模型中，width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。</p><p>IE盒子模型中，width 和 height 指的是内容区域+border+padding的宽度和高度。</p><p><code>IE模型和标准模型唯一的区别是内容计算方式的不同</code></p><p>IE模型元素宽度width=content+padding，高度计算相同</p><p>标准模型元素宽度width=content，高度计算相同</p><p>怪异盒模型（ie6 及ie6以下浏览器 不设置doctype）</p><p>box-sizing: box-content  标准<br>            border-box   怪异</p><hr><div style="text-align: center; color: red">    <strong>实现左边定宽右边自适应布局</strong></div> <ol><li><p>父容器设置display: flex, 右盒子flex:1</p></li><li><p>左盒子浮动，右盒子width = 100% margin-left = 左盒子宽度</p></li></ol><hr><div style="text-align: center; color: red">    <strong>CSS单行文本和多行文本的益出处理</strong></div> 块级元素定宽度<p>单行文本的益处隐藏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">white-space: nowrap; &#x2F;&#x2F;不换行<br>overflow: hidden;    &#x2F;&#x2F;溢出隐藏<br>text-overflow: ellipsis; &#x2F;&#x2F; 隐藏的部分用省略号表示<br></code></pre></td></tr></table></figure><p>多行文本的益处隐藏（了解）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">overflow:hidden;<br>text-overflow:ellipsis;<br>dispaly: -webkit-box;<br>-webkit-line-clamp: 2;<br>-webkit-box-orient: vertical;<br></code></pre></td></tr></table></figure><hr><div style="text-align: center; color: red">    <strong>消除图片底部间隙的方法</strong></div> <ol><li><p>图片块状化-无基线对齐： img {display: block}</p></li><li><p>图片底线对齐: img {vertical-align:bottom;}</p></li><li><p>父级设置font-size: 0;</p></li><li><p>行高足够小-基线位置上移： .box{line-height:0;}</p></li></ol><hr><div style="text-align: center; color: red">    <strong>响应式设计是什么？什么原理？</strong></div> <p>响应式网站设计是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本</p><p>基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理</p><p>页面头部必须有meta声明的viewport。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,<br>initial-scale&#x3D;1.0,minimum-scale&#x3D;1.0,user:scalable&#x3D;no&quot;&#x2F;&gt;<br></code></pre></td></tr></table></figure><hr><div style="text-align: center; color: red">    <strong>px em rem 的区别</strong></div> <ul><li><p>px 像素。绝对单位。像素px是相对于显示器屏幕分辩率而言的</p></li><li><p>em,相对单位，相对于父元素，不常用<br><code>font-size的em是相对于父元素的</code><br><code>width 和 height 是相对于自身的font-size</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">body&#123;<br>font-size:20px;<br><br>&#125;<br>div&#123;<br>font-size:2em; &#x2F;&#x2F; font-size: 20*2 &#x3D; 40px<br>&#125;<br><br><br><br>body&#123;<br>font-size:20px;<br><br>&#125;<br>div&#123;<br>font-size:2em; &#x2F;&#x2F; font-size: 20*2 &#x3D; 40px<br>width:1em;    &#x2F;&#x2F;40*1 &#x3D; 40px<br>height:1em;   &#x2F;&#x2F;40*1 &#x3D; 40px<br>&#125;<br><br><br>body&#123;<br>font-size:20px;<br><br>&#125;<br>div&#123;<br>font-size:80px; <br>width:1em;    &#x2F;&#x2F;80px<br>height:1em;   &#x2F;&#x2F;80px<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>rem,相对长度单位，相对于根元素html的字体大小，常用于响应式布局</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain">html&#123;<br>font-size:100px<br>&#125;<br><br>body&#123;<br>font-size:20px;<br><br>&#125;<br>div&#123;<br>font-size:80px; <br>width:1rem;    &#x2F;&#x2F;100px<br>height:1rem;   &#x2F;&#x2F;100px<br>&#125;<br></code></pre></td></tr></table></figure><hr><div style="text-align: center; color: red">    <strong>animate和transition的区别</strong></div> <ul><li><p>transition: 用于做过渡效果，没有帧概念，只有开始和结束状态<br>性能开销较小，被动触发</p></li><li><p>animate: 用于做动画，有帧的概念，可以重复触发且有中间转态，<br>性能开销较大，主动触发</p></li></ul><hr><div style="text-align: center; color: red">    <strong>使元素显示和隐藏的方式</strong></div> <ol><li>display:none</li></ol><ul><li>结构上：元素在页面上将彻底消失，元素不占据空间且无法触发事件</li><li>继承性：父元素上设置了display:none子元素无论怎么设置都无法显示</li><li>性能：会引起浏览器重绘重排，性能消耗较大</li></ul><ol start="2"><li>opacity:0</li></ol><ul><li>结构上：元素在页面上消失，元素占据空间， 能点击触发事件</li><li>继承性：父元素上设置了opacity:0 子元素无论怎么设置都无法显示</li><li>性能：重建图层，性能消耗小</li></ul><ol start="3"><li>visibility:hidden</li></ol><ul><li>结构上：元素在页面上消失，其占据的空间依旧会保留，不能点击触发事件</li><li>继承性：visibilty:hidden会被子元素继承,子元素可以通过设置visibilty:visible;来取消隐藏</li><li>性能：只会导致浏览器重绘重绘，性能消耗相对小</li></ul><ol start="4"><li>设置height，width等盒模型属性为0</li></ol><ul><li>元素的margin，border，padding，height和width等影响元素盒模型的属性设置为0</li><li>如果元素内有子元素或者内容，还应该设置其overflow:hidden来隐藏其子元素 </li></ul><hr><div style="text-align: center; color: red">    <strong>选择器的优先级</strong></div> <p>！important&gt;行内样式&gt;id选择器&gt;类选择器&gt;标签选择器&gt;通配符&gt;继承</p><p>权重算法：(0,0,0,0)—&gt;第一个0对应的是important的个数，第二个0对应的是id选择器的个数，<br>第三个0对应的是类选择器的个数，第四个0对应的是标签选择器的个数，合起来就是当前选择器的权重。</p><p>比较：先从第一个0开始比较，如果第一个0大，那么说明这个选择器的权重高，如果第一个相同，比较第二个，依次类推。</p><p>例如：（0,2,0,1）&gt;(0,1,2,2)</p><hr><div style="text-align: center; color: red">    <strong>nth-child和nth-of-type的区别</strong></div> <ul><li>nth-child选择的是父元素的子元素，这个子元素并没有指定确切类型，同时满足两个条件时有效果<br>其一是子元素，其二是子元素刚好处于那个位置</li></ul><ul><li>nth-of-type选择的是某父元素的子元素，而这个子元素是指定类型</li></ul><p>第一个li的颜色是红色的，如果在第一个li前面加上一个p标签的话第一个li的颜色不会变红色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">  &lt;style&gt;<br>    li:nth-child(1) &#123;<br>      color: red;<br>    &#125;<br>  &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>  &lt;ul&gt;<br>  &#x2F;&#x2F;&lt;p&gt;&lt;&#x2F;p&gt;<br>    &lt;li&gt;1&lt;&#x2F;li&gt;<br>    &lt;li&gt;2&lt;&#x2F;li&gt;<br>    &lt;li&gt;3&lt;&#x2F;li&gt;<br>    &lt;li&gt;4&lt;&#x2F;li&gt;<br>    &lt;li&gt;5&lt;&#x2F;li&gt;<br>  &lt;&#x2F;ul&gt;<br><br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure><p>第一个li的颜色变红色,会跳过p标签的检测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">  &lt;style&gt;<br>    li:nth-of-type(1) &#123;<br>      color: red;<br>    &#125;<br>  &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>  &lt;ul&gt;<br>    &lt;p&gt;&lt;&#x2F;p&gt;<br>    &lt;li&gt;1&lt;&#x2F;li&gt;<br>    &lt;li&gt;2&lt;&#x2F;li&gt;<br>    &lt;li&gt;3&lt;&#x2F;li&gt;<br>    &lt;li&gt;4&lt;&#x2F;li&gt;<br>    &lt;li&gt;5&lt;&#x2F;li&gt;<br>  &lt;&#x2F;ul&gt;<br><br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure><hr><div style="text-align: center; color: red">    <strong>CSS Sprites是什么？它的优势和劣势</strong></div> <p>CSS Sprites是精灵图又称雪碧图</p><p>优势：</p><ol><li>很好的减少网页请求，大大提高页面的性能</li><li>减少图片的字节</li><li>解决了网页设计在图片命名的困扰</li><li>更换风格方便</li></ol><p>劣势：</p><ol><li>图片合并是需预留好足够空间，宽屏、高分辨率的屏幕下易出现背景断裂；</li><li>开发麻烦，测量繁琐；（可使用样式生成器）</li><li>维护麻烦，背景少许改动有可能影响整张图片，使得字节增加还要改动css</li></ol><hr><div style="text-align: center; color: red">    <strong>什么是CssHack</strong></div> <p>区别不同浏览器制作不同css样式的设置就叫作CSS Hack</p><hr><div style="text-align: center; color: red">    <strong>什么是CSS预处理器/后处理器？为什么要使用它</strong></div> <p>预处理器例如：LESS 、Sass 、Stylus ,用来预编译sass或less，增强了css代码的复用性，<br>还要层级、 mixin 、 变量 、循环 、函数等，具有很方便的UI组件模块化开发能力,极大的提高工作效率。</p><p>后处理器 例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；<br>目前最常做的是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题</p><hr><div style="text-align: center; color: red">    <strong>浏览器内核</strong></div> <p>浏览器内核主要分成两部分：渲染引擎和JS引擎</p><p>渲染引擎：将代码转换成页面输出到浏览器界面</p><p>JS引擎：解析和执行JavaScript来实现网页的动态效果</p><p>最开始渲染引擎和JS引擎并没有区分得很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。<br>比如 webkit 值渲染引擎</p><p>五大浏览器</p><ul><li>Internet Explorer (IE)</li><li>FireFox(火狐)</li><li>Chrome(谷歌)</li><li>Opera(欧朋)</li><li>Safari(苹果)</li></ul><p>Tip(技巧)：<br>目前国内的浏览器大多都是双内核的(IE内核Chrome内核)</p><p>2)厂商前缀<br>IE: -ms-<br>Chrome&amp;Safari: -webkit-<br>FireFox: -moz-<br>Opera: -o-</p><hr><div style="text-align: center; color: red">    <strong>描述下渐进增强和优雅降级</strong></div> <p>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，<br>然后再针对高级浏览器进行效果，交互等改进和追加功能，达到更好的用户体验。</p><p>优雅降级：一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容</p><hr><div style="text-align: center; color: red">    <strong>CSS伪类和伪元素的区别</strong></div> <p>CSS中规定</p><ul><li>伪类由一个冒号开始，然后为伪类的名称；</li><li>伪元素由两个冒号开始，然后为伪元素的名称</li></ul><p>伪类：本质上是为了弥补常规CSS选择器的不足，以便获取到更多信息。<br>通常表示获取不存在与DOM树中的信息，或获取不能被常规CSS选择器获取的信息。</p><p>a:link  没有访问之前a的样式;<br>a:visited  已访问a的样式;<br>a:hover  鼠标移上的样式;<br>a:active 鼠标按下的样式;<br>input:focus 获取光标</p><p>css3新增伪类选择器</p><p>:not 排除</p><p>:last-child 最后一个子元素</p><p>:nth-child(n) n表示具体的第n个 odd/2n+1奇数 even/2n偶数  -n+2前两个 n+2 第二个开始</p><p>only-child 仅仅/唯一只有一个</p><p>nth-last-child倒数第n个元素</p><p>:first-of-type第一个同级兄弟元素</p><p>:last-of-type最后一个同级兄弟元素</p><p>:only-of-type只有一个同级兄弟元素</p><p>:nth-of-type(n)第n个同级兄弟元素</p><p>:nth-last-of-type(n)倒数第几个同级兄弟元素</p><p>:empty空内容</p><p>伪元素：本质上是创建了一个由内容的虚拟容器。这个容器不包括任何DOM元素，但是可以包含内容。<br>另外，开发者还可以为伪元素定制样式</p><p>::selection  选择的区域</p><p>::first-line / first-letter  第一行 / 第一个字母</p><p>::before / after  内容区域的前面 / 后面</p><p>区别：伪类添加的样式就是当前的标签，伪元素的样式并不是添加到标签身上，而是添加到创建出来的虚拟容器上面</p><hr><div style="text-align: center; color: red">    <strong>重排和重绘</strong></div> <p>重排会重绘的区别：<br>重绘不一定需要重排（比如颜色的改变），重排必然导致重绘（比如改变网页位置）</p><p>重排(Reflow)：当渲染树的一部分必须更新并且节点的尺寸发生了变化，浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。</p><p>重绘(Repaint)：是在一个元素的外观被改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。比如改变某个元素的背景色、文字颜色、边框颜色等等</p><p>reflow(回流)：当浏览器发现某个部分发生了点变化影响了布局，需要倒回去重新渲染。<br>   内行称这个回退的过程叫 reflow</p><p>引发重排的方式</p><ol><li><p>添加、删除可见的dom</p></li><li><p>元素的位置改变</p></li><li><p>元素的尺寸改变(外边距、内边距、边框厚度、宽高、等几何属性)</p></li><li><p>页面渲染初始化</p></li><li><p>浏览器窗口尺寸改变</p></li><li><p>获取某些属性。当获取一些属性时，浏览器为取得正确的值也会触发重排,它会导致队列刷新，这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。所以，在多次使用这些值时应进行缓存。</p></li></ol><hr><div style="text-align: center; color: red">    <strong>了解px、rpx、em、rem、%、vw、vh、vm的区别</strong></div> <ol><li><p>px<br>1）px就是pixel的缩写，意为像素。<br>2）px就是设备或者图片最小的一个点，比如常常听到的电脑像素是1024x768的，表示的是水平方向是1024个像素点，垂直方向是768个像素点。<br>3）px是我们网页设计常用的单位，也是基本单位。<br>4）通过px可以设置固定的布局或者元素大小。<br>5）缺点：没有弹性。</p></li><li><p>rpx<br>1）rpx 是微信小程序解决自适应屏幕尺寸的尺寸单位。<br>2）rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。<br>3）微信小程序规定屏幕的宽度为750rpx。<br>4）解释：例如宽度，相当于把屏幕宽度分为750份，1份就是1rpx。高度类似~</p></li></ol><ol start="3"><li>em<br>1）参考物是父元素的font-size，具有继承的特点。<br>2）如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值。<br>3）特点是1. em的值并不是固定的； 2. em会继承父级元素的字体大小。<br>4）1em=1倍父元素font-size的值，2em=2倍父元素font-size的值，以此类推……</li></ol><ol start="4"><li><p>rem<br>1）rem是相对于根元素html，这样就意味着，我们只需要在根元素确定一个参考值，可以设计HTML为大小为10px，到时设置1.2rem就是12px.以此类推。<br>2）优点是，只需要设置根目录的大小就可以把整个页面的成比例的调好</p></li><li><p>%<br>一般来说就是相对于父元素的：<br>1）对于普通定位元素就是我们理解的父元素<br>2）对于position: absolute;的元素是相对于已定位的父元素<br>3）对于position: fixed;的元素是相对于ViewPort（可视窗口），</p></li></ol><ol start="6"><li><p>vw<br>1）css3新单位，view width的简写，是指可视窗口的宽度。假如宽度是1200px的话。那100vw就是1200px,10vm就是120px，以此类推……<br>2）举个例子：浏览器宽度1200px, 1 vw = 1200px/100 = 12 px。</p></li><li><p>vh<br>和vw相似<br>1）css3新单位，view height的简写，是指可视窗口的高度。假如高度是1200px的话。那100vh就是1200px，10vh就是120px，以此类推……<br>2）举个例子：浏览器高度900px, 1 vh = 900px/100 = 9 px。</p></li><li><p>vm<br>1）css3新单位，相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为100单位的vm 举个例子：浏览器高度2）2）900px，宽度1200px，取最小的浏览器高度，1 vm = 900px/100 = 9 px。<br>2）兼容性太差 ,不建议使用</p></li></ol><ol start="9"><li>vw px rem之间的换算</li></ol><p>手机端我们假设设计稿是以750px宽度为标准的，那么:<br>100vw = 750px<br>1vw = 7.5px<br>我们想要： 1rem = 100px<br>1 vw = 7.5px = 1rem<br>x vw = 100px = 1rem<br>x = 100 / 7.5 = 13.33vw</p><p>100px = 100vw / 7.5 = 1rem<br>那么：<br>1rem = 13.33vw</p><hr><div style="text-align: center; color: red">    <strong>什么是替换元素和非替换元素</strong></div> <p>替换元素：</p><p>替换元素是浏览器根据其标签的元素与属性来判断显示具体的内容。</p><p>比如：<code>&lt;input /&gt; type=&quot;text&quot;</code>的是，这是一个文本输入框，换一个其他的时候，浏览器显示就不一样</p><p>(X)HTML中的<code>&lt;img&gt;、&lt;input&gt;、&lt;textarea&gt;、&lt;select&gt;、&lt;object&gt;</code>都是替换元素，这些元素都没有实际的内容。</p><p>非替换元素：</p><p>(X)HTML 的大多数元素是不可替换元素，他们将内容直接告诉浏览器，将其显示出来。</p><p>比如<code>&lt;p&gt;wanmei.com&lt;/p&gt;</code></p><p>浏览器将把这段内容直接显示出来。</p><p>除了这两字，还有两种非常属性的元素，显示元素，他分为两种情况，一种是‘块及元素’ ‘block’，还有一种是“行内元素”inline，大家也叫“内联元素”。</p><hr><div style="text-align: center; color: red">    <strong>清除浮动的方法</strong></div> <p>第一种：在浮动元素后面添加一个空标签 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">.clear&#123;<br>clear:both<br>&#125;<br>&lt;div class&#x3D;&quot;clear&quot;&gt;&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure><p>第二种：给浮动元素的父盒子添加 overflow:hidden</p><p>第三种：在要清除浮动的父级添加伪类元素，并设定的样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">.clearfix::after&#123;<br>content: &quot;&quot;;<br>display:block;<br>clear:both;<br>&#125;<br>.clearfix&#123;<br>*zoom:1;<br>&#125;<br></code></pre></td></tr></table></figure><p>第四种：父级div定义height</p><hr><div style="text-align: center; color: red">    <strong>双栏布局和三栏布局</strong><ol><li>利用flex两栏布局</li></ol></div> <hr><div style="text-align: center; color: red">    <strong>CSS选择器</strong></div> <p>1) <code>*</code>: 匹配HTML中的所有元素（注意： <code>*</code>的性能差，因为它要匹配所有元素，所以在开发时，不建议使用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>* &#123;<br>color: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>2)标签选择器:用来匹配对应的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>span &#123;<br>font-size:12px;<br>&#125;<br></code></pre></td></tr></table></figure><p>3)类选择器:用来选择class命名的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>.box&#123;<br>color:skyblue<br>&#125;<br></code></pre></td></tr></table></figure><p>4）ID选择器:用来选择用id命名的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>#content &#123;<br>align:center;<br>&#125;<br></code></pre></td></tr></table></figure><p>5）派出选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>.content p &#123;<br>display: inline-block;<br>&#125;<br></code></pre></td></tr></table></figure><p>6）伪类选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">:hover<br>:focus<br></code></pre></td></tr></table></figure><p>7) 伪元素选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">::after<br>::before<br></code></pre></td></tr></table></figure><p>8) 属性选择器</p><p>属性选择器<br>[属性名]：包含有指定属性名的元素(常用)<br>[属性名=值]：属性名的值为指定值得元素(常用)<br>[属性名<code>~</code>=值]：属性名的值包含指定值得元素<br>[属性名^=值]：属性名的值以指定值的开头的元素<br>[属性名$=值]：属性名的值以指定值得结尾的元素</p><hr><div style="text-align: center; color: red">    <strong>CSS过渡和动画的区别</strong></div> <table><thead><tr><th align="left"></th><th align="left">触发条件</th><th align="left">状态</th><th align="left">CSS属性</th><th align="left">遍历循环</th><th align="left">JS结合使用</th><th align="left">子属性</th></tr></thead><tbody><tr><td align="left">transition</td><td align="left">需要</td><td align="left">2中</td><td align="left">不可修改</td><td align="left">无法</td><td align="left">易于</td><td align="left">少</td></tr><tr><td align="left">animation</td><td align="left">无需</td><td align="left">无限制</td><td align="left">可修改</td><td align="left">运行</td><td align="left">不易于</td><td align="left">多</td></tr></tbody></table><hr><div style="text-align: center; color: red">    <strong>meta标签</strong></div> <p><strong>meta标签常用属性</strong></p><p>Keywords（关键词）</p><p>页面关键词，每个网页应具有描述该网页内容的一组唯一的关键字。<br>使用人们可能会搜索，并准确描述网页上所提供信息的描述性和代表性关键字及短语。标记内容太短，则搜索引擎可能不会认为这些内容相关。另外标记不应超过 874 个字符。</p><p><code>&lt;meta name=&quot;keywords&quot; content=&quot;your tags&quot; /&gt;</code> </p><p>Description(网页描述)<br>页面描述，每个网页都应有一个不超过 150 个字符且能准确反映网页内容的描述标签  </p><p><code>&lt;meta name=&quot;description&quot; content=&quot;150 words&quot; /&gt;</code></p><p>Viewport(移动端布局)<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0,maximum-scale=1.0,  minimum-scale=1.0,user-scalable=no&quot;&gt;</code></p><table><thead><tr><th align="left">属性</th><th align="left">解释说明</th></tr></thead><tbody><tr><td align="left">width</td><td align="left">宽度设置的是viewport宽度，可以设置device-width特殊值</td></tr><tr><td align="left">initial-scale</td><td align="left">初始缩放比，大于0的数字</td></tr><tr><td align="left">maximum-scale</td><td align="left">最大缩放比，大于0的数字</td></tr><tr><td align="left">minimum-scale</td><td align="left">最小缩放比，大于0的数字</td></tr><tr><td align="left">user-scalable</td><td align="left">用户是否可以缩放，yes或no(1或0)</td></tr></tbody></table><hr></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;HTMLandCSS的面试题&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
HTMLandCSS的面试题
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="前端面试题" scheme="https://wujun1234567.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="HTMLandCSS的面试题" scheme="https://wujun1234567.github.io/tags/HTMLandCSS%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JS里的if语句括号里面的判断</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19l2001xnkv4405icaob/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19l2001xnkv4405icaob/</id>
    <published>2021-01-26T16:10:18.000Z</published>
    <updated>2021-02-18T08:55:53.993Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的if语句括号里面的判断</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的if语句括号里面的判断</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>JS里的if语句括号里面的判断</strong></div><p>关于if语句里面的判断true还是false</p><p>if (0) 表示时false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  if (0) &#123;<br>    console.log(11);<br>  &#125;<br>  console.log(222);<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>打印的是 222</p><hr><p>if (null) 表示时false<br>null在JS里面表示 object 除了自身之外不等于任何值， 和undefined类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  if (null) &#123;<br>    console.log(11);<br>  &#125;<br>  console.log(222);<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>打印的是 222</p><hr><p>if (false) 表示时false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  if (false) &#123;<br>    console.log(11);<br>  &#125;<br>  console.log(222);<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>打印的是 222</p><hr><p>if (‘’) 表示时false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  if (&#39;&#39;) &#123;<br>    console.log(11);<br>  &#125;<br>  console.log(222);<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>打印的是 222<br>需要注意的是 if (‘ ‘) 表示时true</p><hr><p>if (isNAN()) 表示时false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  var a &#x3D; 1<br>  if (isNaN(a)) &#123;<br>    console.log(11);<br>  &#125;<br>  console.log(222);<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>打印的是 222</p><hr><p>if (undefined) 表示时false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>   if (undefined) &#123;<br>      console.log(111);<br>    &#125; else &#123;<br>      console.log(222);<br>    &#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>打印的是 222</p></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的if语句括号里面的判断&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的if语句括号里面的判断
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS的细解" scheme="https://wujun1234567.github.io/categories/JS%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="JS里的if语句括号里面的判断" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84if%E8%AF%AD%E5%8F%A5%E6%8B%AC%E5%8F%B7%E9%87%8C%E9%9D%A2%E7%9A%84%E5%88%A4%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>最近的计划安排</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19r5009ynkv42oszeo8m/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19r5009ynkv42oszeo8m/</id>
    <published>2021-01-26T15:12:27.000Z</published>
    <updated>2021-01-27T12:46:50.250Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">最近的计划安排</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">最近的计划安排</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>最近的计划安排</strong></div><p style="text-indent: 0;font-weight: 700;"><p>这个月：只有一个任务：学习HTML 和css的面试题<br>自身简历的填写</p></p><p style="text-indent: 0;font-weight: 700;">    1. 个人简历的安排（1.27完成）<br>    2. JS的复习（10天，外加面试题）<br>    3. flex布局的项目完成(一天时间之内完成)<br>    4. 去哪儿项目的总结。<br>    5. 卖座电影的项目总结。<br>    6. 网页界面的书写    7. ES6的学习</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong></strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong></strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong></strong></div></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;最近的计划安排&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
最近的计划安排
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="学习安排" scheme="https://wujun1234567.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%AE%89%E6%8E%92/"/>
    
    
      <category term="最近的计划安排" scheme="https://wujun1234567.github.io/tags/%E6%9C%80%E8%BF%91%E7%9A%84%E8%AE%A1%E5%88%92%E5%AE%89%E6%8E%92/"/>
    
  </entry>
  
  <entry>
    <title>JS里的try-catch的使用（简单用法）</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19ly002hnkv4hacvbryy/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19ly002hnkv4hacvbryy/</id>
    <published>2021-01-20T13:59:57.000Z</published>
    <updated>2021-01-24T05:17:37.781Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">js里的try-catch的使用（简单用法）</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">c#中异常捕获，用来处理可能程序会发生的错误函数。</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p><strong></strong></p><p>语法：</p><p>try</p><p>{</p><p>有可能出现错误的代码写在这里</p><p>}</p><p>catch</p><p>{</p><p>出错后的处理</p><p>}</p><p>Tip: 如果try中的代码没有出错，则程序正常运行try中的内容后，不会执行catch中的内容，</p><p>如果try中的代码一但出错，程序立即跳入catch中去执行代码，那么try中出错代码后的所有代码就不再执行了.</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;js里的try-catch的使用（简单用法）&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
c#中异常捕获，用来处理可能程序会发生的错误函数。
&lt;/div&gt;



&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS的细解" scheme="https://wujun1234567.github.io/categories/JS%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="JS里的try-catch的使用" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84try-catch%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>JS中的for in , for of 和forEach</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19ka001hnkv4f0ug7dfh/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19ka001hnkv4f0ug7dfh/</id>
    <published>2021-01-19T14:34:08.000Z</published>
    <updated>2021-02-21T08:41:47.491Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS中的for in , for of 和forEach</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS中的for in , for of 和forEach</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p><strong>for…in…的作用</strong></p><ul><li>可枚举对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">const person &#x3D; &#123;<br>  name: &#39;Lydia&#39;,<br>  age: 21,<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><p>for (const item in person) {<br>console.log(item);<br>}</p><p>这个输出结果是： name age</p><p>对于这个结果可以简单理解为，对于对象object，使用for…in…循环是对对象的key值进行循环。</p><p>Tip: </p><ul><li>for…of…不能对对象进行循环</li><li>forEach不能对对象进行遍历</p></li></ul><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><ul><li>可枚举数组<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">const arr &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]<br></code></pre></td></tr></table></figure></li></ul><p>for (const item in arr) {<br>console.log(item);  // 打印 string 类型的索引值<br>console.log(arr[item]);<br>}</p><p>这个输出结果为 0 ‘a’ 1 ‘b’ 2 ‘c’</p><p>这个结果看出使用for…in…是输出索引值，通过索引值能拿到数组数据，但是for in 会影响<br>原型链上添加的方法的。</p><hr><p><strong>for…of…</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">const arr &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]<br></code></pre></td></tr></table></figure><p>for (const item of arr) {<br>console.log(item);<br>}</p><p>这个输出结果为 ‘a’ ‘b’ ‘c’</p><p>这个结果看出使用for…of…是输出数组值</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p><strong>forEach的作用</strong></p><ul><li>可遍历数组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">var myArray &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;];<br></code></pre></td></tr></table></figure><p>myArray.forEach((value,index) =&gt; {<br>console.log(value)<br>console.log(index)<br>})</p><p>输出的结果是 ‘a’ 0 ‘b’ 1 ‘c’ 2</p><p>使用forEach可以输出索引值和数组值，而且不会输出数组的原型对象。</p><p><strong>forEach有个问题就是不能中断执行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">var arr &#x3D; [3, 5, 7];<br></code></pre></td></tr></table></figure><p>arr.forEach(function (value) {<br>console.log(value);<br>if (value === 5) {<br>return false;<br>}<br>});</p><p>输出的结果是 3 5 7</p><p>从结果可以看出，return false没有执行，它会一直运行到底</p><p>for in 也同样存在这个问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">var arr &#x3D; [3, 5, 7];<br></code></pre></td></tr></table></figure><p>for (let value in arr) {<br>console.log(arr[value]);<br>if (value == 5) {<br>break;<br>}<br>}</p><p>输出的结果是 3 5 7</p><p>从结果可以看出，break没有执行，它会一直运行到底</p><hr><p><strong>for…of…的作用</strong></p><ul><li>可遍历数组<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">var myArray &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;];<br></code></pre></td></tr></table></figure>for(let index of myArray) {<br>console.log(index)<br>}</li></ul><p>输出结果是 a b c</p><p>使用for of无法输出索引值，但也不会输出数组的原型对象。</p><ul><li>for…of…可中断<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">var arr &#x3D; [3, 5, 7];<br></code></pre></td></tr></table></figure>for (let value of arr) {<br>console.log(value);<br>if (value == 5) {<br>break;<br>}<br>}</li></ul><p>输出结果是 3 5</p><p>结果可以看出，break执行了，可以中断循环</p><ul><li>可迭代字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">let str &#x3D; &#39;hello&#39;;<br></code></pre></td></tr></table></figure><p>for (let value of str) {<br>console.log(value);<br>}</p><p>输出结果是 ‘h’ ‘e’ ‘l’ ‘l’ ‘o’</p><hr><p><strong>总结</strong></p><p><code>for in 适用于纯对象的遍历，并且只能输出可枚举属性</code></p><p><code>forEach适用于需要知道索引值的数组遍历，但是不能中断</code></p><p><code>for of适用于无需知道索引值的数组遍历，因为可以中断。另外对于其他字符串，类数``组，类型数组的迭代，for of也更适用</code></p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS中的for in , for of 和forEach&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS中的for in , for of 和forEach
&lt;/div&gt;



&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS的细解" scheme="https://wujun1234567.github.io/categories/JS%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="JS中的for in , for of 和forEach" scheme="https://wujun1234567.github.io/tags/JS%E4%B8%AD%E7%9A%84for-in-for-of-%E5%92%8CforEach/"/>
    
  </entry>
  
  <entry>
    <title>CSS中box-sizing border-box用法解析</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19hm0004nkv481znhz26/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19hm0004nkv481znhz26/</id>
    <published>2021-01-19T03:46:31.000Z</published>
    <updated>2021-01-19T03:47:50.021Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CSS中在定位里面 left 和 right 等于零的使用</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19i00008nkv4cc2thxt6/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19i00008nkv4cc2thxt6/</id>
    <published>2021-01-18T03:32:20.000Z</published>
    <updated>2021-01-18T03:50:08.037Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">CSS中在定位里面 left 和 right 等于零的使用</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">CSS中在定位里面 left 和 right 等于零的使用</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS中在定位里面 left 和 right 等于零的使用</strong></div><p>想把  热门景点 放在背景图居中的位置，使用了 text-align :center 是无效的<br>如图所示</p><img src="/image/cssDetailed/03.png"><p>在子绝父相的定位中的居中显示 使用了 text-align :center 还需要加 left 0 ; right 0;<br>如图所示</p><img src="/image/cssDetailed/04.png"><p>注意：<strong style="color: red">text-align :center 和 left 0 ; right 0; 都需要加上的</strong></p></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;CSS中在定位里面 left 和 right 等于零的使用&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
CSS中在定位里面 left 和 right 等于零的使用
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="CSS的细解" scheme="https://wujun1234567.github.io/categories/CSS%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="CSS中在定位里面 left 和 right 等于零的使用" scheme="https://wujun1234567.github.io/tags/CSS%E4%B8%AD%E5%9C%A8%E5%AE%9A%E4%BD%8D%E9%87%8C%E9%9D%A2-left-%E5%92%8C-right-%E7%AD%89%E4%BA%8E%E9%9B%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的MVVM</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19qc0084nkv4bzhw01vd/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19qc0084nkv4bzhw01vd/</id>
    <published>2021-01-16T08:29:26.000Z</published>
    <updated>2021-01-16T08:29:27.010Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>单页面与多页面的对比使用</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19qo008snkv48mgfdhds/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19qo008snkv48mgfdhds/</id>
    <published>2021-01-16T03:46:09.000Z</published>
    <updated>2021-01-21T13:23:12.146Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">单页面与多页面的对比使用</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">单页面与多页面的对比使用</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>多页面的应用</strong></div><ul><li>优点：首屏时间快，SEO效果好：</li><li>缺点：页面切换慢：每一个切换页面都需要发一个http请求</li></ul><p>页面跳转 -&gt; 返回html<br>首屏展示需要请求一个html,首屏会显示出来<br>SEO引擎只识别html</p><hr><div style="text-align: center; color: red">    <strong>单页面的应用</strong></div><ul><li>优点：页面切换快</li><li>缺点：首屏时间稍慢，SEO效果差</li></ul><p>页面跳转 -&gt; JS渲染(js感知url的变化，来切换页面)</p><p>SEO引擎只识别html<br>单页面都是靠js渲染出来的<br>首屏展示需要发一个 jS请求，还需要请求一个html,首屏才会显示出来</p><p>vue 可以提供服务端渲染返回html的内容来解决这个问题</p></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;单页面与多页面的对比使用&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
单页面与多页面的对比使用
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="SEO排名" scheme="https://wujun1234567.github.io/categories/SEO%E6%8E%92%E5%90%8D/"/>
    
    
      <category term="单页面与多页面的对比使用" scheme="https://wujun1234567.github.io/tags/%E5%8D%95%E9%A1%B5%E9%9D%A2%E4%B8%8E%E5%A4%9A%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%AF%B9%E6%AF%94%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的vue-router</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19pn006hnkv47lpq9ria/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19pn006hnkv47lpq9ria/</id>
    <published>2021-01-14T13:35:24.000Z</published>
    <updated>2021-01-14T13:35:24.735Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue中的vuex的使用</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19pr006qnkv4cy3kerz6/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19pr006qnkv4cy3kerz6/</id>
    <published>2021-01-14T13:29:05.000Z</published>
    <updated>2021-01-14T13:29:05.063Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue中的mixin抽离公共逻辑</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19pk0069nkv4cg772095/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19pk0069nkv4cg772095/</id>
    <published>2021-01-14T13:10:21.000Z</published>
    <updated>2021-01-15T08:41:57.694Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中的mixin抽离公共逻辑</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中的mixin抽离公共逻辑</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中的mixin抽离公共逻辑</strong></div><p>父组件引入子组件的代码<br><img src="/image/vueDetailed/24.png"></p><p>子组件的代码<br><img src="/image/vueDetailed/26.png"></p><p>mixin.js的代码<br><img src="/image/vueDetailed/25.png"></p><p>效果展示图中可以看出city 的属性是来自于mixin.js文件里面的公共逻辑<br><img src="/image/vueDetailed/27.png"></p><div style="text-align: center; color: red">    <strong>Vue中的mixin的缺点</strong></div><ul><li>变量来源不明确，不利于阅读</li><li>多mixin 可能 会造成命名冲突</li><li>mixin和组件可能出现多对多的关系，复杂度较高。</li></ul><p>需要注意的是: 主文件的变量引用的优先级会高于mixin的优先级。</p><div style="text-align: center; color: red">    <strong>Vue 3 提出的Composition API解决缺点</strong></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中的mixin抽离公共逻辑&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中的mixin抽离公共逻辑
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中的mixin抽离公共逻辑" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E7%9A%84mixin%E6%8A%BD%E7%A6%BB%E5%85%AC%E5%85%B1%E9%80%BB%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的异步组件的使用</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19pz0075nkv43iep0se9/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19pz0075nkv43iep0se9/</id>
    <published>2021-01-14T12:53:18.000Z</published>
    <updated>2021-01-15T12:19:39.910Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中的异步组件的使用</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中的异步组件的使用</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中的异步组件的使用</strong></div><p>异步组件的作用就是什么时候用就什么时候来取。</p><ul><li>import()函数</li><li>按需加载，异步加载大组件</li></ul><p>效果图<br><img src="/image/vueDetailed/12.gif"></p><p>代码展示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    父组件<br>    &lt;!-- 异步组件 --&gt;<br>    &lt;FormDemo v-if&#x3D;&quot;showFormDemo&quot; &#x2F;&gt;<br>    &lt;button @click&#x3D;&quot;showFormDemo &#x3D; true&quot;&gt;show form demo&lt;&#x2F;button&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>     <br>      showFormDemo: false<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>   <br>    FormDemo: () &#x3D;&gt; &#123;<br>      return import(&#39;.&#x2F;FormDemo&#39;)<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>  <br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style scoped&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中的异步组件的使用&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中的异步组件的使用
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中的异步组件的使用" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的动态组件的使用</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19pw006wnkv46gnv985o/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19pw006wnkv46gnv985o/</id>
    <published>2021-01-14T12:48:25.000Z</published>
    <updated>2021-01-15T12:45:34.421Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中的动态组件的使用</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中的动态组件的使用</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中的动态组件的使用</strong></div><ul><li>:is = “component-name” 用法</li><li>需要根据数据，动态渲染的场景。即组件类型不确定</li></ul><p>点击li 切换不同的组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    父组件   <br>    &lt;component :is&#x3D;&quot;who&quot;&gt;&lt;&#x2F;component&gt;<br>    &lt;ul&gt;<br>      &lt;li @click&#x3D;&quot;who &#x3D; &#39;Footer&#39;&quot;&gt;FooterName&lt;&#x2F;li&gt;<br>      &lt;li @click&#x3D;&quot;who &#x3D; &#39;Header&#39;&quot;&gt;HeaderName&lt;&#x2F;li&gt;<br>    &lt;&#x2F;ul&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>import Header from &#39;.&#x2F;Header&#39;<br>import Footer from &#39;.&#x2F;Footer&#39;<br><br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>      who: &#39;Footer&#39;<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    Header,<br>    Footer,<br>  &#125;,<br>  methods: &#123;<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style scoped&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中的动态组件的使用&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中的动态组件的使用
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中的动态组件的使用" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的slot</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19pm006fnkv43ce1bjie/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19pm006fnkv43ce1bjie/</id>
    <published>2021-01-14T12:29:10.000Z</published>
    <updated>2021-01-15T13:45:15.061Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中的slot</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中的slot</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中的slot</strong></div><ol><li><strong>显示slot插槽默认的内容</strong></li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    父组件<br>    &lt;div&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;div&gt;<br>    &lt;Header v-model&#x3D;&quot;name&quot;&gt;&lt;&#x2F;Header&gt;<br>    &lt;Footer&gt; &lt;&#x2F;Footer&gt;<br>   <br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>import Header from &#39;.&#x2F;Header&#39;<br>import Footer from &#39;.&#x2F;Footer&#39;<br><br>export default &#123;<br>  data () &#123;<br>    return &#123;<br><br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    Header,<br>    Footer<br><br>  &#125;,<br>  methods: &#123;<br><br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style scoped&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    Footer<br>    &lt;slot&gt;<br>      这是默认显示的内容<br>    &lt;&#x2F;slot&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data () &#123;<br>    return &#123;&#125;<br>  &#125;,<br>  mounted () &#123;&#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure><img src="/image/vueDetailed/28.png"><ol start="2"><li><strong>显示slot插槽里的内容</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    父组件<br>    &lt;div&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;div&gt;<br>    &lt;Header v-model&#x3D;&quot;name&quot;&gt;&lt;&#x2F;Header&gt;<br>    &lt;Footer&gt;&#123;&#123;name&#125;&#125; &lt;&#x2F;Footer&gt;<br>   <br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>import Header from &#39;.&#x2F;Header&#39;<br>import Footer from &#39;.&#x2F;Footer&#39;<br><br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>    name: &#39;双越&#39;<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    Header,<br>    Footer<br><br>  &#125;,<br>  methods: &#123;<br><br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style scoped&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    Footer<br>    &lt;slot&gt;<br>      这是默认显示的内容<br>    &lt;&#x2F;slot&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data () &#123;<br>    return &#123;&#125;<br>  &#125;,<br>  mounted () &#123;&#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure><img src="/image/vueDetailed/29.png"></p><div style="text-align: center; color: red">    <strong>Vue中的slot(作用域插槽)</strong></div><p>把子组件的data里面的数据，通过作用域插槽传递到父组件里面<p>父组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    父组件<br>    &lt;div&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;div&gt;<br>    &lt;Header v-model&#x3D;&quot;name&quot;&gt;&lt;&#x2F;Header&gt;<br><br>    &lt;Footer&gt;<br>      &lt;template v-slot&#x3D;&quot;slotProps&quot;&gt;<br>        &#123;&#123; slotProps.slotData.subTitle &#125;&#125;<br>      &lt;&#x2F;template&gt;<br>    &lt;&#x2F;Footer&gt;<br><br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>import Header from &#39;.&#x2F;Header&#39;<br>import Footer from &#39;.&#x2F;Footer&#39;<br><br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>      name: &#39;双越&#39;,<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    Header,<br>    Footer<br><br>  &#125;,<br>  methods: &#123;<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style scoped&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    Footer<br>      &lt;slot :slotData&#x3D;&quot;website&quot;&gt;<br>        &#123;&#123; website.subTitle &#125;&#125;<br>      &lt;&#x2F;slot&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>      website: &#123;<br>        url: &#39;http:&#x2F;&#x2F;wangEditor.com&#x2F;&#39;,<br>        title: &#39;wangEditor&#39;,<br>        subTitle: &#39;轻量级&#39;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  mounted () &#123;&#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure><img src="/image/vueDetailed/30.png">    </p><hr><div style="text-align: center; color: red">    <strong>Vue中的slot(具名插槽)</strong></div><p><img src="/image/vueDetailed/31.png">    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    父组件<br>    &lt;div&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;div&gt;<br>    &lt;Header v-model&#x3D;&quot;name&quot;&gt;&lt;&#x2F;Header&gt;<br><br>    &lt;Footer&gt;<br><br>      &lt;template v-slot:head&gt;<br>        &lt;h1&gt;头部的内容&lt;&#x2F;h1&gt;<br>      &lt;&#x2F;template&gt;<br><br>      &lt;p&gt;未命名的插槽&lt;&#x2F;p&gt;<br><br>      &lt;template v-slot:foot&gt;<br>        &lt;h1&gt;尾部的插槽&lt;&#x2F;h1&gt;<br>      &lt;&#x2F;template&gt;<br>      <br>    &lt;&#x2F;Footer&gt;<br> <br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>import Header from &#39;.&#x2F;Header&#39;<br>import Footer from &#39;.&#x2F;Footer&#39;<br><br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>      name: &#39;双越&#39;<br><br>   <br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    Header,<br>    Footer<br> <br>  &#125;,<br>  methods: &#123;<br>   <br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style scoped&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    Footer<br>    &lt;slot name&#x3D;&quot;foot&quot;&gt; &lt;&#x2F;slot&gt;<br>    &lt;slot name&#x3D;&quot;head&quot;&gt; &lt;&#x2F;slot&gt;<br>    &lt;slot&gt; &lt;&#x2F;slot&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;&#125;;<br>  &#125;,<br>  mounted() &#123;&#125;<br>&#125;;<br>&lt;&#x2F;script&gt;<br><br>&lt;style&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中的slot&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中的slot
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中的slot" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E7%9A%84slot/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的父子组件的v-model实现</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19r5009wnkv4cr2u4asr/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19r5009wnkv4cr2u4asr/</id>
    <published>2021-01-14T03:49:19.000Z</published>
    <updated>2021-01-14T12:18:29.652Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中的父子组件的v-model实现</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中的父子组件的v-model实现</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中的父子组件的v-model实现</strong></div><ol><li><p>父组件代码如图所示</p><img src="/image/vueDetailed/22.png"></li><li><p>子组件的定义代码</p><img src="/image/vueDetailed/23.png"></li><li><p>效果图</p></li></ol><img src="/image/vueDetailed/09.gif"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中的父子组件的v-model实现&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中的父子组件的v-model实现
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中的父子组件的v-model实现" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E7%9A%84%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84v-model%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的生命周期</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19q00077nkv42zwb1wb3/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19q00077nkv42zwb1wb3/</id>
    <published>2021-01-13T14:06:52.000Z</published>
    <updated>2021-01-14T03:35:51.004Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中的生命周期</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中的生命周期</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中的生命周期</strong></div><p>首先我们看这个图解<br><img src="/image/vueDetailed/20.png"></p><p>所有的生命周期钩子自动绑定 this 上下文到实例中，因此你可以访问数据，对 property 和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 created: () =&gt; this.fetchTodos())。这是因为箭头函数绑定了父上下文，因此 this 与你期待的 Vue 实例不同，this.fetchTodos 的行为未定义。</p><p>分为三个阶段</p><p><strong style="color: red">挂载阶段</strong></p><p style="text-indent:2em">beforeCreate:整个页面创建之前调用的生命周期类型：Function<p>详细：<br>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p></p><p style="text-indent:2em">created类型：Function<p>详细<br>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，property 和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el property 目前尚不可用。</p></p><p style="text-indent:2em">beforeMount类型：Function<p>详细：<br>在挂载开始之前被调用：相关的 render 函数首次被调用。<br>该钩子在服务器端渲染期间不被调用。</p></p><p style="text-indent:2em">mounted类型：Function<p>详细：<br>实例被挂载后调用，这时 el 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。<br>注意 mounted 不会保证所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，<code>可以在 mounted 内部使用 vm.$nextTick：</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">mounted: function () &#123;<br>  this.$nextTick(function () &#123;<br>    &#x2F;&#x2F; Code that will run only after the<br>    &#x2F;&#x2F; entire view has been rendered<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>该钩子在服务器端渲染期间不被调用。</p><strong style="color: blue">create和mounted的区别：create 页面还没渲染 但是vue实例初始化完成了。mounted 页面已经渲染完成了。</strong></p><hr><p><strong style="color: red">更新阶段</strong></p><p style="text-indent:2em">beforeUpdate类型：Function<p>详细：<br>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。<br>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</p></p><p style="text-indent:2em">updated类型：Function<p>详细：<br>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<br>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。<br>注意 updated 不会保证所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以在 updated 里使用 vm.$nextTick：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">updated: function () &#123;<br>  this.$nextTick(function () &#123;<br>    &#x2F;&#x2F; Code that will run only after the<br>    &#x2F;&#x2F; entire view has been re-rendered<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>该钩子在服务器端渲染期间不被调用。</p></p><hr><p><strong style="color: red">销毁阶段</strong></p><p style="text-indent:2em">beforeDestroy类型：Function<p>详细：<br>实例销毁之前调用。在这一步，实例仍然完全可用。<br>该钩子在服务器端渲染期间不被调用。</p></p><p style="text-indent:2em">destroyed类型：Function<p>详细：<br>实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。<br>该钩子在服务器端渲染期间不被调用。</p></p><hr><div style="text-align: center; color: red">    <strong>Vue中组件的生命周期</strong></div><ol><li>父子组件挂载阶段的渲染先后顺序</li></ol><p>加载渲染过程<br>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p><p>加一点个人理解: 子组件被包裹在父组件的里面的。<br>所有：先父组件进行创建：beforeCreate create beforeMount<br>对于父组件的mounted是要特别注意的，假如父组件比子组件要先mounted的话，那么表示页面已经被渲染了，就不会去管子组件的mounted了，所有子组件的mounted一定会比父组件的要早。</p><ol start="2"><li>父子组件更新阶段的渲染先后顺序</li></ol><p>更新过程<br>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</p><p>个人理解：子组件被包裹在父组件的里面的。<br>更新数据的话也是由里到内，但是如果父组件要是比子组件更新完成要早的，那么子组件的数据是没有更新的时间的额，因为父组件更新完就会页面渲染的。</p><ol start="3"><li>父子组件销毁的过程</li></ol><p>父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</p><p>个人理解同上所得。</p><p>以上的父子组件的更新顺序其实很好理解的。<br>这个图解很详细的解释了我要表达的东西，真的是一个天才。</p><img src="/image/vueDetailed/21.png"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中的生命周期&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中的生命周期
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中的生命周期" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的兄弟组件之间的传值</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19pt006tnkv45ga50mlp/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19pt006tnkv45ga50mlp/</id>
    <published>2021-01-13T02:24:56.000Z</published>
    <updated>2021-01-13T02:46:33.912Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中的兄弟组件之间的传值</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中的兄弟组件之间的传值</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中的兄弟组件之间的传值</strong></div><p>兄弟组件之间的传值</p><p>通过一个中转(bus)</p><p>A兄弟传值<br>import bus from ‘@/common/bus’<br>bus.$emit(“go”,this.msg)</p><p>B兄弟接收<br>import bus from ‘@/common/bus’<br>bus.$on(“go”,(data)=&gt;{<br>    this.msg = data<br>})</p><p>A组件代码<br><img src="/image/vueDetailed/10.png"></p><p>B组件代码<br><img src="/image/vueDetailed/11.png"></p><p>效果图<br><img src="/image/vueDetailed/04.gif"></p></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中的兄弟组件之间的传值&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中的兄弟组件之间的传值
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中的兄弟组件之间的传值" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E7%9A%84%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%A0%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的子组件传值到父组件</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19px006znkv40v5yhkz5/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19px006znkv40v5yhkz5/</id>
    <published>2021-01-12T13:06:30.000Z</published>
    <updated>2021-01-12T13:28:41.135Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中的子组件传值到父组件</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中的子组件传值到父组件</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中的子组件传值到父组件</strong></div><p>子组件:<br>this.$emit(“自定义事件”,要传递的数据)</p><p>父组件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;Header @datalist&#x3D;&quot;getData&quot;&gt;&lt;&#x2F;Header&gt;<br>  <br>  methods: &#123;<br>    getData (msg) &#123;<br>      this.datalist &#x3D; msg<br>    &#125;<br>  &#125;<br>&#96;<br></code></pre></td></tr></table></figure><p>子组件代码<br><img src="/image/vueDetailed/08.png"></p><p>父组件代码<br><img src="/image/vueDetailed/09.png"></p><p>效果图<br><img src="/image/vueDetailed/03.gif"></p></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中的子组件传值到父组件&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中的子组件传值到父组件
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中的子组件传值到父组件" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E7%9A%84%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E5%88%B0%E7%88%B6%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的父组件传值到子组件</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19px0071nkv46nqn5tyt/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19px0071nkv46nqn5tyt/</id>
    <published>2021-01-12T08:37:32.000Z</published>
    <updated>2021-01-15T07:49:17.578Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中的父组件传值到子组件</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中的父组件传值到子组件</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中的父组件传值到子组件</strong></div><p>父组件:<br><code>&lt;Header :msg=&#39;msg&#39;&gt;&lt;/Header&gt;</code></p><p>子组件:<br>   props:[‘msg’]<br>   props:{<br>   msg:数据类型<br>}</p><p>父组件代码<br><img src="/image/vueDetailed/05.png"></p><p>子组件代码<br><img src="/image/vueDetailed/06.png"></p><p>效果图<br><img src="/image/vueDetailed/07.png"></p><p>代码分析：</p><p>父组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;父组件 &#123;&#123;msg&#125;&#125;<br>    &lt;Header :msg &#x3D; &#39;msg&#39;&gt;&lt;&#x2F;Header&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>import Header from &#39;.&#x2F;Header&#39;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>      msg: &#39;这是数据&#39;<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    Header<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;子组件<br>    &#123;&#123;msg&#125;&#125;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  &#x2F;&#x2F; props: [&#39;msg&#39;]<br>  props: &#123;<br>    msg: String<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br>&lt;style&gt;<br>&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure><ol><li><p>首先在父组件引入子组件进来</p></li><li><p>在父组件中定义一个属于父组件的数据</p></li><li><p>把父组件的数据传到父组件中的子组件的上面 <code>&lt;Header :msg = &#39;msg&#39;&gt;&lt;/Header&gt;</code></p></li><li><p>在子组件的自身里面用props属性接收父组件传过来的值<code>props: [&#39;msg&#39;]</code>或者<br><code>props: {msg: String}</code></p></li><li><p>在子组件里面使用这个从父组件里面传过来的msg数据<code>&lt;div&gt;子组件msg&lt;/div&gt;</code></p></li></ol></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中的父组件传值到子组件&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中的父组件传值到子组件
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中的父组件传值到子组件" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E7%9A%84%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E5%88%B0%E5%AD%90%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vue中项目打包之前的处理</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19q2007dnkv49ifl7iy8/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19q2007dnkv49ifl7iy8/</id>
    <published>2021-01-12T08:27:21.000Z</published>
    <updated>2021-01-12T08:36:04.148Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中项目打包之前的处理</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中项目打包之前的处理</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中项目打包之前的处理</strong></div><p>在打包之前:</p><ol><li>修改代理的url</li><li>build<br>assetsPublicPatg: ‘./‘</li></ol><p>打包之后会生成：<br>一个js文件，一个css文件，还有一个index.html</p><p>学习于 <a href="https://www.cnblogs.com/SpringAndMoon/p/13807139.html" target="_blank" rel="noopener">https://www.cnblogs.com/SpringAndMoon/p/13807139.html</a>    </p></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中项目打包之前的处理&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中项目打包之前的处理
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中项目打包之前的处理" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%B9%8B%E5%89%8D%E7%9A%84%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的watch和computed的差异</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19po006knkv4hxy45r1i/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19po006knkv4hxy45r1i/</id>
    <published>2021-01-12T02:19:03.000Z</published>
    <updated>2021-01-13T08:13:08.644Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中的watch和computed的差异</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中的watch和computed的差异</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中的watch和computed的差异</strong></div><p><strong>computed ： 计算属性</strong></p><p style="text-indent: 2em">    　　计算属性基于 data 中声明过或者父组件传递的 props 中的数据通过计算得到的一个新值，这个新值只会根据已知值的变化而变化，简言之：这个属性依赖其他属性，由其他属性计算而来的。</p><img src="/image/VueComputedWatch/01.png"><p>在 computed 属性对象中定义计算属性的方法，和取data对象里的数据属性一样以属性访问的形式调用，即在页面中使用  来显示计算的结果。</p><p><code>注：计算属性 fullName 不能在 data 中定义，而计算属性值的相关已知值在data中；</code><br><code>如果 fullName 在 data 中定义了会报错如下图：</code><br>如果 <code>computed 属性值是一个函数</code>，那么<code>默认会走get方法</code>，<code>必须要有一个返回值</code>，函数的返回值就是属性的属性值。计算属性定义了 fullName 并返回对应的结果给这个变量，变量不可被重复定义和赋值。</p><p>在官方文档中，还强调了 computed 一个重要的特点，就是 computed 带有缓存功能。<br>打印结果如图所示:<br><img src="/image/VueComputedWatch/02.png"></p><p style="text-indent: 2em">    我们知道 computed 内定义的 function 只执行一次，仅当初始化显示或者相关的 data、props 等属性数据发生变化的时候调用；而 computed 属性值默认会缓存计算结果，计算属性是基于它们的响应式依赖进行缓存的；只有当 computed 属性被使用后，才会执行 computed 的代码，在重复的调用中，只要依赖数据不变，直接取缓存中的计算结果。只有依赖型数据发生改变，computed 才会重新计算。</p><p style="text-indent: 2em">    计算属性的高级：　　在computed 中的属性都有一个 get 和一个 set 方法，当数据变化时，调用 set 方法。下面我们通过计算属性的 getter/setter 方法来实现对属性数据的显示和监视，即双向绑定<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain">computed: &#123;<br>    fullName: &#123;<br>        get() &#123; &#x2F;&#x2F;读取当前属性值的回调，根据相关的数据计算并返回当前属性的值<br>            return this.firstName + &#39; &#39; + this.lastName<br>        &#125;,<br>        set(val) &#123; &#x2F;&#x2F; 当属性值发生改变时回调，更新相关的属性数据，val就是fullName的最新属性值<br>            const names &#x3D; val ? val.split(&#39; &#39;) : [];<br>            this.firstName &#x3D; names[0]<br>            this.lastName &#x3D; names[1]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/image/VueComputedWatch/01.gif"><p>从代码分析这个也就不难理解了为什么会出错。</p></p><hr><p><strong>watch 监听属性:</strong></p><p style="text-indent: 2em">　　通过 vm 对象的 $watch() 或 watch 配置来监听 Vue 实例上的属性变化，或某些特定数据的变化，然后执行某些具体的业务逻辑操作。当属性变化时，回调函数自动调用，在函数内部进行计算。其可以监听的数据来源：data，props，computed 内的数据。</p><p><p>注：监听函数有两个参数，<code>第一个参数是最新的值</code>，<code>第二个参数是输入之前的值</code>，<code>顺序一定是新值，旧值</code>，<code>如果只写一个参数，那就是最新属性值</code>。<br>在使用时选择 watch 还是 computed，还有一个参考点就是官网说的：<code>当需要在数据变化时执行异步或开销较大的操作时，watch方式是最有用的。所以 watch 一定是支持异步的。</code></p></p><p><p><strong>watch:handler方法和immediate属性</strong><br>这里 watch 的一个特点是，最初绑定的时候是不会执行的，要等到 firstName 改变时才执行监听计算。那我们想要一开始就让他最初绑定的时候就执行改怎么办呢？我们需要修改一下我们的 watch 写法，修改过后的 watch 代码如下：</p><p>immediate : true<br><img src="/image/vueDetailed/12.png"></p><p>我们一进去的时候，页面数据没有改变，却是执行了watch里面的handler函数<br><img src="/image/vueDetailed/13.png"></p><p>immediate : false<br><img src="/image/vueDetailed/14.png"></p><p>我们一进去的时候，页面数据没有改变，也没有执行了watch里面的handler函数<br><img src="/image/vueDetailed/15.png"></p><p>注意到handler了吗，我们给 firstName 绑定了一个handler方法，之前我们写的 watch 方法其实默认写的就是这个handler，Vue.js会去处理这个逻辑，最终编译出来其实就是这个handler。</p><p>而immediate:true代表如果在 wacth 里声明了 firstName 之后，就会立即先去执行里面的handler方法，如果为 false就跟我们以前的效果一样，不会在绑定的时候就执行。</p><p><strong>deep属性</strong><br>watch 里面还有一个属性 deep，默认值是 false，代表是否深度监听，比如我们 data 里有一个obj属性：</p><p>如下代码当我们在在输入框中输入数据视图改变obj.a的值时，我们发现是无效的<br><img src="/image/vueDetailed/16.png"></p><p>从下面的效果图,看起来并没有触发handler函数的执行，这是因为没有执行深度监听。<br><img src="/image/vueDetailed/05.gif"></p><p>深度监听：</p><p>如下代码<br><img src="/image/vueDetailed/17.png"></p><p>从下面的效果图,我们加入deep,执行深度监听，触发了handler函数，进行打印。<br><img src="/image/vueDetailed/06.gif"></p><p>deep深入监听的开销过大：</p><p>deep的意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样性能开销就会非常大了，任何修改obj里面任何一个属性都会触发这个监听器里的 handler。</p><p>代码如图所示:<br><img src="/image/vueDetailed/18.png"></p><p>从下面的效果图,我们发现obj.a obj.b都被加上监听器了，这样造成开销太大。<br><img src="/image/vueDetailed/07.gif"></p><p>优化，我们可以是使用字符串形式监听。<br>代码如图所示:<br><img src="/image/vueDetailed/19.png"></p><p>从下面的效果图,我们发现只有obj.b都被加上监听器了，这样进行了极大的优化。<br><img src="/image/vueDetailed/08.gif"></p><p>总结：</p><p>　　watch和computed都是以Vue的依赖追踪机制为基础的，当某一个依赖型数据（依赖型数据：简单理解即放在 data 等对象下的实例数据）发生变化的时候，所有依赖这个数据的相关数据会自动发生变化，即自动调用相关的函数，来实现数据的变动。<br>　　当依赖的值变化时，在watch中，是可以做一些复杂的操作的，而computed中的依赖，仅仅是一个值依赖于另一个值，是值上的依赖。 </p><p>应用场景：<br>computed：用于处理复杂的逻辑运算；一个数据受一个或多个数据影响；用来处理watch和methods无法处理的，或处理起来不方便的情况。例如处理模板中的复杂表达式、购物车里面的商品数量和总金额之间的变化关系等。</p><p>　watch：用来处理当一个属性发生变化时，需要执行某些具体的业务逻辑操作，或要在数据变化时执行异步或开销较大的操作；一个数据改变影响多个数据。例如用来监控路由、inpurt 输入框值的特殊处理等。</p><p>区别：　　</p><ul><li>computed<br>初始化显示或者相关的 data、props 等属性数据发生变化的时候调用；<br>计算属性不在 data 中，它是基于data 或 props 中的数据通过计算得到的一个新值，这个新值根据已知值的变化而变化；</li></ul><p>在 computed 属性对象中定义计算属性的方法，和取data对象里的数据属性一样，以属性访问的形式调用；</p><p>如果 computed 属性值是函数，那么默认会走 get 方法，必须要有一个返回值，函数的返回值就是属性的属性值；</p><p>computed 属性值默认会缓存计算结果，在重复的调用中，只要依赖数据不变，直接取缓存中的计算结果，只有依赖型数据发生改变，computed 才会重新计算；</p><p>在computed中的，属性都有一个 get 和一个 set 方法，当数据变化时，调用 set 方法。</p><ul><li>watch<br>主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作，可以看作是 computed 和 methods 的结合体；</li></ul><p>可以监听的数据来源：data，props，computed内的数据；</p><p>watch支持异步；<br>不支持缓存，监听的数据改变，直接会触发相应的操作；<br>监听函数有两个参数，第一个参数是最新的值，第二个参数是输入之前的值，顺序一定是新值，旧值。</p></p><div style="color: red;font-weight: 700">其他博客细解: </div><a href="https://www.cnblogs.com/dhui/p/12957862.html" target="_blank" rel="noopener">https://www.cnblogs.com/dhui/p/12957862.html</a><div style="color: red;font-weight: 700">关于watch的深度监听更加的细解: </div><a href="https://www.cnblogs.com/yesu/p/9546458.html" target="_blank" rel="noopener">https://www.cnblogs.com/yesu/p/9546458.html</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中的watch和computed的差异&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中的watch和computed的差异
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中的watch和computed的差异" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E7%9A%84watch%E5%92%8Ccomputed%E7%9A%84%E5%B7%AE%E5%BC%82/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的key的作用</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19pl006bnkv44b0ndnki/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19pl006bnkv44b0ndnki/</id>
    <published>2021-01-11T12:59:04.000Z</published>
    <updated>2021-01-11T13:22:27.678Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中的key的作用</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中的key的作用</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中的key的作用</strong></div><p>一、 VUE中key 的作用</p><p>总结：key的作用主要是为了高效的更新虚拟dom</p><p>没有加key ,diff默认算法的问题(虚拟dom)</p><ol><li><p>如果节点类型不同，直接干掉前面所有的节点，再创建并插入新的节点，<br>不会再比较这个节点以后的子节点。</p></li><li><p>如果节点类型相同，则会重新设置节点的属性，从而实现节点的更新</p></li></ol><p>没有key值时，插入新的节点<br><img src="/image/VueKey/01.png"></p><p>有key值时，插入新的节点<br><img src="/image/VueKey/02.png"></p><p>所以一句话，<code>key的作用主要是为了高效的更新虚拟DOM</code>。另外vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了让vue可以区分它们，</p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中的key的作用&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中的key的作用
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中的key的作用" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E7%9A%84key%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的keep-alive</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19pi0062nkv411bs08gi/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19pi0062nkv411bs08gi/</id>
    <published>2021-01-11T12:49:01.000Z</published>
    <updated>2021-01-15T11:10:28.461Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中的keep-alive</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中的keep-alive</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中的keep-alive</strong></div><p>一、 对 keep-alive的了解</p><ol><li>keep-alive 是什么？</li></ol><p>内置组件，能在组件切换过程中将转态保留在内存中，防止重复渲染dom.</p><ol start="2"><li>说明</li></ol><p>keep-alive 它不会在dom树中渲染</p><ol start="3"><li>使用场景，几乎和渲染有关系</li></ol><ol start="4"><li>多了两个生命周期</li></ol><p>activated</p><p>deactivated</p><ul><li>缓存组件</li><li>频繁切换，不需要重复渲染</li><li>Vue常见性能优化</li></ul><p>ps:希望在项目中遇到的时候，我会再次总结上来</p><p>没有keep-alive的时候，进行切换三个组件<br>都是常规的挂载和销毁<br><img src="/image/vueDetailed/10.gif"></p><p>加入keep-alive包裹的时候，进行切换三个组件<br>只有挂载，没有销毁。数据进行缓存了。<br><img src="/image/vueDetailed/11.gif"></p><p>以下是父组件的代码，和三个子组件的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div&gt;<br>    父组件<br>    &lt;button @click&#x3D;&quot;changeState(&#39;A&#39;)&quot;&gt;A&lt;&#x2F;button&gt;<br>    &lt;button @click&#x3D;&quot;changeState(&#39;B&#39;)&quot;&gt;B&lt;&#x2F;button&gt;<br>    &lt;button @click&#x3D;&quot;changeState(&#39;C&#39;)&quot;&gt;C&lt;&#x2F;button&gt;<br><br>    &lt;keep-alive&gt;<br>      &lt;!-- tab 切换 --&gt;<br>      &lt;KeepAliveStageA v-if&#x3D;&quot;state &#x3D;&#x3D;&#x3D; &#39;A&#39;&quot; &#x2F;&gt;<br>      &lt;!-- v-show --&gt;<br>      &lt;KeepAliveStageB v-if&#x3D;&quot;state &#x3D;&#x3D;&#x3D; &#39;B&#39;&quot; &#x2F;&gt;<br>      &lt;KeepAliveStageC v-if&#x3D;&quot;state &#x3D;&#x3D;&#x3D; &#39;C&#39;&quot; &#x2F;&gt;<br>    &lt;&#x2F;keep-alive&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>import KeepAliveStageA from &quot;.&#x2F;KeepAliveStateA&quot;;<br>import KeepAliveStageB from &quot;.&#x2F;KeepAliveStateB&quot;;<br>import KeepAliveStageC from &quot;.&#x2F;KeepAliveStateC&quot;;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      state: &quot;A&quot;<br>    &#125;;<br>  &#125;,<br>  components: &#123;<br>    KeepAliveStageA,<br>    KeepAliveStageB,<br>    KeepAliveStageC<br>  &#125;,<br>  methods: &#123;<br>    changeState(state) &#123;<br>      this.state &#x3D; state;<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;&#x2F;script&gt;<br>&lt;style scoped&gt;&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>    &lt;p&gt;state A&lt;&#x2F;p&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    mounted() &#123;<br>        &#x2F;&#x2F; eslint-disable-next-line<br>        console.log(&#39;A mounted&#39;)<br>    &#125;,<br>    destroyed() &#123;<br>        &#x2F;&#x2F; eslint-disable-next-line<br>        console.log(&#39;A destroyed&#39;)<br>    &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>    &lt;p&gt;state B&lt;&#x2F;p&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    mounted() &#123;<br>        &#x2F;&#x2F; eslint-disable-next-line<br>        console.log(&#39;B mounted&#39;)<br>    &#125;,<br>    destroyed() &#123;<br>        &#x2F;&#x2F; eslint-disable-next-line<br>        console.log(&#39;B destroyed&#39;)<br>    &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>    &lt;p&gt;state C&lt;&#x2F;p&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    mounted() &#123;<br>        &#x2F;&#x2F; eslint-disable-next-line<br>        console.log(&#39;C mounted&#39;)<br>    &#125;,<br>    destroyed() &#123;<br>        &#x2F;&#x2F; eslint-disable-next-line<br>        console.log(&#39;C destroyed&#39;)<br>    &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>相关博客细解<a href="https://www.jianshu.com/p/17827acbd64b" target="_blank" rel="noopener">https://www.jianshu.com/p/17827acbd64b</a></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中的keep-alive&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中的keep-alive
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中的keep-alive" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E7%9A%84keep-alive/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件data为什么是函数</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19q1007ankv4hx0m7tic/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19q1007ankv4hx0m7tic/</id>
    <published>2021-01-11T12:26:24.000Z</published>
    <updated>2021-01-11T12:33:48.259Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue组件data为什么是函数</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue组件data为什么是函数</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue组件data为什么是函数</strong></div><p style="text-indent: 2em">    因为JS本身的特性带来的，如果data是一个对象，那么由于对象本身属于引用类型，当我们修改其中的一个属性时，会影响到所有的Vue实例的数据。如果将data作为一个函数返回一个对象，那么每一个实例的data属性都是独立的，不会相互影响了。</p><p>ps:<br>Home.vue<br> data:{<br> msg:1<br>}</p><p>Header.vue<br> data:{<br> msg:2<br>}</p><p>@click=’btn’</p><p>btn(){<br>    this.msg =’2333’<br>}</p><p>这两个组件里面的msg都会变为字符 2333</p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue组件data为什么是函数&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue组件data为什么是函数
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue组件data为什么是函数" scheme="https://wujun1234567.github.io/tags/Vue%E7%BB%84%E4%BB%B6data%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的v-loader的作用</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19pk0066nkv45ctqhthb/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19pk0066nkv45ctqhthb/</id>
    <published>2021-01-11T08:15:50.000Z</published>
    <updated>2021-01-11T11:30:42.790Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中的v-loader的作用</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中的v-loader的作用</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中的v-loader的作用</strong></div><p>一、项目打包 npm run build   --> index .html 在我们开发的时候操作的都是  xxx.vue文件 loder : 加载器</p><p>二、Vue Loader 是一个 webpack 的 loader，它允许你以一种名为单文件组件 (SFCs)的格式撰写 Vue 组件<p>作用：解析和转换 .vue 文件，提取出其中的逻辑代码 script、样式代码 style、以及 HTML 模版 template，再分别把它们交给对应的 Loader 去处理。</p><p>.vue 文件是一个自定义的文件类型，用类 HTML 语法描述一个 Vue 组件。每个 .vue 文件包含三种类型的顶级语言块 <code>&lt;template&gt;、&lt;script&gt; 和 &lt;style&gt;</code>，允许添加可选的自定义块<br><code>vue-loader</code> <code>会解析.vue文件</code>，提取每个语言块，如有必要会通过其它 loader 处理，最后将他们组装成一个 CommonJS 模块，<code>module.exports</code> <code>出一个</code> <code>Vue.js</code> 组件对象。<br><code>vue-loader</code> 支持使用非默认语言，比如 CSS 预处理器，预编译的 HTML 模版语言，通过设置语言块的 lang 属性。例如，你可以像下面这样使用 Sass 语法编写样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;style lang&#x3D;&quot;sass&quot;&gt;<br>  &#x2F;* write Sass! *&#x2F;<br>&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure></p><p>* vue-loader：解析和转换 .vue 文件，提取出其中的逻辑代码 script、样式代码 style、以及 HTML 模版 template，再分别把它们交给对应的 Loader 去处理。<p>总结: vue-loader的作用就是提取。<br>学习于 <a href="https://vue-loader-v14.vuejs.org/zh-cn/start/spec.html" target="_blank" rel="noopener">https://vue-loader-v14.vuejs.org/zh-cn/start/spec.html</a>    </p></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中的v-loader的作用&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中的v-loader的作用
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中的v-loader的作用" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E7%9A%84v-loader%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的v-model和标签绑定事件</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19pp006nnkv47hk8bgmo/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19pp006nnkv47hk8bgmo/</id>
    <published>2021-01-11T07:53:15.000Z</published>
    <updated>2021-01-21T13:23:12.167Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中的v-model和标签绑定事件</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中的v-model和标签绑定事件</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中的v-model和标签绑定事件</strong></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中的v-model和标签绑定事件&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中的v-model和标签绑定事件
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中的v-model和标签绑定事件" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E7%9A%84v-model%E5%92%8C%E6%A0%87%E7%AD%BE%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>npm安装时 --save --dev 和 --save 区别</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19qd0086nkv44jwk0mvn/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19qd0086nkv44jwk0mvn/</id>
    <published>2021-01-11T07:31:57.000Z</published>
    <updated>2021-01-11T07:39:09.104Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">npm安装时 --save --dev 和 --save 区别</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">npm安装时 --save --dev 和 --save 区别</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>npm安装时 --save --dev 和 --save 区别</strong></div><p>一、–save -dev</p><p>–save：将保存配置信息到pacjage.json。默认为dependencies节点中。</p><p>–dev：将保存配置信息devDependencies节点中。</p><p>因此：</p><p>–save：将保存配置信息到pacjage.json的dependencies节点中。</p><p>–save-dev：将保存配置信息到pacjage.json的devDependencies节点中。</p><p><strong>dependencies：</strong><code>运行时的依赖，发布后，即生产环境下还需要用的模块</code></p><p><strong>devDependencies：</strong><code>开发时的依赖。里面的模块是开发时用的，发布时用不到它。</code></p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;npm安装时 --save --dev 和 --save 区别&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
npm安装时 --save --dev 和 --save 区别
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="node的细解" scheme="https://wujun1234567.github.io/categories/node%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="npm安装时 --save --dev 和 --save 区别" scheme="https://wujun1234567.github.io/tags/npm%E5%AE%89%E8%A3%85%E6%97%B6-save-dev-%E5%92%8C-save-%E5%8C%BA%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的css的scoped细解</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19pg005znkv46gw38wfe/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19pg005znkv46gw38wfe/</id>
    <published>2021-01-11T07:22:47.000Z</published>
    <updated>2021-01-11T08:13:51.440Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中的css的scoped细解</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Vue中的css的scoped细解</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 16px"><div style="text-align: center; color: red">    <strong>Vue中的css的scoped细解</strong></div><ol><li>让css只在当前组件生效</li></ol><p><code>&lt;style scoped&gt;</code></p><ol start="2"><li>scss </li></ol><p>scss: </p><ul><li><p>下载<br>npm install sass-loader node-sass  –save</p></li><li><p><code>&lt;style lang=&#39;scss&#39; scoped&gt;</code></p></li><li><p>scss样式穿透</p></li></ul><p>父元素/deep/子元素    </p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中的css的scoped细解&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Vue中的css的scoped细解
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中的css的scoped细解" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%AD%E7%9A%84css%E7%9A%84scoped%E7%BB%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>我喜欢的歌手是许嵩</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19qu0096nkv4gm5x643m/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19qu0096nkv4gm5x643m/</id>
    <published>2021-01-10T11:18:52.000Z</published>
    <updated>2021-01-10T11:42:16.978Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1662189728,3231128053&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">我喜欢的歌手是许嵩</h4><div style="padding: 0;margin: 0;font-size: 16px;line-height: 30px">我喜欢的歌手是许嵩</div></div><a id="more"></a><br><br><br><br><br><br><hr><div style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>关于许嵩的魅力</strong></div><p style="font-size: 15px">关于许嵩很多人认为他很低调，不怎么出现在大众的视线里面。很多人夸赞许嵩从来就没有进过娱乐圈。更多是拿许嵩和很多歌手对比，可以突出许嵩真的是一个专心制作的音乐的歌手。</p><p style="font-size: 15px">回过头来想想真的有几个人能像许嵩一样，在名利面前看的这么透彻。大家都是人，有欲望，许嵩真的是一个看透了人的内心所需要的东西。</p><p style="font-size: 15px">以前喜欢许嵩的歌真的就是单纯的觉得他的歌给我一个情景感，这是很多个歌手都达不到的水准。现在喜欢许嵩的歌，是因为我喜欢他在歌里面表达的东西。许嵩的歌真的是经得起推敲的。</p><p style="font-size: 15px">许嵩真的是一个好的歌手，他对音乐的态度都是值得我们去学习的。</p><p style="font-size: 15px">此偶像非彼偶像:说的就是这种偶像是你越来越了解他，就会更加的喜欢他</p></div><hr></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1662189728,3231128053&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;我喜欢的歌手是许嵩&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 16px;line-height: 30px&quot;&gt;
我喜欢的歌手是许嵩
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="我的偶像是许嵩(此偶像非彼偶像)" scheme="https://wujun1234567.github.io/categories/%E6%88%91%E7%9A%84%E5%81%B6%E5%83%8F%E6%98%AF%E8%AE%B8%E5%B5%A9-%E6%AD%A4%E5%81%B6%E5%83%8F%E9%9D%9E%E5%BD%BC%E5%81%B6%E5%83%8F/"/>
    
    
      <category term="我喜欢的歌手是许嵩" scheme="https://wujun1234567.github.io/tags/%E6%88%91%E5%96%9C%E6%AC%A2%E7%9A%84%E6%AD%8C%E6%89%8B%E6%98%AF%E8%AE%B8%E5%B5%A9/"/>
    
  </entry>
  
  <entry>
    <title>Vue中this.$nextTick()的用法</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19pf005vnkv43v1uaobk/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19pf005vnkv43v1uaobk/</id>
    <published>2021-01-09T14:05:15.000Z</published>
    <updated>2021-01-21T13:23:12.127Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Vue中this.$nextTick()的用法</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">之所以来写这个this.$nextTick()的用法，是因为在写一个better-scroll屏幕滚动的组件里面用到了这个。</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p><strong>Vue中this.$nextTick()的用法</strong></p><p>$nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM。</p><p>具体看事例分析:</p><p>代码如下<br><img src="/image/VueNextTick/01.png"></p><p>实际效果如下<br><img src="/image/VueNextTick/01.gif"></p><p>接下来分析一下这个执行过程。</p><p>第一次按下按钮时:</p><p>代码的执行顺序如下:</p><ol><li>this.msg1 = this.$refs.msgDiv.innerHTML</li><li>this.msg3 = this.$refs.msgDiv.innerHTML</li><li>this.msg = “Hello world.”</li><li>this.$nextTick(() =&gt; {this.msg2 = this.$refs.msgDiv.innerHTML})</li></ol><p>因为是异步执行的，前三个代码可以理解的。<br>第四个代码 this.$nextTick(() =&gt; {this.msg2 = this.$refs.msgDiv.innerHTML})<br>重点分析一下。</p><p>前三个dom渲染完后，执行 this.$nextTick(() =&gt; {this.msg2 = this.$refs.msgDiv.innerHTML})<br>this.msg2 = this.$refs.msgDiv.innerHTML 这里面的  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;div ref&#x3D;&quot;msgDiv&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure><p>msg是等于 Hello world. 所有打印的结果 Hello world.</p><p>第二次按下按钮 由于原来的 msg赋值为 Hello world.不是Hello Vue.了所有执行顺序不变，但是打印结果变了。</p><ol><li>this.msg1 = this.$refs.msgDiv.innerHTML  //打印的是Hello Vue.</li><li>this.msg3 = this.$refs.msgDiv.innerHTML  //打印的是Hello Vue.</li><li>this.msg = “Hello world.”</li><li>this.$nextTick(() =&gt; {this.msg2 = this.$refs.msgDiv.innerHTML})</li></ol><p>我将源代码进行一些调整之后会更好的理解。</p><p>代码如下<br><img src="/image/VueNextTick/02.png"></p><p>实际效果如下<br><img src="/image/VueNextTick/02.gif"></p><p>如果理解以上这两个代码了，就是真的理解this.$nextTick函数了。</p></p><hr><p>ps: 上一个关于nextTick解释的不好，自己重新梳理了。</p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p><strong>Vue中this.$nextTick()的用法</strong></p><ul><li>说明<br>$nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM。<br>$nextTick 在Dom渲染之后被触发，以获取最新的Dom节点<br>异步渲染 $nextTick  待DOM渲染完再回调<br>页面渲染时会将 data 的修改做整合，多次data修改只会渲染一次</li></ul><p>场景:<br>需要在视图更新之后，基于新的视图进行操作</p><p>实际代码如下:<br><img src="/image/VueNextTick/03.png"></p><p>实际效果如下:<br><img src="/image/VueNextTick/03.gif"></p><p>从这个效果图可以看出来<br>1.data数据更新了，但是dom还没有被更新出来</p><p>我们加入nextTick函数之后执行</p><p>实际代码如下:<br><img src="/image/VueNextTick/04.png"></p><p>实际效果如下:<br><img src="/image/VueNextTick/04.gif"></p><p>从这个效果图可以看出来<br>1.nextTick是等dom渲染结束之后再执行的结果</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Vue中this.$nextTick()的用法&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
之所以来写这个this.$nextTick()的用法，是因为在写一个better-scroll屏幕滚动的组件里面用到了这个。
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="Vue中this.$nextTick()的用法" scheme="https://wujun1234567.github.io/tags/Vue%E4%B8%ADthis-nextTick-%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>VUE路上踩坑</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19p4005ankv40stx31i4/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19p4005ankv40stx31i4/</id>
    <published>2021-01-09T04:21:18.000Z</published>
    <updated>2021-01-17T14:46:46.548Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">VUE路上踩坑</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">最近自己看了一个手机端的vue项目，在练习的过程还是踩了很多坑的。</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>vue加scoped后无法修改样式（无法修改element UI/mint-ui 样式）</strong></div><p>用vue写手机端的轮播图，我用的是mint-ui组件也就是饿了么开发的组件。想修改轮播图的样式，发现<br>修改根本没有用。</p><ol><li><code>把 style里面的scoped删除了，就解决问题了。(不推荐使用，有很大的弊端)</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;style lang&#x3D;&quot;scss&quot;&gt;<br>#mint-swipe &#123;<br>  height: 200px;<br>  .mint-swipe-indicator.is-active &#123;<br>    background: red;<br>  &#125;<br>&#125;<br>&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li><p><code>这不去掉scoped 的情况下</code><br><code>在全局样式中覆盖，这种解法，有弊端，可能会污染全局样式。为了不污染全局样式，也可单独加个类名</code><br><code>比如在引用全局样式前引用element ui的样式</code></p></li><li><p><code>样式放到App.vue里面 或者入口文件 index.vue ,样式就生效了</code> <code>为了不污染其他页面样式，可单独加个类名(推荐使用)</code></p></li></ol><p>方法很多不一一的介绍了。<br>详情可以看这个博客文章<a href="https://blog.csdn.net/qq_42221334/article/details/88533329" target="_blank" rel="noopener">vue加scoped后无法修改样式（无法修改element UI 样式）</a></p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>better-scroll无法滚动的问题</strong></div><ol><li>简单介绍一下better-scroll</li></ol><p>better-scroll 是一款重点解决移动端（已支持 PC）各种滚动场景需求的插件。它的核心是借鉴的 iscroll 的实现，它的 API 设计基本兼容 iscroll，在 iscroll 的基础上又扩展了一些 feature 以及做了一些性能优化。</p><p>better-scroll 是基于原生 JS 实现的，不依赖任何框架。它编译后的代码大小是 63kb，压缩后是 35kb，gzip 后仅有 9kb，是一款非常轻量的 JS lib。</p><p>总结一句话就是优化滚动效果的插件</p><p>一、DOM层级关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;div class&#x3D;&quot;wrapper&quot;&gt;<br>  &lt;div class&#x3D;&quot;content&quot;&gt;<br>    content...<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure><p>wrapper里面不能存在多个同级div，如果你这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;div class&#x3D;&quot;classifyTitle&quot;  ref&#x3D;&quot;wrapper&quot;&gt;<br>    &lt;div class&#x3D;&quot;&quot;&gt;<br>ss<br>    &lt;&#x2F;div&gt;<br>    &lt;ul&gt;<br>&lt;li v-for&#x3D;&quot;(item,index) in classifyData.products&quot;&gt;<br>    &lt;router-link :to&#x3D;&quot;&#123;name:&#39;详情&#39;&#125;&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;&#x2F;router-link&gt;<br>&lt;&#x2F;li&gt;<br>    &lt;&#x2F;ul&gt;<br>&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure><p>那么ul中的元素将不能滚动</p><p>二、content是否被成功添加滚动相关style<br>以此dom结构为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;div class&#x3D;&quot;classifyTitle&quot;  ref&#x3D;&quot;wrapper&quot;&gt;<br>&lt;ul&gt;<br>    &lt;li v-for&#x3D;&quot;(item,index) in classifyData.products&quot;&gt;<br>&lt;router-link :to&#x3D;&quot;&#123;name:&#39;详情&#39;&#125;&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;&#x2F;router-link&gt;<br>    &lt;&#x2F;li&gt;<br>&lt;&#x2F;ul&gt;<br>&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure><p>审查元素可以看到：</p><img src="/image/VueExclusionError/01.png"><p>这样即添加成功的</p><p>三、wrapper 与 content 高度问题<br>只有content的高度大于wrapper高度时候，才可以滚动。</p><p>如何看？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">this.$nextTick(() &#x3D;&gt; &#123;<br>    if (!this.scroll) &#123;<br>this.scroll &#x3D; new BScroll(this.$refs.wrapper, &#123;&#125;)<br>console.log(this.scroll)<br>    &#125;<br> &#125;)<br></code></pre></td></tr></table></figure><p>F12就可以看到打印结果：<br><img src="/image/VueExclusionError/02.png"></p><p>以上就是可以滚动的情况，wrapperHeight(616) &lt; scrollHeight(750)，hasVerticalScroll为true；</p><p><code>下面这句话是重点，容易出错的地方：</code><br><code>那如果这些数据不对，检查是否dom没有更新完就初始化BScroll了，要等dom更新完才能初始化</code></p><p>四、父容器固定高度，并设置overflow：hidden，子元素超出父元素高度后将被隐藏，超出部分可滚动且没有滚动条。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;template&gt;<br>  &lt;div class&#x3D;&quot;cinema&quot; :style&#x3D;&quot;mystyle&quot; ref&#x3D;&quot;wrapper&quot;&gt;<br>    &lt;ul&gt;<br>      &lt;li v-for&#x3D;&quot;(data, index) in datalist&quot; :key&#x3D;&quot;index&quot;&gt;<br>        &#123;&#123; data.name &#125;&#125;<br>        &lt;!-- &lt;p style&#x3D;&quot;font-size:12px&quot;&gt;&#123;&#123; data.address &#125;&#125;&lt;&#x2F;p&gt; --&gt;<br>      &lt;&#x2F;li&gt;<br>    &lt;&#x2F;ul&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;<br>li &#123;<br>  height: 50px;<br>&#125;<br><br>.cinema &#123;<br>  &#x2F;&#x2F; height: 500px;<br>  overflow: hidden;<br>  position: relative;<br>&#125;<br>&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>Vue：错误提示 Do not use 'new' for side effects no-new</strong></div><p>在Vue框架开发中，如果new创建对象后不赋值，则ESLint检测会提示下面错误。</p><p>error  Do not use ‘new’ for side effects  no-new</p><p>如下代码所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">new Howl(&#123;<br>  src: [&#39;sound.mp3&#39;]<br>&#125;);<br></code></pre></td></tr></table></figure><p>解决方案：</p><ol><li><p>赋值一个对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">var sound &#x3D; new Howl(&#123;<br>  src: [&#39;sound.mp3&#39;]<br>&#125;);<br>sound.play();<br></code></pre></td></tr></table></figure><p>对象sound如果赋值不使用会触发另一个规则检测，提示如下错误：<br>error ‘sound’ is assigned a value but never used<br>调用方法后无错误提示，顺利通过检测。</p></li><li><p>第二种解决方案是屏蔽检测</p></li></ol><p>在代码上添加 <code>/* eslint-disable no-new */</code><br>这句注释可以绕过规则检测，如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#x2F;* eslint-disable no-new *&#x2F;<br>new Howl(&#123;<br>  src: [&#39;sound.mp3&#39;]<br>&#125;);<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>在懒加载中过滤器遇到的坑(待写)</strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong></strong></div></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;VUE路上踩坑&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
最近自己看了一个手机端的vue项目，在练习的过程还是踩了很多坑的。
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="排坑之路" scheme="https://wujun1234567.github.io/categories/%E6%8E%92%E5%9D%91%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="VUE路上踩坑" scheme="https://wujun1234567.github.io/tags/VUE%E8%B7%AF%E4%B8%8A%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>ES6导入导出的两种方式</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19ik000hnkv40ypw0t05/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19ik000hnkv40ypw0t05/</id>
    <published>2021-01-08T06:15:12.000Z</published>
    <updated>2021-01-08T06:15:12.037Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>VUE脚手架项目语法规则解决方案</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19p5005dnkv481ho43l9/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19p5005dnkv481ho43l9/</id>
    <published>2021-01-04T07:45:30.000Z</published>
    <updated>2021-01-04T08:42:19.622Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">VUE脚手架项目语法规则解决方案</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">VUE脚手架项目语法规则解决方案</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>VUE脚手架项目语法规则解决方案</strong></div><ol><li>第一个错误，项目自动保存后，单引号会自动变双引号，还有在后面加分号和逗号。</li></ol><p>解方案: 在根目录下创建一个文件夹名称为 .prettierrc<br>在文件里面写下如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#123;<br>    &quot;semi&quot;: false,<br>    &quot;singleQuote&quot;: true<br>&#125;<br></code></pre></td></tr></table></figure><p>具体如图所示</p><img src="/image/vueSummary/14.png"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>VUE脚手架项目语法规则解决方案</strong></div><ol start="2"><li>第二个错误，就是 data和小括号()之间需要一个空格 </li></ol><p>解方案: 打开根目录下 .eslintrc.js 文件<br>在文件里面添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#39;space-before-function-paren&#39;: 0<br></code></pre></td></tr></table></figure><p>具体如图所示</p><img src="/image/vueSummary/15.png"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>VUE脚手架项目语法规则解决方案</strong></div><ol start="3"><li>可以直接输入 npm run lint 修复错误</li></ol></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;VUE脚手架项目语法规则解决方案&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
VUE脚手架项目语法规则解决方案
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE项目细解" scheme="https://wujun1234567.github.io/categories/VUE%E9%A1%B9%E7%9B%AE%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="VUE脚手架项目语法规则解决方案" scheme="https://wujun1234567.github.io/tags/VUE%E8%84%9A%E6%89%8B%E6%9E%B6%E9%A1%B9%E7%9B%AE%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>VUE里的v-for和v-if使用的区别</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19pe005tnkv4aqvyex6l/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19pe005tnkv4aqvyex6l/</id>
    <published>2021-01-01T07:57:42.000Z</published>
    <updated>2021-01-02T13:56:59.463Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">VUE里的v-for和v-if使用的区别</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">VUE里的v-for和v-if使用的区别</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>VUE里的v-for和v-if使用的区别</strong></div><ol><li><p>vue的源代码里看，v-for的优先级<mark>高于</mark>v-if的优先级</p></li><li><p>如果同时出现，每次渲染都会先执行循环再判断条件，无论如何循环都不可避免，浪费了性能。</p></li><li><p>要避免出现这种情况，则要在外层嵌套 template，在这一层进行 v-if判断，然后在内部进行 v-for循环。</p></li><li><p>使用computed过滤掉列表中不需要显示的项目</p></li></ol><ul><li>为了过滤一个列表中的项目（比如v-for = “user in users” v-if = “user.isActive”）。在这种情况下，请将users替换为一个计算属性（比如activeUsers），让其返回过滤后的列表。</li></ul><p>原来的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;ul&gt;<br>    &lt;li v-for&#x3D;&quot;user in users&quot; v-if&#x3D;&quot;user.isActive&quot; :key&#x3D;&quot;user.id&quot;&gt;<br>      &#123;&#123; user.name &#125;&#125;<br>    &lt;&#x2F;li&gt;<br>  &lt;&#x2F;ul&gt;<br></code></pre></td></tr></table></figure><p>修改之后的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;div&gt;<br>&lt;div v-for&#x3D;&quot;(user,index) in activeUsers&quot; :key&#x3D;&quot;user.index&quot; &gt;<br>&#123;&#123; user.name &#125;&#125; <br>&lt;&#x2F;div&gt;<br>&lt;&#x2F;div&gt;<br>data () &#123;  &#x2F;&#x2F; 业务逻辑里面定义的数据<br>    return &#123;<br>      users,: [&#123;<br>        name: &#39;111111&#39;,<br>        isShow: true<br>      &#125;, &#123;<br>        name: &#39;22222&#39;,<br>        isShow: false<br>      &#125;]<br>    &#125;<br>  &#125;<br>computed: &#123;<br>activeUsers: function () &#123;<br>return this.users.filter(function (user) &#123;<br>return user.isShow;&#x2F;&#x2F;返回isShow&#x3D;true的项，添加到activeUsers数组<br>&#125;)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：v-if比v-for优先级高，一起使用在性能上会造成极大的浪费，并且官网也并不推荐我们这样做，所以我们可以选择使用computed过滤掉列表中不需要显示的项目。</p><p>这个例子其实就是我之前写的过滤列表的函数一样的,<br>原来计算属性是这么有魅力，再次感叹vue太强大了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;mytext&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;<br>        &lt;ul&gt;<br>            &lt;li v-for&#x3D;&quot;data in getMyDataliat&quot;&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;li&gt;<br>        &lt;&#x2F;ul&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                mytext: &#39;&#39;,<br>                datalist: [&quot;aaaa&quot;, &quot;aabbb&quot;, &quot;cccc&quot;, &quot;dddd&quot;]<br>            &#125;,<br>            methods: &#123;&#125;,<br>            computed: &#123;<br>                getMyDataliat() &#123;<br>                    return this.datalist.filter(item &#x3D;&gt; &#123;<br>                        return item.indexOf(this.mytext) &gt; -1<br>                    &#125;)<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;VUE里的v-for和v-if使用的区别&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
VUE里的v-for和v-if使用的区别
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="VUE里的v-for和v-if使用的区别" scheme="https://wujun1234567.github.io/tags/VUE%E9%87%8C%E7%9A%84v-for%E5%92%8Cv-if%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>VUE里的v-if和v-show使用的区别</title>
    <link href="https://wujun1234567.github.io/2021/ckmbg19p8005inkv4hxmp22fg/"/>
    <id>https://wujun1234567.github.io/2021/ckmbg19p8005inkv4hxmp22fg/</id>
    <published>2021-01-01T02:35:49.000Z</published>
    <updated>2021-01-11T07:34:47.651Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">VUE里的v-if和v-show使用的区别</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">VUE里的v-if和v-show使用的区别</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>v-show使用</strong></div>代码展示<img src="/image/vueDetailed/03.png"><p>效果图展示</p><img src="/image/vueDetailed/01.gif"><p>可以明显得感觉到v-show显示和隐藏元素是通过 display:block/none。来实现的。</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>v-if使用</strong></div>代码展示<img src="/image/vueDetailed/04.png"><p>效果图展示</p><img src="/image/vueDetailed/02.gif"><p>可以明显得感觉到v-if显示和隐藏元素是通过删除dom的节点来实现的。</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>VUE里的v-for和v-show使用的区别</strong></div><p>v-if    创建  删除  （没有元素）<br>v-show  显示  隐藏  （有元素）</p><p>v-if 是真正的条件渲染，因为它会确保在切换过程中条件块的事件监听器和子组件适当的被销毁和重建</p><p>v-if 也是惰性的: 如果在初始渲染时条件为假，则什么也不做一直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，v-show 就简单的多了，不管条件是什么，元素总是会渲染，并且只是简单的基于CSS进行切换。</p><p>一般来说，v-if有更高的切换开销，而v-show有更高的初始渲染开销。因此，如果需要非常频繁的切换，则使用<br>v-show 较好；如果在运行时条件不太可能改变，则使用 v-if较好。</p><p>v-show的使用情景：<br>场景1：有多个页面同时运行， 但当前只显示一个页面，就用v-show, 显示当前页面就是true, false， 但是同时开启这么多的页面会损耗很多性能。<br>场景2：如果说，多个页面切换，得保持切换前的状态，用v-show 挺好的，但是也是会损耗性能，所以这里建议用keep-alive 缓存会好点。</p><p>需要经常的来回切换的按钮，用v-show，如果用v-for的话，经常删除和创建元素会过于消耗性能。</p><p>v-if的使用情景：<br>场景1：如何让这个组件重置呢，其实就是给这个组件v-if , 然后给false, 再给true 就可以了。<br>情景2：购物车有商品时，显示商品，无商品时显示数据为空的判断可以用v-if</p></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;VUE里的v-if和v-show使用的区别&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
VUE里的v-if和v-show使用的区别
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="VUE里的v-if和v-show使用的区别" scheme="https://wujun1234567.github.io/tags/VUE%E9%87%8C%E7%9A%84v-if%E5%92%8Cv-show%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>VUE里的computed属性和方法属性的区别</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19p9005jnkv48440bljk/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19p9005jnkv48440bljk/</id>
    <published>2020-12-31T13:43:01.000Z</published>
    <updated>2020-12-31T14:02:03.551Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">VUE里的computed属性和方法属性的区别</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">VUE里的computed属性和方法属性的区别</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>VUE里的computed属性和方法属性的区别</strong></div><ol><li>第一个区别就是调用的方式不一样</li></ol><p>方法属性: 调用  <code>getSumm()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain"> &lt;div id&#x3D;&quot;app&quot;&gt;<br>      &#123;&#123;getSumm()&#125;&#125;<br>  &lt;&#x2F;div&gt;<br><br>methods: &#123;<br>              getSumm() &#123;<br>                  console.log(&quot;方法被调用了&quot;);<br><br>                  return this.data.substring(0, 1).toUpperCase() + this.data.substring(1)<br>              &#125;<br>          &#125;,<br></code></pre></td></tr></table></figure><p>computed属性: 调用  <code>getSum</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;div id&#x3D;&quot;app&quot;&gt;<br>       &#123;&#123;getSum&#125;&#125;<br>   &lt;&#x2F;div&gt;<br> computed: &#123;<br>               getSum() &#123;<br>                   console.log(&quot;计算属性被调用了&quot;);<br>                   return this.data.substring(0, 1).toUpperCase() + this.data.substring(1)<br>               &#125;<br>           &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>computed属性会缓存，方法不会缓存。</li></ol><p>代码如下图所示<br><img src="/image/vueDetailed/01.png"></p><p>打印结果<br><img src="/image/vueDetailed/02.png"></p><p><strong style="color: red">computed属性 你第一次去一个地方别人就认识你了，后面每一次去别人都可以叫出你的名字。</strong></p><p><strong style="color: red">方法属性 你去一个地方，每次去别人都叫不出你的名字。</strong></p><p>computed属性的优点：</p><p>1.依赖的状态改变了，计算属性会重新计算一遍。<br>2.计算属性会缓存。</p></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;VUE里的computed属性和方法属性的区别&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
VUE里的computed属性和方法属性的区别
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE的细解" scheme="https://wujun1234567.github.io/categories/VUE%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="VUE里的computed属性和方法属性的区别" scheme="https://wujun1234567.github.io/tags/VUE%E9%87%8C%E7%9A%84computed%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>2021年的目标</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19he0002nkv48n001cxi/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19he0002nkv48n001cxi/</id>
    <published>2020-12-31T13:23:51.000Z</published>
    <updated>2020-12-31T13:28:16.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2021年的实现目标。</p></blockquote><a id="more"></a><ol><li><p>当然是找一个理想的工作。所谓理想的，就是高工资，高福利，还可以让技术得到成长的工作。</p></li><li><p>谈一个对象。</p></li><li><p>好好的学习，就算以后工作再忙也希望可以坚持写博客。</p></li><li><p>尽快的了解行业，可以走出新手村。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2021年的实现目标。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CSS中margin-left等于负值的妙用</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19id000cnkv4d6tc1f9w/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19id000cnkv4d6tc1f9w/</id>
    <published>2020-12-31T09:17:54.000Z</published>
    <updated>2020-12-31T09:38:14.425Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">CSS中margin-left等于负值的妙用</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">今天写小米商城的案例，又碰到了margin-left的负值在浮动中的使用。</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS中margin-left等于负值在浮动中的妙用</strong></div><p>首先看代码,两个浮动的盒子之间是没有间隙的。<br><img src="/image/cssDetailed/01.png"></p><p>如果在后面浮动的盒子使用了margin-left: -1px;<br><img src="/image/cssDetailed/02.png"></p><p>为什么可以达到这个效果呢？<br>还是得分析浮动的盒子是不占有位置的结果<br>margin-left: 正值; 后面的盒子向右移动<br>margin-left: 负值; 后面的盒子向左移动</p><p>注意：<strong style="color: red">这个写法经常用在网页的搜索框和搜索框后面的提交按钮的使用。</strong></p></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;CSS中margin-left等于负值的妙用&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
今天写小米商城的案例，又碰到了margin-left的负值在浮动中的使用。
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="CSS的细解" scheme="https://wujun1234567.github.io/categories/CSS%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="CSS中margin-left等于负值的妙用" scheme="https://wujun1234567.github.io/tags/CSS%E4%B8%ADmargin-left%E7%AD%89%E4%BA%8E%E8%B4%9F%E5%80%BC%E7%9A%84%E5%A6%99%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>JS里的==和===的使用</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19ku001vnkv48vzv3erg/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19ku001vnkv48vzv3erg/</id>
    <published>2020-12-30T15:23:02.000Z</published>
    <updated>2021-01-02T14:04:35.131Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的==和===的使用</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">JS里的==和===的使用</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p><strong>JavaScript相等(==)和全等(===)运算符的区别</strong></p><p>相等(==)会进行类型的转换<br>全等(===)不会进行类型的转换</p><p>&lt;一&gt;<br>6 == 6 ;      true<br>6 === 6 ;     true<br>6 == ‘6’(等于字符串的6，转换为数字6); true<br>6 === ‘6’(全等于字符串的6不等于数字6); false</p><p>&lt;二&gt;<br>true(等于true会转换为数字 1) == 1；     true<br>false(等于false会转换为数字 0) == 0；   true<br>true(全等于true不会转换为数字 1) === 1；   false<br>false(全等于false不会转换为数字 0) === 0；  false</p><p>&lt;三&gt;<br>0表示空什么都没有，空的字符串或者字符串里面有空格都是空。</p><p>‘’ == 0;  true<br>‘  ‘  == 0;  true</p><p>null表示空值，或者说此处不应该有值<br>undefined表示未声明的变量，或者未赋值的变量。<br>null和undefined都是假值,两个除了自身之外不等于任何值。</p><p>null == undefined;  true<br>null == 0;            false<br>undefined == ‘’;      false</p><p>&lt;四&gt;<br>字符串转换数值的条件: 字符串 == 数值  (字符串转换为数值)<br>NaN 非数字：表示数据类型的状态，不是一个确切的值</p><p>‘false’  ==  false(布尔值false会被转换为0);  false<br>NaN == NaN;   false<br>NaN == false;   false<br>NaN === false;   false</p><p>&lt;五&gt;<br><img src="/image/jsProgress/02.png"></p><hr><p><strong>promise的then catch</strong><br><img src="/image/jsProgress/03.png"></p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的==和===的使用&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
JS里的==和===的使用
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS的细解" scheme="https://wujun1234567.github.io/categories/JS%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="JS里的==和===的使用" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84-%E5%92%8C-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>JS里的setTimeout(foo,0)和foo()</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19l60020nkv42h5yg469/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19l60020nkv42h5yg469/</id>
    <published>2020-12-30T13:01:08.000Z</published>
    <updated>2021-01-03T14:54:37.343Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99; font-size: 18px;font-weight: bold; "><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">JS里的setTimeout(foo,0)和foo()的细解</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">今天无意中看到了一道面试题说的是setTimeout(foo,0)可以等替代换为 foo()</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>JS里的setTimeout(foo,0)和foo()</strong></div><p>setTimeout(foo,0)可以写成foo()吗？</p><p>第一次看到这道题的时候，感觉好像是相等的，因为延时都是零。<br>如果有其他的函数在上面和下面执行的时候。那就不是看延时的问题了，是同步和异步的问题了。<br><img src="/image/jsDetailed/01.png"><br><img src="/image/jsDetailed/02.png"><br>从这两张图片可以看出来执行的结果完全是不一样的打印顺序的。<br>这就是考了同步和异步的执行顺序。</p><p>setTimeout( foo, 0 )的意思是，把foo在0ms内推入任务队列，<br>而浏览器会继续执行执行栈中的事件，当执行栈空了，才会把任务队列中的foo事件推入执行栈执行。<br>如果当前执行栈的事件很多，foo还是得继续等着哦，等到执行栈中的事件全部执行完了，foo才能进入到执行栈中执行。所以不是在0毫秒后就立即执行foo的意思。</p><p>setTimeout( foo, 0 )有什么作用呢？<br>同步变异步，降低foo事件优先级，把它放到后面执行。</p></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99; font-size: 18px;font-weight: bold; &quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;JS里的setTimeout(foo,0)和foo()的细解&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
今天无意中看到了一道面试题说的是setTimeout(foo,0)可以等替代换为 foo()
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="JS的细解" scheme="https://wujun1234567.github.io/categories/JS%E7%9A%84%E7%BB%86%E8%A7%A3/"/>
    
    
      <category term="JS里的setTimeout(foo,0)和foo()" scheme="https://wujun1234567.github.io/tags/JS%E9%87%8C%E7%9A%84setTimeout-foo-0-%E5%92%8Cfoo/"/>
    
  </entry>
  
  <entry>
    <title>最近的学习感悟</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19r3009rnkv4b8vh41r1/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19r3009rnkv4b8vh41r1/</id>
    <published>2020-12-28T15:43:15.000Z</published>
    <updated>2020-12-28T16:13:55.823Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">好的学习方法是可以让人进步很多的</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">好的学习方法是可以让人进步很多的</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>最近发现一些学习问题</strong></div><p style="text-indent: 2em;font-weight: 700;">    最近给自己安排学习任务，我觉得这个方法是很好的，这样让自己的学习有规划。但是我在安排学习任务的时候很不合理。我定的任务自己好好学习是可以完成的。</p><p style="text-indent: 2em;font-weight: 700;">    但是要是让我一天只学习vue的话，我是觉得不够的。我会去学习其他的知识点。这样就会让我的vue计划有点来不及完成，我就会迫于完成任务加快自己的视频进度，导致我没有学进去。而且定的任务要是难度太大，就会让人失去学习的动力的。</p><p style="text-indent: 2em;font-weight: 700;">    为了解决这个问题以后的任务都要合理，另外加一条学习时长来约束自己。时长是很重要的东西。个人每天的学习时长不低于6小时。为了写的有意思一些，我会用上进度条的样式<br/><progress value="6"  min="5" max="12"></p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong></strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong></strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong></strong></div></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;好的学习方法是可以让人进步很多的&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
好的学习方法是可以让人进步很多的
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="好的学习方法是可以让人进步很多的" scheme="https://wujun1234567.github.io/categories/%E5%A5%BD%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E6%98%AF%E5%8F%AF%E4%BB%A5%E8%AE%A9%E4%BA%BA%E8%BF%9B%E6%AD%A5%E5%BE%88%E5%A4%9A%E7%9A%84/"/>
    
    
      <category term="总结一些学习方法" scheme="https://wujun1234567.github.io/tags/%E6%80%BB%E7%BB%93%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>HTML5andCSS3总复习</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19jm0010nkv4802ehe3e/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19jm0010nkv4802ehe3e/</id>
    <published>2020-12-27T14:35:05.000Z</published>
    <updated>2021-01-02T04:01:30.676Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">CSS总复习</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">CSS总复习</div></div><a id="more"></a><br><br><br><br><br><br><hr><p  style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>HTML5新特性</strong></div><p>HTML新特性</p><p>1)增加了audio和video音频播放，抛弃了Flash<br>2)新增了canvas画布（绘画，制作动画（如小游戏开发等））<br>3)地理位置<br>4)增加了离线缓存<br>5)硬件加速<br>6)Web Socket (全双工通信)<br>7)增加了本地存储<br>8)新增了一些语义化标签</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>HTML5的优劣势</strong></div><p>1.HTML5的优势</p><ul><li>提高可用性和改进用户的友好体验。</li><li>新标签这将有助于开发人员定义重要的内容。</li><li>可以给站点带来更多的多媒体元素(视频和音频)可以很好的替代FLASH和Silverlight。</li><li>当涉及到网站的抓取和索引的时候，对于SEO很友好。</li><li>大量应用于移动应用程序和游戏。</li></ul><p>2.HTML5的劣势</p><ul><li>HTML5本身还在发展中，它不是用户应用的最迫切需求，更多是厂商试图改变软件生态格局的战略需求。</li><li>HTML5的兼容性受限于各大浏览器表现，例如微软的IE和fireforx之间存在很多差别。</li><li>HTML5需要一个成熟完整的开发环境，目前还缺少。</li><li>HTML5功能的暴增，浏览器必须有一个高效的图形引擎和脚本引擎。</li><li>HTML5需要杀手级应用来吸引和引导用户升级浏览器，最终完成HTML5终端的部署。</li></ul></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>网页布局标签</strong></div><ul><li>header:首页</li><li>nav:导航栏</li><li>aside:侧边栏</li><li>main:主体</li><li>section:区块</li><li>article:文章</li><li>footer:页尾</li></ul><img src="/image/htmlSummary/43.png" style="width: 1360"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>语义化标签</strong></div><p>1)mark:高亮显示(行级)<br>2)details（描述）与summary(摘要):一般用于名词解释或用于封装一个区块等<br>3)meter:定义度量衡<br>属性：value/min/max<br>4)progress:进度条<br>属性：value/min/max<br>5)dialog:对话框或窗口<br>6)figure:用于对元素进行组合（一般用来组合一张图的标题、图片和图片描述等）</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>HTML多媒体</strong></div><p><strong>1)audio</strong><br>播放音乐或音频。IE9以下版本不支持</p><p>a)支持的格式<br>.mp3/.ogg/.wav</p><p>b)属性<br>src:文件路径<br>autoplay:自动播放<br>loop:循环<br>controls:控制条<br>muted:静音<br>preload:预加载(当使用autoplay时，preload自动失效)</p><p><strong>2)video</strong><br>加载视频，IE9以下版本不支持。<br>a)支持的格式<br>.mp4/.ogg/.webm<br>b)属性<br>src:文件路径<br>autoplay:自动播放<br>loop:循环<br>controls:控制条<br>muted:静音<br>preload:预加载(当使用autoplay时，preload自动失效)<br>width:宽度<br>height:高度<br>poster:海报</p><p><strong>3)embed</strong><br>嵌入内容或加载插件</p><p>属性:<br>src:文件路径<br>width:宽度<br>height:高度<br>type:类型</p><p><strong>4)canvas</strong><br>画布:是一个容器元素<br>注意：<br>a.单独使用canvas没有意义，它必须结合JavaScript使用。它具体功能体现是通过JavaScript体现来的<br>b.canvas的宽高最好不要通过css实现，而是直接使用标签属性width和height实现。</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>HTML5常用属性</strong></div><p>HTML5常用属性：</p><p>1)contentEditable<br>将标签转换为客编辑状态。可用于所有标签。它的值有true/false。<br>默认值为false,不可以编辑</p><p>2)hidden<br>对元素进行隐藏。一般用来传值或当某个条件成立，执行内容显示。默认值为hidden。</p><p>3)data-*<br>用于存储页面或应用程序的私有自定义数据。一般用于传值。</p><p>4)multiple<br>规定输入域中可选择多个内容。用于表单组件中，如file/select.</p><p>5)required<br>约束表单元素在提交前必须输入值。用于表单组件中，需要结合提交按钮使用。</p><p>6)pattern<br>用于验证输入字段的模式。用于表单组件中，需要结合提交按钮使用</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>HTML5表单组件</strong></div><p>表单组件<br>1)color: 颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;form action&#x3D;&quot;&quot;&gt;<br>      &lt;input type&#x3D;&quot;color&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;111<br>  &lt;&#x2F;form&gt;<br></code></pre></td></tr></table></figure><p>2)email: 邮箱<br>3)tel: 电话号码<br>4)url: 网址<br>5)number: 数字<br>6)range: 范围<br>7)search: 搜索<br>8)date: 日期<br>9)datatime: 日期时间<br>10)datatime-load: 本一日期时间<br>11)year: 年份<br>12)month: 月份<br>13)time: 时间</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>表单属性</strong></div><p>1）formaction:修改action数据提交的地方<br>2）formenctype:修改表单请求的类型<br>3）formmethod:修改数据提交的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;GET&quot;&gt;<br>      &lt;input type&#x3D;&quot;color&quot; name&#x3D;&quot;&quot; formmethod&#x3D;&quot;POST&quot; id&#x3D;&quot;&quot;&gt;<br>      &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;<br>  &lt;&#x2F;form&gt;<br></code></pre></td></tr></table></figure><p>4）form:设置表单元素属于哪个表单<br>5）novalidate:不验证</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>input属性</strong></div><p>1)autocomplete:自动完成<br>用来帮助用户输入，每一次输入的内容，浏览器是否保存输入的值，以备将来使用。<br>值有: on / off ，默认为 on<br>为了保护敏感数据(如用户账号、密码等)，避免本地浏览器对他们不安全存储，一般需要关闭。<br>2)autofocus:自动获取焦点<br>3)step:步长<br>4)multiple:多选<br>5)pattern:正则匹配<br>6)placeholder:输入提示<br>7)required:必须输入</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS3新特性</strong></div><p>1)选择器<br>2)阴影<br>3)形状转化（2D &lt;-&gt; 3D）<br>4)变形<br>5)动画(过渡动画、帧动画)<br>6)边框<br>7)多重背景<br>8)反射<br>9)文字<br>10)颜色(rgba/hsl/hsla)<br>11)滤镜(filter)<br>12)弹性布局<br>13)多列布局<br>14)盒模型<br>15)Web字体<br>16)媒体查询</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS3属性前缀</strong></div>CSS3不是属于浏览器或同一浏览器的不同版本都支持，所以需要兼容处理，通常的做法就是加厂商前缀<p>1)主流浏览器内核<br>a)Trident: IE内核<br>b)Webkit: Chrome和Safari内核<br>c)Gecke: FireFox内核<br>d)Blink: Chrome和Opera内核</p><p>Tip(技巧)：<br>目前国内的浏览器大多都是双内核的(IE内核Chrome内核)</p><p>2)厂商前缀<br>IE: -ms-<br>Chrome&amp;Safari: -webkit-<br>FireFox: -moz-<br>Opera: -o-</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS3选择器</strong></div><p>丰富选择的目的，在标签中减少class和id属性的使用</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>属性选择器</strong></div><p>具有class的属性颜色为红色<br>p[class]{<br>    color:red<br>}</p><p>class属性等于content的标签颜色为红色<br>p[class=content]{<br>    color:red<br>}</p><p>class属性以content开头的标签颜色为红色<br>p[class^=content]{<br>    color:red<br>}</p><p>class属性以content结尾的标签颜色为红色<br>p[class$=content]{<br>    color:red<br>}</p><p>class属性包含p的标签颜色为红色<br>p[class$=p]{<br>    color:red<br>}</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>结构性伪类</strong></div><p>1）:root 匹配html标签，body选择器效果一样<br>:root {<br>    background-color: red;<br>}  </p><p>2)子元素选择 匹配父元素中连续的子元素</p><p>:first-child: 第一个子元素<br>:last-child: 最后一个子元素<br>:nth-last-child(n): 倒数第n个元素<br>:nth-child(n): 第几个元素</p><p>3) nth-of-type类:用于匹配父元素中兄弟子元素，可以用于子元素非连续的情况<br>   :nth-of-type(n)<br>   :nth-last-of-type(n)</p><p>4).其他</p><p>1) :only-child     父元素中仅有一个子元素</p><p>2) :only-of-type   父元素中仅有一个兄弟元素<br>:only-of-type 代表了任意一个元素，这个元素没有其他相同类型的兄弟元素(可以有多个兄弟元素)。</p><p>3) :empty          没有子元素，包括文本元素，即查找空元素 </p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>目标伪类</strong></div><p>目标伪类<br>:target :匹配URL指向的元素</p><p>点击a标签jump1，跳转到p标签的id=jump1的位置，同时字体颜色变为red</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">p:target &#123;<br>color:red<br>&#125;<br><br>&lt;a href&#x3D;&quot;#jump1&quot;&gt;jump1&lt;&#x2F;a&gt;<br>&lt;a href&#x3D;&quot;#jump2&quot;&gt;jump2&lt;&#x2F;a&gt;<br><br>&lt;p id&#x3D;&quot;jump1&quot;&gt;11111&lt;&#x2F;p&gt;<br>&lt;p id&#x3D;&quot;jump2&quot;&gt;22222&lt;&#x2F;p&gt;<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>UI元素状态伪类</strong></div><p>:enable 匹配所有用户界面(form表单)中处于可用状态的元素<br>:disable 匹配所有用户界面(form表单)中处于不可用状态的元素<br>:checked 匹配所有用户界面(form表单)中处于选中状态的元素(只在Opera中有效)<br>::selection 匹配元素中被用户选中或处于高亮状态的部分</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>否定伪类</strong></div><p>:not(p)<br>container下面的非p标签颜色都是红色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">.container :not(p)&#123;<br>color:red;<br>&#125;<br><br>&lt;div class&#x3D;&quot;container&quot;&gt;<br>&lt;p&gt;111&lt;&#x2F;p&gt;<br>&lt;p&gt;111&lt;&#x2F;p&gt;<br>&lt;span&gt;222&lt;&#x2F;span&gt;<br>&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>通用兄弟元素选择器</strong></div><p>通用兄弟元素选择器: ~</p><p>div2的字体变为红色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">.div1~.div2 &#123;<br>          color: red;<br>      &#125;<br><br> &lt;div class&#x3D;&quot;container&quot;&gt;<br>          &lt;div class&#x3D;&quot;div1&quot;&gt;1111&lt;&#x2F;div&gt;<br>          &lt;div class&#x3D;&quot;div2&quot;&gt;1111&lt;&#x2F;div&gt;<br>          &lt;div class&#x3D;&quot;div3&quot;&gt;1111&lt;&#x2F;div&gt;<br>      &lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS3文本</strong></div></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>文本阴影((IE9以上支持))</strong></div><p>文本阴影：<br>text-shadow: 水平偏移距离 垂直偏移距离 模糊距离 [阴影尺寸]  [颜色]  [inset] </p><img src="/image/htmlSummary/44.png" style="width: 1360"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>文本自动换行(主流浏览器都支持)</strong></div><p>word-wrap: normal | break-word</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>单词拆分(主流浏览器都支持)</strong></div><p>单词拆分<br>word-break: normal | break-all | keep-all;</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>文本拆分(所有主流浏览器都不支持)</strong></div><p>text-wrap: normal | none | unrestricted | suppress;</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>文本溢出(重要)</strong></div><p>a)单文本溢出(重要)<br>text-overflow: clip | ellipsis | string;</p><p>处理文字溢出样式：</p><p><code>width: px/%/em/rem....;</code><br><code>white-space: nowrap; //不允许换行</code><br><code>-ms-text-overflow:ellipsis; //处理IE兼容</code><br><code>text-overflow:ellipsis; //隐藏的部分用省略号表示</code><br><code>overflow:hidden;    //溢出隐藏</code></p><img src="/image/htmlSummary/45.png" style="width: 1360"><p>b)多行文本溢出(IE9以下版本不支持，主要是谷歌支持)</p><p><code>width: px/%/em/rem....;</code><br><code>display: -webkit-box;</code><br><code>-webkit-box-orient: vertical;</code><br><code>-webkit-line-clamp: 行数</code><br><code>white-space: wrap; //允许换行</code><br><code>overflow:hidden;    //溢出隐藏</code></p><img src="/image/htmlSummary/46.png" style="width: 1360"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS3边框</strong></div></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>圆角边框(重要)</strong></div><p>border-radius: 1-4 length|% / 1-4 length|%;</p><p>border-radius:2em;<br><mark>等价于</mark><br>border-top-left-radius:2em;<br>border-top-right-radius:2em;<br>border-bottom-right-radius:2em;<br>border-bottom-left-radius:2em;</p><img src="/image/htmlSummary/47.png" style="width: 1360"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>边框阴影(IE9以上支持)</strong></div><p>box-shadow: 水平偏移距离 垂直偏移距离 模糊距离 [阴影尺寸]  [颜色]  [inset] </p><img src="/image/htmlSummary/48.png" style="width: 1360"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>边框图片(IE11及以后的版本支持)</strong></div><p>border-image 属性是一个简写属性，用于设置以下属性：</p><p>border-image-source<br>border-image-slice<br>border-image-width<br>border-image-outset<br>border-image-repeat</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">border-image-source</td><td align="left">用在边框的图片的路径</td></tr><tr><td align="left">border-image-slice</td><td align="left">图片边框向内偏移。</td></tr><tr><td align="left">border-image-width</td><td align="left">图片边框的宽度。</td></tr><tr><td align="left">border-image-outset</td><td align="left">边框图像区域超出边框的量。</td></tr><tr><td align="left">border-image-repeat</td><td align="left">图像边框是否应平铺(repeated)、铺满(rounded)或拉伸(stretched)。</td></tr></tbody></table></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS3背景</strong></div></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>多重背景</strong></div><p>多重背景: 多张图片叠加的效果<br>background: 背景色 背景图片 平铺方式 位置, 背景色 背景图片 平铺方式 位置…</p><p>定义和用法<br>background 简写属性在一个声明中设置所有的背景属性。</p><p>可以设置如下属性：</p><ul><li>background-color</li><li>background-position</li><li>background-size: 固定长度 | 百分值 | cover | contain;</li><li>background-repeat:repeat | no-repeat;</li><li>background-origin:  border-box | padding-box | content-box;</li><li>background-clip: border-box | padding-box | content-box;</li><li>background-attachment</li><li>background-image</li></ul><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">background-color</td><td align="left">规定要使用的背景颜色。</td></tr><tr><td align="left">background-position</td><td align="left">规定背景图像的位置。</td></tr><tr><td align="left">background-size</td><td align="left">规定背景图片的尺寸。</td></tr><tr><td align="left">background-repeat</td><td align="left">规定如何重复背景图像。</td></tr><tr><td align="left">background-origin</td><td align="left">规定背景图片的定位区域。</td></tr><tr><td align="left">background-clip</td><td align="left">规定背景的绘制区域。</td></tr><tr><td align="left">background-attachment</td><td align="left">规定背景图像是否固定或者随着页面的其余部分滚动。</td></tr><tr><td align="left">background-image</td><td align="left">规定要使用的背景图像。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 background 属性的设置。</td></tr></tbody></table><img src="/image/htmlSummary/49.png" style="width: 1360"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS3颜色</strong></div><p>1)RGBA</p><p>background-color:rgba(red, green, blue, alpha);</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">red</td><td align="left">定义红色值，取值范围为 0 ~ 255，也可以使用百分比 0% ~ 100%。</td></tr><tr><td align="left">green</td><td align="left">定义绿色值，取值范围为 0 ~ 255，也可以使用百分比 0% ~ 100%。</td></tr><tr><td align="left">blue</td><td align="left">定义蓝色值，取值范围为 0 ~ 255，也可以使用百分比 0% ~ 100%。</td></tr><tr><td align="left">alpha</td><td align="left">透明度    定义透明度 0（完全透明） ~ 1（完全不透明）</td></tr></tbody></table><p>2)HSL<br>hsl(h,s,l)<br>h:色调    取值范围: 0-360<br>s:饱和度  取值范围: 0-100%<br>l:亮度    取值范围: 0-100%</p><p>3)HSLA<br>hsl(h,s,l,a)<br>h:色调      取值范围: 0-360<br>s:饱和度    取值范围: 0-100%<br>l:亮度      取值范围: 0-100%<br>a:不透明度  取值范围: 0-1的一个小数</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>opacity</strong></div><p>opacity<br>调整元素的不透明度，大多数情况下用于做元素的遮罩效果。取值范围: 0-1的一个小数<br>所有浏览器都支持 opacity 属性。<br>注释：IE8 以及更早的版本支持替代的 filter 属性。例如：filter:Alpha(opacity=50)。</p><img src="/image/htmlSummary/50.png" style="width: 1360"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS3渐变</strong></div><div style="text-align: center; color: red">    <strong>1)线性渐变</strong></div><p>background: linear-gradient(方向或角度,颜色1 百分比,颜色2 百分比,….)</p><p>方向:<br>to left :从右向左渐变<br>to right:从左向右渐变<br>to top  :从下向上渐变<br>to bottom :从上向下渐变<br>to top left:从右下角向左上角渐变<br>to top right:从左下角向右上角渐变<br>to bottom left:从右上角向左下角渐变<br>to bottom right:从左上角向右下角渐变</p><p>角度:<br>比如45度角，应该为： 45deg</p><p>颜色取值:<br>1)表示颜色的单词<br>2)16进制颜色<br>3)表示颜色的函数(rgb()/rgba()/hsl()/hsla()…..)</p><div style="text-align: center; color: red">    <strong>2)径向渐变（沿半径方向渐变）</strong></div><p>径向渐变与线性渐变类似，不同之处在于它们从中心点放射出去。您可以指定该中心点在哪里。您也可以将它们设置为圆形或椭圆形。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Using_CSS_gradients" target="_blank" rel="noopener">径向渐变（沿半径方向渐变）</a></p><div style="text-align: center; color: red">    <strong>3)文字渐变</strong></div><p>html代码 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;p&gt;111111111你说你从哪时长是参数111111111&lt;&#x2F;p&gt;<br></code></pre></td></tr></table></figure><p>css代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">p &#123;<br>           font-size: 30px;<br>           background-image: -webkit-linear-gradient(bottom, red, blue, green);<br><br>           -webkit-background-clip: text;<br><br>           -webkit-text-fill-color: transparent;<br>       &#125;<br></code></pre></td></tr></table></figure><p>效果图</p><img src="/image/htmlSummary/51.png" style="width: 1360"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>box-sizing</strong></div><p>box-sizing: content-box|border-box|inherit;</p><p>box-sizing:border-box<br>为元素设定的宽度和高度决定了元素的边框盒。<br>就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。<br>通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS3动画 transform</strong></div><p>定义和用法<br>transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">none</td><td align="left">定义不进行转换。</td></tr><tr><td align="left">matrix(n,n,n,n,n,n)</td><td align="left">定义 2D 转换，使用六个值的矩阵。</td></tr><tr><td align="left">matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)</td><td align="left">定义 3D 转换，使用 16 个值的 4x4 矩阵。</td></tr><tr><td align="left">translate(x,y)</td><td align="left">定义 2D 转换。</td></tr><tr><td align="left">translate3d(x,y,z)</td><td align="left">定义 3D 转换。</td></tr><tr><td align="left">translateX(x)</td><td align="left">定义转换，只是用 X 轴的值。</td></tr><tr><td align="left">translateY(y)</td><td align="left">定义转换，只是用 Y 轴的值。</td></tr><tr><td align="left">translateZ(z)</td><td align="left">定义 3D 转换，只是用 Z 轴的值。</td></tr><tr><td align="left">scale(x,y)</td><td align="left">定义 2D 缩放转换。</td></tr><tr><td align="left">scale3d(x,y,z)</td><td align="left">定义 3D 缩放转换。</td></tr><tr><td align="left">scaleX(x)</td><td align="left">通过设置 X 轴的值来定义缩放转换。</td></tr><tr><td align="left">scaleY(y)</td><td align="left">通过设置 Y 轴的值来定义缩放转换。</td></tr><tr><td align="left">scaleZ(z)</td><td align="left">通过设置 Z 轴的值来定义 3D 缩放转换。</td></tr><tr><td align="left">rotate(angle)</td><td align="left">定义 2D 旋转，在参数中规定角度。</td></tr><tr><td align="left">rotate3d(x,y,z,angle)</td><td align="left">定义 3D 旋转。</td></tr><tr><td align="left">rotateX(angle)</td><td align="left">定义沿着 X 轴的 3D 旋转。</td></tr><tr><td align="left">rotateY(angle)</td><td align="left">定义沿着 Y 轴的 3D 旋转。</td></tr><tr><td align="left">rotateZ(angle)</td><td align="left">定义沿着 Z 轴的 3D 旋转。</td></tr><tr><td align="left">skew(x-angle,y-angle)</td><td align="left">定义沿着 X 和 Y 轴的 2D 倾斜转换。</td></tr><tr><td align="left">skewX(angle)</td><td align="left">定义沿着 X 轴的 2D 倾斜转换。</td></tr><tr><td align="left">skewY(angle)</td><td align="left">定义沿着 Y 轴的 2D 倾斜转换。</td></tr><tr><td align="left">perspective(n)</td><td align="left">为 3D 转换元素定义透视视图。</td></tr></tbody></table><ol><li><p>translate:   位移效果<br>translate(x,y) 沿X Y轴位移。注意：X正轴向右，Y的正轴向下<br>translateX(x)  沿X轴方向<br>translateY(y)  沿Y轴方向</p></li><li><p>scale       缩放效果<br>scale(x,y)     进行大小的缩放<br>transform: scale(.5, .5);<br>div的大小缩小了一倍，变为了100px x 100px的盒子</p></li></ol><p>transform: scale(2, 2);<br>div的大小扩大了一倍，变为了400px x 400px 的盒子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain">  &lt;style&gt;<br>        div &#123;<br>            width: 200px;<br>            height: 200px;<br>            background-color: aquamarine;<br>            transform: scale(.5, .5);<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div&gt;&lt;&#x2F;div&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>rotate:   旋转效果<br>rotate(angle)<br>定义 2D 旋转，在参数中规定角度,顺时针旋转xxxdeg。<br>沿着顺时针旋转了10度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain">   div &#123;<br>            width: 200px;<br>            height: 200px;<br>            margin: 300px auto;<br>            background-color: aquamarine;<br>            transform: rotate(10deg);<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div&gt;&lt;&#x2F;div&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure></li><li><p>skew:   变形效果<br>skew(x-angle,y-angle)<br>定义沿着 X 和 Y 轴的 2D 倾斜转换。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain"> div &#123;<br>            width: 200px;<br>            height: 200px;<br>            margin: 300px auto;<br>            background-color: aquamarine;<br>            transform: skew(30deg,30deg);<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div&gt;&lt;&#x2F;div&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure><ol start="5"><li>matrix(待写):<br>matrix(n,n,n,n,n,n)<br>定义 2D 转换，使用六个值的矩阵。</li></ol></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>transform-origin</strong></div>transform-origin: 调整元素的基点定义和用法transform-origin 属性允许您改变被转换元素的位置。<p>2D 转换元素能够改变元素 x 和 y 轴。3D 转换元素还能改变其 Z 轴。</p><p>语法<br>transform-origin: x-axis y-axis z-axis;</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">x-axis</td><td align="left">定义视图被置于 X 轴的何处。可能的值：left center right length %</td></tr><tr><td align="left">y-axis</td><td align="left">定义视图被置于 Y 轴的何处。可能的值：top center bottom length %</td></tr><tr><td align="left">z-axis</td><td align="left">定义视图被置于 Z 轴的何处。可能的值：length</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plain">  .content &#123;<br>            width: 400px;<br>            height: 400px;<br>            margin: 300px auto;<br>            border: 1px solid rgb(230, 7, 7);<br>        &#125;<br>        .box &#123;<br>            width: 200px;<br>            height: 200px;<br>            transform: rotate(30deg);<br>            background-color: aquamarine;<br>            transform-origin: 0 0;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div class&#x3D;&quot;content&quot;&gt;<br>        &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>perspective</strong></div><p>perspective:让子元素获得透视效果<br>在父元素里面写:<br>perspective:length|none;</p><p>在子元素写<br>transform: rotateX(45deg);</p><p>主流浏览器都不支持，<br>苹果，谷歌要加-webkit-,或在长度后加单位<br>火狐浏览器要加-moz-,或在长度后加单位<br>IE浏览器要加-ms-,或在长度后加单位<br>欧鹏浏览器要加-o-,或在长度后加单位</p><img src="/image/htmlSummary/52.png" style="width: 1360"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>transform-style 3D 效果</strong></div><p>transform-style<br>在3D空间中呈现被嵌套的元素(必须与 transform 属性一同使用)。</p><p>transform-style: flat (子元素将不保留其 3D 位置) | perserve-3d (子元素将保留其 3D 位置) ;</p><p>Firefox 支持 transform-style 属性。<br>Chrome、Safari 和 Opera 支持替代的 -webkit-transform-style 属性。</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>rotateZ (待写一个正方形) </strong></div><p>rotateZ() 函数定义了一个转换，它可以让一个元素围绕横Z轴旋转，而不会导致进行变形。<br>rotateZ() 引起的旋转量由<angle>。指定如果为正，则顺时针方向移动;如果为负，则逆时针方向移动。</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>过渡动画transition</strong></div><ol><li><p>常规用法:<br>transition-property<br>transition-duration<br>transition-timing-function<br>transition-delay<br>注释：请始终设置 transition-duration 属性，否则时长为 0，就不会产生过渡效果。</p></li><li><p>简洁(复合)用法:</p></li></ol><p>transition: property-name-list<code>|</code>all duration  timing-fuction delay;</p><p>a)可以使用的属性有:<br>i)颜色:<br>color background-color border-color outline-color<br>ii)位置:<br>background-position left right top bottom<br>iii)长度:<br>max-height min-height max-width min-width height width<br>border-width margin padding outline-width outline-offset<br>font-size line-height text-index vertical-align<br>border-spacing letter-spacing word-spacing<br>iv)数字:<br>opacity visibility z-index font-weight zoom<br>v)组合:<br>text-shadow transform box-shadow clip<br>vi)其他<br>gradient</p><p>b)duration: 动画持续时间，一般以秒(s)或者毫秒(ms)为单位<br>c)timing-function:动画函数<br>i)linear:匀速<br>ii)ease:变速（先慢后快，最后再慢）<br>iii)ease-in:变速（由慢到快）<br>iv)ease-out:变速（由快到慢）<br>v)ease-in-out:变速（慢速开始，慢速结束）<br>vi)cubic-bezier(n,n,n):自行设定变速，n的值在0-1之间</p><p>d)delay:动画延时时间，一般以秒(s)或毫秒(ms)为单位</p><p>语法<br>transition: property duration timing-function delay;</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">transition-property</td><td align="left">规定设置过渡效果的 CSS 属性的名称。</td></tr><tr><td align="left">transition-duration</td><td align="left">规定完成过渡效果需要多少秒或毫秒。</td></tr><tr><td align="left">transition-timing-function</td><td align="left">规定速度效果的速度曲线。</td></tr><tr><td align="left">transition-delay</td><td align="left">定义过渡效果何时开始。</td></tr></tbody></table></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>animation动画</strong></div><p>关键帧动画<br>步骤:<br>1)设置关键帧</p><p>a)如果只有两个关键帧<br>@keyframes 动画名 {<br>    0%: {样式表}<br>    100%: {样式表}<br>}<br>或:<br>@keyframes 动画名 {<br>    from: {样式表}<br>    to: {样式表}<br>}<br>b)如果是多个关键帧<br>@keyframes 动画名 {<br>    0%: {样式表}<br>    25%: {样式表}<br>    60%: {样式表}<br>    70%: {样式表}<br>    …..<br>    100%: {样式表}<br>}<br>注意:这里的百分比一般是升序值，可以是0%-100%之间的任意值，也可以是倒序的。</p><p>2)实施动画<br>a)常规用法<br>animation-name: 来自于@keyframes定义的动画名</p><p>animation-duration 动画持续时间，一般以秒(s)或者毫秒(ms)为单位(默认为0)</p><p>animation-timing-function 动画函数<br>i)linear:匀速(默认值)<br>ii)ease:变速（先慢后快，最后再慢）<br>iii)ease-in:变速（由慢到快）<br>iv)ease-out:变速（由快到慢）<br>v)ease-in-out:变速（慢速开始，慢速结束）<br>vi)cubic-bezier(n,n,n):自行设定变速，n的值在0-1之间</p><p>animation-delay 动画延时时间，一般以秒(s)或毫秒(ms)为单位</p><p>animation-iteration-count: 动画循环播放的次数<br>1)number: 按设定次数循环播放(默认次数为1次)<br>2)infinite: 一直循环播放</p><p>animation-direction: 动画播放完是否反向播放<br>1)normal: 不反向(默认值)<br>2)alternate:反向</p><p>animation-play-state:动画播放或停止播放<br>1)paused: 停止播放<br>2)running:播放(默认值)</p><p>b)简洁用法<br>animation: name duration timing-functon delay iteration-count direction;</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>UI元素状态伪类</strong></div><p>网站开发策略：先整体再局部，至顶向下，逐步细化</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>UI元素状态伪类</strong></div><p>网站开发策略：先整体再局部，至顶向下，逐步细化</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>UI元素状态伪类</strong></div><p>网站开发策略：先整体再局部，至顶向下，逐步细化</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>UI元素状态伪类</strong></div><p>网站开发策略：先整体再局部，至顶向下，逐步细化</p></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;CSS总复习&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
CSS总复习
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="HTML5andCSS3总复习" scheme="https://wujun1234567.github.io/categories/HTML5andCSS3%E6%80%BB%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="HTML5andCSS3总复习" scheme="https://wujun1234567.github.io/tags/HTML5andCSS3%E6%80%BB%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Git和Github入门</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19ji000ynkv4b3qoennh/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19ji000ynkv4b3qoennh/</id>
    <published>2020-12-25T05:21:42.000Z</published>
    <updated>2020-12-31T08:14:44.661Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=355715222,2610893624&fm=26&gp=0.jpg" style="width: 200px ;height: 90px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">Git和Github入门</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">Git和Github入门</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>第一阶段单枪匹马干</strong></div><p>想要让git对一个目录进行版本控制需要以下步骤</p><ul><li>进入要管理的文件夹</li><li>执行初始化命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git init<br></code></pre></td></tr></table></figure></li><li>管理目录下的文件状态<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git status<br>注：新增的文件和修改过后的文件都是红色<br></code></pre></td></tr></table></figure></li><li>管理指定文件（红变绿）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git add  文件名<br>git add.<br></code></pre></td></tr></table></figure></li><li>个人信息配置：用户名、邮箱【只需配置一次即可】<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git config --global user.email &quot;you@example.com&quot;<br>git config --global user.name &quot;Your Name&quot;<br></code></pre></td></tr></table></figure></li><li>生成版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git commit -m &#39;描述信息&#39;<br></code></pre></td></tr></table></figure></li><li>查看版本记录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git log<br></code></pre></td></tr></table></figure></li></ul><hr><div style="text-align: center; color: red">    <strong>以下总结：</strong></div><ol><li><p>进入要管理的目录</p></li><li><p><strong>git init</strong> 初始化，即：让git帮助我们管理当前文件夹</p></li><li><p><strong>git status</strong> 检测当前目录下文件的状态</p></li><li><p><strong>三种状态的变化</strong></p></li></ol><ul><li>红色：新增的文件/修改了原老文件  –&gt; git add 文件名</li><li>绿色：git 已经管理起来 —&gt; git commit -m ‘描述信息’</li><li>生成版本</li></ul><hr><div style="text-align: center; color: red">    <strong>git三大区域图解</strong></div><img src="/image/gitSummary/01.png"><hr><div style="text-align: center; color: red">    2.2<strong>第二阶段：拓展新功能</strong></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git  add .<br>git  commit  -m &#39;短视频&#39;<br></code></pre></td></tr></table></figure><div style="text-align: center; color: red">    2.3<strong>第三阶段：“约饭事件”</strong></div><ul><li><p>回滚至之前版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git log   <br>git reset --hard 版本号<br></code></pre></td></tr></table></figure></li><li><p>回滚至之后版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git reflog<br>git reset --hard 版本号<br></code></pre></td></tr></table></figure></li></ul></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>git分支</strong></div><p><strong>商城and紧急bug修复</strong></p><p>命令总结</p><ul><li>查看分支<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git branch<br></code></pre></td></tr></table></figure></li><li>创建分支<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git branch 分支名称<br></code></pre></td></tr></table></figure></li><li>切换分支<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git checkout  分支名称<br></code></pre></td></tr></table></figure></li><li>分支合并（可能产生冲突）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git merge  要合并的分支<br>注意：切换分支再合并<br></code></pre></td></tr></table></figure></li><li>删除分支<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git branch -d  分支名称<br></code></pre></td></tr></table></figure>创建dev分支并且切换到dev分支<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git checkout -b dev<br></code></pre></td></tr></table></figure></li></ul></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>第五阶段：进军三路屯</strong></div><p><strong>在家里上传代码</strong></p><ol><li>给远程仓库起别名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git remote add origin  远程仓库地址<br></code></pre></td></tr></table></figure></li><li>向远程推送代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git push -u origin 分支名称<br></code></pre></td></tr></table></figure></li></ol><p><strong>在公司新电脑上第一次获取代码</strong></p><ol><li>克隆远程仓库代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git clone 远程仓库地址 （内部已经实现 git remote add origin 远程仓库地址）<br></code></pre></td></tr></table></figure></li><li>切换分支<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git checkout  分支<br></code></pre></td></tr></table></figure></li></ol><p><strong>在公司进行开发</strong></p><ol><li><p>切换到dev分支进行开发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git checkout dev<br></code></pre></td></tr></table></figure></li><li><p>把master分支合并到dev 【仅一次】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git merge master<br></code></pre></td></tr></table></figure></li><li><p>修改代码</p></li><li><p>提交代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">git add<br>git commit -m &#39;xxx&#39;<br>git push origin dev<br></code></pre></td></tr></table></figure></li></ol><p><strong>回到家中继续写代码</strong></p><ol><li><p>切换到dev分支进行开发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git checkout  dev<br></code></pre></td></tr></table></figure></li><li><p>拉代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git pull origin dev<br></code></pre></td></tr></table></figure></li><li><p>继续开发</p></li><li><p>提交代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">git add<br>git commit -m &#39;xxx&#39;<br>git push origin dev<br></code></pre></td></tr></table></figure></li></ol><p><strong>在公司继续开发</strong></p><ol><li><p>切换到dev分支进行开发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git checkout  dev<br></code></pre></td></tr></table></figure></li><li><p>拉代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git pull origin dev<br></code></pre></td></tr></table></figure></li><li><p>继续开发</p></li><li><p>提交代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">git add<br>git commit -m &#39;xxx&#39;<br>git push origin dev<br></code></pre></td></tr></table></figure></li></ol><p><strong>开发完毕，要上线</strong></p><ol><li>将dev分支合并到master，进行上线<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">git checkout  master<br>git merge dev<br>git push origin master<br></code></pre></td></tr></table></figure></li><li>把dev分支也推送到远程<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">git checkout dev<br>git merge master<br>git push origin dev<br></code></pre></td></tr></table></figure></li></ol><ol start="3"><li><mark>git pull origin dev 等同于下面两个命令</mark><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git fetch origin dev<br>git merge origin&#x2F;dev<br></code></pre></td></tr></table></figure></li></ol></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>rebase的使用，及注意事项</strong></div><p>保持代码提交整洁(变基)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git rebase 分支<br></code></pre></td></tr></table></figure><p>记录图形展示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git log --graph --pretty&#x3D;format:&quot;%h %s&quot;<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>给开源软件贡献代码</strong></div><ol><li><p>fork源码<br>将别人的源码拷贝到我自己的远程仓库</p></li><li><p>在自己仓库进行修改代码</p></li><li><p>给源代码的作者提交 修复bug 的申请(pull request)</p></li></ol></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>配置</strong></div><p>3.1配置</p><p>项目配置文件:项目<code>/.git/config</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git config --local user.name&#39;武沛齐&#39;<br>git config --local user.emai7 &quot;wupeiqi@xx.com&quot;<br></code></pre></td></tr></table></figure><p>全局配置文件: <code>~/.gitconfig</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git config --global user.name &quot; wupeiq&#39;<br>git config --global user.name &quot;wupeiqi@xx.com&quot;<br></code></pre></td></tr></table></figure><p>系统配置文件:<code>/etc/.gitconfig</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git config --system user.name &quot;wupeiq&#39;<br>git config --system user.name &quot;wupeiqi@xx.com &quot;<br></code></pre></td></tr></table></figure><p>注意:需要有root权限</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>应用场景∶</strong></div><p>应用场景∶</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">git config --1ocal user.name&#39;武沛齐&quot;<br>git config --1ocal user.email &#39;wupeiqi @xx. com &#39;<br><br>git config --local merge.tool bc3<br>git config --1ocal mergetoo1.path &quot; &#x2F;usr&#x2F;loca1&#x2F;bin&#x2F;bcomp&#39;git config --1oca1 mergetoo1.keepBackup false<br><br>git remote add origin地址，默认添加在本地配置文件中(--loca1)<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>免密码登录</strong></div><p>免密码登录<br>URL中体现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">原来的地址: https:&#x2F;&#x2F;github.com&#x2F;&#39;wuPeiqi&#x2F;dbhot.git<br>修改的地址:https:&#x2F;&#x2F;用户名:密码@github.com&#x2F;wupeiqi&#x2F;dbhot.git<br><br>git remote add origin https:&#x2F;&#x2F;用户名:密码@github.com&#x2F;wuPeiqi&#x2F;dbhot.git<br>git push origin master<br></code></pre></td></tr></table></figure><p>SSH实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">1．生成公钥和私钥&#96;(默认放在~&#x2F;.ssh目录下,id_rsa. pub公钥、id_rsa私钥)&#96;<br>ssh-keygen<br>2．拷贝公钥的内容,并设置到github中。<br>3．在git本地中配置ssh地址<br>git remote add origin git@github.com : wuPeiqi&#x2F;dbhot.git<br><br>4.以后使用<br>git push origin master<br></code></pre></td></tr></table></figure><p>git自动管理凭证</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>git忽略文件</strong></div><p>3.3 git忽略文件<br>让Git不再管理当前目录下的某些文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">*, h<br>!a.hfiles&#x2F;<br>*.py[clal d]<br></code></pre></td></tr></table></figure><p>更多参考:<a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a></p><p>3.4任务管理相关<br>issues，文档以及任务管理。<br>wiki，项目文档。</p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong></strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong></strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>快速解决冲突</strong></div><ol><li><p>安装beyond compare</p></li><li><p>在git中配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">git config --local merge.tool bc3<br>git config --local merge.tool.path &#39;D:\beyondconpare\Beyond Compare 4&#39;<br>git config --local merge.tool.keepBackup false<br></code></pre></td></tr></table></figure></li><li><p>应用beyond compare 解决冲突</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git mergetool<br></code></pre></td></tr></table></figure></li></ol></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>总结</strong></div><ol><li><p>添加远程连接(别名)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git remote add origin 地址<br></code></pre></td></tr></table></figure></li><li><p>推动代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git push origin dev<br></code></pre></td></tr></table></figure></li><li><p>下载代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git clone 地址<br></code></pre></td></tr></table></figure></li><li><p>拉取代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">git pull origin dev<br>等价于<br>git fetch origin dev<br>git merge origin&#x2F;dev<br></code></pre></td></tr></table></figure></li></ol></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS的四种引入方式</strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS的四种引入方式</strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS的四种引入方式</strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>记录git报错 error: failed to push some refs to 'git@github.com:xxxxxx/xxxxx.git' 的解决方案</strong></div><p>出现的错误<br>在使用git运行push命令到远程仓库时，发生错误，错误信息如下：</p><img src="/image/gitError/01.png"><p>解决方案<br>首先运行拉取命令<br>把README.md文件克隆到本地库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git pull --rebase origin master<br></code></pre></td></tr></table></figure><p>最后再执行推送命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git push -u origin master<br></code></pre></td></tr></table></figure></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=355715222,2610893624&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 200px ;height: 90px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;Git和Github入门&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
Git和Github入门
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="Git和Github基础学习" scheme="https://wujun1234567.github.io/categories/Git%E5%92%8CGithub%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Git和Github入门" scheme="https://wujun1234567.github.io/tags/Git%E5%92%8CGithub%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>VUE总复习</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19pc005pnkv4eea1ex6t/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19pc005pnkv4eea1ex6t/</id>
    <published>2020-12-24T09:02:35.000Z</published>
    <updated>2021-01-03T13:56:33.898Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">VUE复习</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">VUE复习</div></div><a id="more"></a><br><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>插值</strong></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">1. 文本 &#123;&#123;&#125;&#125;<br>2. 纯HTML<br>v-html,防止XSS.csrf <br><br>(1)前端过滤<br>(2)后台转义(&lt; &gt; &lt; &gt;)<br>(3)给cookie加上属性http<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>v-if和v-show</strong></div><p>v-show:显示和隐藏元素，使用display:block/none</p><p>v-if:创建和删除元素。</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>v-class的绑定</strong></div></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>v-style的绑定</strong></div></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>v-条件渲染</strong></div><p>v-if<br>v-else-if<br>v-else</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>v-列表渲染</strong></div><p><code>&lt;li v-for=&quot;(item,index) in list&quot;&gt;{{item.name}}&lt;/li&gt;</code></p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>v-列表key设定</strong></div><p><code>&lt;li :key=&quot;index&quot;  v-for=&quot;(item,index) in list&quot;&gt;{{item.name}}&lt;/li&gt;</code></p><p>key:<br>跟踪每一个节点的身份，从而重用和重新排列现有元素<br>理想的key值是每一项都有且唯一的id</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>v-列表数组更新检测</strong></div><p>a.使用以下方法操作数组，可以检测变动</p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><p>b.filter()、concat() 、 slice() 和map(),需要新数组替换旧数组</p><p>c.不能检测以下变动的数组</p><p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但是，可以使用 Vue.set(object, propertyName, value) 方法向嵌套对象添加响应式 property。例如，对于：</p><p>Vue.set(vm.someObject, ‘b’, 2)</p><p>您还可以使用 vm.$set 实例方法，这也是全局 Vue.set 方法的别名：<br>this.$set(this.someObject,’b’,2)<br><img src="/image/vueSummary/01.png"></p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>v-列表过滤应用</strong></div><p>首先用了下列的知识点</p><ul><li>v-model</li><li>v-for</li><li>@input: 表单输入值就会触发</li><li>@change: 表单失去焦点就会触发</li><li>JS.filter:  过滤元素<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">官方filter细解</a></li><li>JS.indexOf: 查找元素返回索引号<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank" rel="noopener">官方indexOf细解</a></li></ul><p>总体代码<br><img src="/image/vueSummary/02.png"></p><p>演示效果图<br><img src="/image/vueSummary/01.gif"></p><p>总结一下：昨天晚上睡觉之前想了一下，进入了一个误区。<br>首先当触发输入框时，调用的是list这个数组的变化，来执行过滤函数。<br>当输入框没有触发时，也就是输入框为空。跳过methods方法里面的执行函数。<br>展示的是datalist数组。<br>如果没有list这个替身数组的话，只要我们调用过了handle函数，那么datalist这个数组<br>就永远不会变回原数组了。也就是没有触发输入框时，永远展示的是之前过滤的数组。</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>v-事件处理器</strong></div><img src="/image/vueSummary/03.png"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>v-事件修饰符</strong></div><ul><li><p>.stop</p></li><li><p>.prevent</p></li><li><p>.capture</p></li><li><p>.self</p></li><li><p>.once</p></li><li><p>.passive</p><p>阻止冒泡事件继续传播<br><code>&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</code></p><p>提交事件不再重载页面 阻止默认行为<br><code>&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</code></p><p>点击事件将只会触发一次<br><code>&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</code></p><p>即事件不是从内部元素触发的,只触发自身<br><code>&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</code></p></li></ul></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>v-按键修饰符</strong></div><p><code>&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</code></p><ul><li>.enter</li><li>.tab</li><li>.delete (捕获“删除”和“退格”键)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>.right</li></ul><p>你还可以通过全局 config.keyCodes 对象自定义按键修饰符别名：</p><p>// 可以使用 <code>v-on:keyup.f1</code><br>Vue.config.keyCodes.f1 = 112</p><img src="/image/vueSummary/04.png"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>v-表单控件的绑定</strong></div><p>展示效果<br><img src="/image/vueSummary/05.png"></p><p>实际代码<br><img src="/image/vueSummary/06.png"></p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>购物车vue逻辑的实现</strong></div><p>需要实现的效果<br><img src="/image/vueSummary/02.gif"></p><p>实际代码</p><img src="/image/vueSummary/07.png"><p>注意：  <code>&lt;input type=&quot;checkbox&quot; v-model=&quot;checkgroup&quot; :value=&quot;data&quot; @change=&quot;handleList()&quot; name=&quot;&quot; id=&quot;&quot;&gt;</code><br><code>{{checkgroup}}</code><br>虽然 <code>v-model</code> 绑定的是<code>checkgroup</code> 这个变量，但是展示的数据是<code>value</code>里面的数据</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>表单修饰符</strong></div><p><strong>v-model.lazy</strong>:使input表单的事件触发变为失去焦点后才触发。</p><p>如果单纯使用v-model绑定，效果如下图所示<br><img src="/image/vueSummary/03.gif"></p><p>如果单纯使用v-model.lazy绑定，效果如下图所示<br><img src="/image/vueSummary/04.gif"></p><p>v-model.lazy的作用就是减少input表单事件的触发。</p><p><strong>v-model.number</strong>:如果input表单开头为<mark>数字</mark>，后面跟字母的话，是不会识别后面的字母。<br>效果如下图所示<br><img src="/image/vueSummary/05.gif"></p><p>注意如果第一个为 <mark>字母</mark> 的时候，这个功能就会失效。变成input 的v-model绑定</p><p><strong>v-model.trim</strong>:去掉输入框的首尾空格，不可以去掉中间的空格。<br>效果如下图所示<br><img src="/image/vueSummary/06.gif"></p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>fetch请求</strong></div><p>注意fetch请求需要在第二个then拿回的是后台的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">fetch(&quot;.&#x2F;json&#x2F;test.json&quot;).then(res &#x3D;&gt; &#123;<br>           return res.json()<br>           &#125;).then(res &#x3D;&gt; &#123;<br>            this.datalist &#x3D; res.data.films<br>           &#125;)<br></code></pre></td></tr></table></figure><img src="/image/vueSummary/08.png"><img src="/image/vueSummary/09.png"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>axios请求</strong></div><p>axios返回的数据会被包装<br>axios会自动包装data属性 res.data</p><img src="/image/vueSummary/10.png"><img src="/image/vueSummary/11.png"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>computed属性</strong></div><p>计算属性的代码书写<br><img src="/image/vueSummary/12.png"></p><p>注意:计算属性调用直接在差值表达式里面写 函数名即可，不可以加小括号。</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>computed属性的模糊查询</strong></div><p>实际代码<br><img src="/image/vueSummary/13.png"></p><p>演示效果图<br><img src="/image/vueSummary/01.gif"></p><p>这个效果与v-列表过滤应用的效果一样的，但是运用了计算属性不用安排两个数组来写。</p><p>注意:  <code>&lt;li v-for=&quot;data in getMyDataliat&quot;&gt;&lt;/li&gt;</code><br>计算属性的函数可以绑定到v-for的属性里面。</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>自定义组件</strong></div><ol><li>全局组件的使用的代码<br>任意的全局组件可以作为其他全局组件的孩子来使用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">"en"</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">"UTF-8"</span>&gt;<br>    &lt;meta name=<span class="hljs-string">"viewport"</span> content=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">"X-UA-Compatible"</span> content=<span class="hljs-string">"ie=edge"</span>&gt;<br>    &lt;title&gt;Document&lt;<span class="hljs-regexp">/title&gt;</span><br><span class="hljs-regexp">&lt;body&gt;</span><br><span class="hljs-regexp">    &lt;div id="app"&gt;</span><br><span class="hljs-regexp">        &lt;navbar&gt;&lt;/</span>navbar&gt;<br>        &lt;navbar&gt;&lt;<span class="hljs-regexp">/navbar&gt;</span><br><span class="hljs-regexp">        &lt;navbar&gt;&lt;/</span>navbar&gt;<br>    &lt;<span class="hljs-regexp">/div&gt;</span><br><span class="hljs-regexp">    &lt;script&gt;</span><br><span class="hljs-regexp">    1.全局定义组件（作用域隔离）</span><br><span class="hljs-regexp">        Vue.component("navbar", &#123;</span><br><span class="hljs-regexp">            template: `</span><br><span class="hljs-regexp">            &lt;div style="background:red"&gt;</span><br><span class="hljs-regexp">                &lt;button @click="handle"&gt;返回&lt;/</span>button&gt;<br>                       navbar<br>                    <br>                &lt;button&gt;主页&lt;<span class="hljs-regexp">/button&gt;</span><br><span class="hljs-regexp">                &lt;child&gt;&lt;/</span>child&gt;<br>                &lt;navbarchild&gt;&lt;<span class="hljs-regexp">/navbarchild&gt;</span><br><span class="hljs-regexp">                &lt;/</span>div&gt;<br>            <span class="hljs-string">`,</span><br><span class="hljs-string">            methods: &#123;</span><br><span class="hljs-string">                handle() &#123;</span><br><span class="hljs-string">                    alert("返回")</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">          Vue.component("child", &#123;</span><br><span class="hljs-string">            template: `</span>&lt;div&gt;child-自定义组件&lt;<span class="hljs-regexp">/div&gt;`</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">        &#125;)</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">        var vm = new Vue(&#123;</span><br><span class="hljs-regexp">            el: '#app',</span><br><span class="hljs-regexp">            data: &#123;&#125;,</span><br><span class="hljs-regexp">            methods: &#123;&#125;</span><br><span class="hljs-regexp">        &#125;);</span><br><span class="hljs-regexp">    &lt;/</span>script&gt;<br>&lt;<span class="hljs-regexp">/body&gt;</span><br><span class="hljs-regexp">&lt;/</span>html&gt;<br></code></pre></td></tr></table></figure><p>效果图</p><img src="/image/vueSummary/07.gif"><ol start="2"><li><p>局部组件:在全局组件里面定义的局部组件，只能在自己的全局组件里面引用。<br>作为孩子引用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c">Vue.component(<span class="hljs-string">"navbar"</span>, &#123;<br>          <span class="hljs-keyword">template</span>: `<br>          &lt;div style=<span class="hljs-string">"background:red"</span>&gt;<br>              &lt;button @<span class="hljs-built_in">click</span>=<span class="hljs-string">"handle"</span>&gt;返回&lt;/button&gt;<br>                     navbar<br>                  <br>              &lt;button&gt;主页&lt;/button&gt;<br>              &lt;child&gt;&lt;/child&gt;<br>              &lt;navbarchild&gt;&lt;/navbarchild&gt;<br>              &lt;/div&gt;<br>          `,<br>          methods: &#123;<br>              handle() &#123;<br>                  alert(<span class="hljs-string">"返回"</span>)<br>              &#125;<br>          &#125;,<br>          components: &#123;<br>              navbarchild: &#123;<br>                  <span class="hljs-keyword">template</span>: `<br>                  &lt;div&gt;<br>              navbarchild组件的使用<br>              &lt;/div&gt;<br>                  `<br>              &#125;<br>          &#125;<br>      &#125;)<br></code></pre></td></tr></table></figure></li><li><p>局部组件的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;div id&#x3D;&quot;app&quot;&gt;<br>       &lt;home&gt;&lt;&#x2F;home&gt;<br>       &lt;user&gt;&lt;&#x2F;user&gt;<br>   &lt;&#x2F;div&gt;<br>   &lt;script&gt;<br>       var vm &#x3D; new Vue(&#123;<br>           el: &#39;#app&#39;,<br>           data: &#123;&#125;,<br>           methods: &#123;&#125;,<br>           components: &#123;<br>               &quot;home&quot;: &#123;<br>                   template: &#96;&lt;div&gt;home组件的使用&lt;&#x2F;div&gt;&#96;<br>               &#125;,<br>               &quot;user&quot;: &#123;<br>                   template: &#96;&lt;div&gt;user组件的使用&lt;&#x2F;div&gt;&#96;<br>               &#125;<br>           &#125;<br>       &#125;);<br>   &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure></li></ol></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>组件的方式与vue实例的区别</strong></div><ul><li>自定义组件需要一个root element</li><li>父子组件的data是无法共享的</li><li>组件可以有data，methods,computed…,但是data 必须是一个函数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs plain">Vue.component(&quot;navbar&quot;, &#123;<br>          template: &#96;<br>          &lt;div style&#x3D;&quot;background:red&quot;&gt;<br>              &lt;button @click&#x3D;&quot;handle&quot;&gt;返回&lt;&#x2F;button&gt;<br>                     navbar<br>                  &#123;&#123;dataword&#125;&#125;<br>              &lt;button&gt;主页&lt;&#x2F;button&gt;<br>              &lt;child&gt;&lt;&#x2F;child&gt;<br>              &lt;navbarchild&gt;&lt;&#x2F;navbarchild&gt;<br>              &lt;&#x2F;div&gt;<br>          &#96;,<br>          methods: &#123;<br>              handle() &#123;<br>                  alert(&quot;返回&quot;)<br>              &#125;<br>          &#125;,<br>          data() &#123;<br>              return &#123;<br>                  dataword: &quot;你好啊&quot;<br>              &#125;<br>          &#125;,<br>          components: &#123;<br>              navbarchild: &#123;<br>                  template: &#96;<br>                  &lt;div&gt;<br>              navbarchild组件的使用<br>              &lt;&#x2F;div&gt;<br>                  &#96;<br>              &#125;<br>          &#125;<br>      &#125;)<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>组件父传子</strong></div><ol><li>在父组件中写入差值表达式 <code>myname</code></li></ol><ol start="2"><li><p><code>props: [&quot;myname&quot;, &quot;myshow&quot;] //接收父组件传来的属性</code></p></li><li><p>在子组件中调用<br><code>&lt;tarbar myname=&quot;龙马&quot; :myshow=&quot;false&quot;&gt;&lt;/tarbar&gt;</code><br><code>&lt;tarbar :myname=&quot;name&quot; :myshow=&quot;true&quot;&gt;&lt;/tarbar&gt;</code></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;tarbar myname&#x3D;&quot;龙马&quot; :myshow&#x3D;&quot;false&quot;&gt;&lt;&#x2F;tarbar&gt;<br>        &lt;tarbar :myname&#x3D;&quot;name&quot; :myshow&#x3D;&quot;true&quot;&gt;&lt;&#x2F;tarbar&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        Vue.component(&quot;tarbar&quot;, &#123;<br>            template: &#96;<br>                &lt;div&gt;<br>                    &lt;button&gt;返回&lt;&#x2F;button&gt;<br>                      你好啊--&#123;&#123;myname&#125;&#125;<br>                    &lt;button v-show&#x3D;&quot;myshow&quot;&gt;主页&lt;&#x2F;button&gt;<br>                    &lt;&#x2F;div&gt;<br>                &#96;,<br>            props: [&quot;myname&quot;, &quot;myshow&quot;] &#x2F;&#x2F;接收父组件传来的属性<br><br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                name: &#39;超前&#39;<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>组件的属性验证</strong></div><p>属性验证：  <code>props: {name: Number}</code></p><p>Number ,String ,Boolean ,Object ,Function ,null(不限制类型)</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>子组件传父组件的使用</strong></div><p><strong>首先父传子靠的是属性，子传父靠的是事件</strong></p><p>代码展示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;div id&#x3D;&quot;app&quot;&gt;<br>     &lt;child @myevent&#x3D;&quot;handEvent($event)&quot;&gt;&lt;&#x2F;child&gt;<br> &lt;&#x2F;div&gt;<br> &lt;script&gt;<br>     &#x2F;&#x2F; 子组件<br>     Vue.component(&quot;child&quot;, &#123;<br>         template: &#96;&lt;div&gt; 子组件 &lt;button @click&#x3D;&quot;money&quot;&gt; click &lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&#96;,<br>         data() &#123;<br>             return &#123;<br>                 childname: &#39;子组件的状态&#39;<br>             &#125;<br>         &#125;,<br>         methods: &#123;<br>             money() &#123;<br>                 this.$emit(&quot;myevent&quot;, this.childname) &#x2F;&#x2F;分发  事件<br>             &#125;<br>         &#125;<br>     &#125;)<br>     var vm &#x3D; new Vue(&#123;<br>         el: &#39;#app&#39;,<br>         data: &#123;&#125;,<br>         methods: &#123;<br>             handEvent(ev) &#123;<br>                 console.log(&#39;父组件收到钱了&#39;, ev);<br>             &#125;<br>         &#125;<br>     &#125;);<br> &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><ol><li><p>在子组件中定义要传给父组件的数据(这里需要注意的是，在组件中的data必须是一个函数，用return接收)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">data() &#123;<br>       return &#123;<br>              childname: &#39;子组件的状态&#39;<br>              &#125;<br>       &#125;<br></code></pre></td></tr></table></figure></li><li><p>在组件的模板里面定义一个点击事件， <code>@click=&quot;money&quot;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">template: &#96;&lt;div&gt; 子组件 &lt;button @click&#x3D;&quot;money&quot;&gt; click &lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&#96;<br></code></pre></td></tr></table></figure></li><li><p>在全局组件的methods(不是vue实例里面的methods)里面调用 click 触发的函数<br><code>this.$emit(&quot;myevent&quot;, this.childname)</code>  this.$emit()是固定的写法<br>里面的第一个参数可以随便定义，第二个参数表示要传递给父组件的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">methods: &#123;<br>               money() &#123;<br>                   this.$emit(&quot;myevent&quot;, this.childname) &#x2F;&#x2F;分发  事件<br>               &#125;<br></code></pre></td></tr></table></figure></li><li><p>在根组件里面调用这个组件，<code>&lt;child @myevent=&quot;handEvent($event)&quot;&gt;&lt;/child&gt;</code><br><code>@myevent</code> @ 后面的变量是this.$emit()里面的第一个参数<br><code>handEvent($event)</code> 后面跟的事件名可以随便定义，($event)是固定的写法，用于传值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;div id&#x3D;&quot;app&quot;&gt;<br>       &lt;child @myevent&#x3D;&quot;handEvent($event)&quot;&gt;&lt;&#x2F;child&gt;<br>   &lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure></li><li><p>最关键的一步，在根组件里面定义一个方法函数。函数名为<br><code>@myevent=&quot;handEvent($event)&quot;</code> 后面定义的这个 <code>handEvent</code> 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;&#125;,<br>            methods: &#123;<br>                handEvent(ev) &#123;<br>                    console.log(&#39;父组件收到钱了&#39;, ev);<br>                &#125;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure></li></ol></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>子传父的案例</strong></div><ol><li>具体代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;div id&#x3D;&quot;app&quot;&gt;<br>       &lt;!-- &lt;button @click&#x3D;&quot;isShow &#x3D; !isShow&quot;&gt;按钮&lt;&#x2F;button&gt; --&gt;<br>       &lt;navbar @myevent&#x3D;&quot;handle($event)&quot;&gt;&lt;&#x2F;navbar&gt;<br>       &lt;sidebar v-show&#x3D;&quot;isShow&quot;&gt;&lt;&#x2F;sidebar&gt;<br>   &lt;&#x2F;div&gt;<br>   &lt;script&gt;<br>       Vue.component(&quot;sidebar&quot;, &#123;<br>           template: &#96;&lt;div style&#x3D;&quot;background:red;&quot;&gt;&lt;ul&gt; &lt;li&gt;1111111&lt;&#x2F;li&gt;<br>                &lt;li&gt;1111111&lt;&#x2F;li&gt; &lt;li&gt;1111111&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&#96;<br>       &#125;)<br>       Vue.component(&quot;navbar&quot;, &#123;<br>           template: &#96;&lt;div&gt;&lt;button @click&#x3D;&quot;handleClick&quot;&gt;navbar&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;&#96;,<br>           methods: &#123;<br>               handleClick() &#123;<br>                   this.$emit(&quot;myevent&quot;)<br>               &#125;<br>           &#125;<br>       &#125;)<br>       var vm &#x3D; new Vue(&#123;<br>           el: &#39;#app&#39;,<br>           data: &#123;<br>               isShow: false<br>           &#125;,<br>           methods: &#123;<br>               handle() &#123;<br>                   this.isShow &#x3D; !this.isShow<br>               &#125;<br>           &#125;<br>       &#125;);<br>   &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure></li></ol></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>vue-ref通信</strong></div><ol><li><p>耦合度太高，不经常用，每一个孩子都需要标记一个 ref 引用</p></li><li><p>可以实现子传父，和父传子的使用</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;div id&#x3D;&quot;app&quot;&gt;<br>     &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&quot;mytext&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;<br>     &lt;button @click&#x3D;&quot;handle&quot;&gt;add&lt;&#x2F;button&gt;<br>     &lt;child ref&#x3D;&quot;mychild&quot;&gt;&lt;&#x2F;child&gt;<br> &lt;&#x2F;div&gt;<br> &lt;script&gt;<br>     Vue.component(&quot;child&quot;, &#123;<br>         template: &#96;&lt;div&gt; child&lt;&#x2F;div&gt;&#96;,<br>         data() &#123;<br>             return &#123;<br>                 datas: &#39;子组件的值&#39;<br>             &#125;<br>         &#125;,<br>         methods: &#123;<br>             hand(data) &#123;<br>                 console.log(&quot;子组件的方法&quot;, data);<br>             &#125;<br>         &#125;<br>     &#125;)<br>     var vm &#x3D; new Vue(&#123;<br>         el: &#39;#app&#39;,<br>         data: &#123;&#125;,<br>         methods: &#123;<br>             handle() &#123;<br>                 &#x2F;&#x2F; console.log(&quot;1111&quot;, this.$refs.mytext.value);<br>                 console.log(&quot;1111&quot;, this.$refs.mychild.datas);<br>                 this.$refs.mychild.hand(&quot;孩子听话&quot;);<br>             &#125;<br>         &#125;<br>     &#125;);<br> &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>vue-非父子通信-事件总线</strong></div><ol><li><p>创建一个空的实例对象，中央事件总线<br><code>var bus = new Vue(); // 空的vue实例，中央事件总线</code></p></li><li><p>运用 ref通信</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">template: &#96;&lt;div style&#x3D;&quot;background:blue;&quot;&gt;<br>               我是一个微信公众号作者<br>              &lt;input ref&#x3D;&quot;name&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;<br>                &lt;button @click&#x3D;&quot;handle&quot;&gt;发布&lt;&#x2F;button&gt;<br>                  &lt;&#x2F;div&gt;&#96;,<br>           methods: &#123;<br>               handle() &#123;<br>                   bus.$emit(&quot;weixinmessage&quot;, this.$refs.name.value)<br>               &#125;<br>           &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>bus.$emit(&quot;weixinmessage&quot;, this.$refs.name.value)</code> 发布消息</p></li><li><p>生命周期函数-当前组件 dom 创建完毕就会调用  mounted()<br> <code>bus.$on(&quot;weixinmessage&quot;, ()=&gt;{})</code> 接收发布的消息</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">template: &#96;&lt;div style&#x3D;&quot;background:yellow;&quot;&gt;<br>              我是一个微信用户<br>                &lt;&#x2F;div&gt;&#96;,<br>           mounted() &#123;<br>               bus.$on(&quot;weixinmessage&quot;, (data) &#x3D;&gt; &#123;<br>                   console.log(&quot;收到推送了&quot;, data);<br>               &#125;)<br>               console.log(&quot;生命周期函数-当前组件 dom 创建完毕就会调用&quot;);<br>           &#125;<br></code></pre></td></tr></table></figure><p>总代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;weixinauthor&gt;&lt;&#x2F;weixinauthor&gt;<br>        &lt;weixinuser&gt;&lt;&#x2F;weixinuser&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var bus &#x3D; new Vue(); &#x2F;&#x2F; 空的vue实例，中央事件总线<br>        Vue.component(&quot;weixinauthor&quot;, &#123;<br>            template: &#96;&lt;div style&#x3D;&quot;background:blue;&quot;&gt;<br>                我是一个微信公众号作者<br>               &lt;input ref&#x3D;&quot;name&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;<br>                 &lt;button @click&#x3D;&quot;handle&quot;&gt;发布&lt;&#x2F;button&gt;<br>                   &lt;&#x2F;div&gt;&#96;,<br>            methods: &#123;<br>                handle() &#123;<br>                    bus.$emit(&quot;weixinmessage&quot;, this.$refs.name.value)<br>                &#125;<br>            &#125;<br><br>        &#125;)<br>        Vue.component(&quot;weixinuser&quot;, &#123;<br>            &#x2F;&#x2F; 合适的位置先订阅好 bus.$on<br>            template: &#96;&lt;div style&#x3D;&quot;background:yellow;&quot;&gt;<br>               我是一个微信用户<br>                 &lt;&#x2F;div&gt;&#96;,<br>            mounted() &#123;<br>                bus.$on(&quot;weixinmessage&quot;, (data) &#x3D;&gt; &#123;<br>                    console.log(&quot;收到推送了&quot;, data);<br>                &#125;)<br>                console.log(&quot;生命周期函数-当前组件 dom 创建完毕就会调用&quot;);<br>            &#125;<br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;&#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>Vue动态组件</strong></div><ol><li><p><code>&lt;component&gt;</code> 元素，动态的绑定多个组件到它的 is属性</p></li><li><p><code>&lt;keep-alive&gt;</code> 保留状态，避免重新渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;!-- &lt;home&gt;&lt;&#x2F;home&gt; --&gt;<br>        &lt;keep-alive&gt;<br>            &lt;component :is&#x3D;&quot;who&quot;&gt;&lt;&#x2F;component&gt;<br>        &lt;&#x2F;keep-alive&gt;<br>        &lt;footer&gt;<br>            &lt;ul&gt;<br>                &lt;li&gt; &lt;a @click&#x3D;&quot;who&#x3D;&#39;home&#39;&quot;&gt;首页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>                &lt;li&gt; &lt;a @click&#x3D;&quot;who&#x3D;&#39;list&#39;&quot;&gt;商品页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>                &lt;li&gt; &lt;a @click&#x3D;&quot;who&#x3D;&#39;shopcar&#39;&quot;&gt;购物车&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>            &lt;&#x2F;ul&gt;<br>        &lt;&#x2F;footer&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                who: &quot;home&quot;<br>            &#125;,<br>            methods: &#123;&#125;,<br>            components: &#123;<br>                &quot;home&quot;: &#123;<br>                    template: &#96;&lt;div&gt;home &lt;input type&#x3D;&quot;text&quot; &#x2F;&gt; &lt;&#x2F;div&gt;&#96;<br>                &#125;,<br>                &quot;list&quot;: &#123;<br>                    template: &#96;&lt;div&gt;list&lt;&#x2F;div&gt;&#96;<br>                &#125;,<br>                &quot;shopcar&quot;: &#123;<br>                    template: &#96;&lt;div&gt;shopcar&lt;&#x2F;div&gt;&#96;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure></li></ol></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>Vue-slot 插槽的使用</strong></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;swiper&gt;<br>            &lt;li v-for&#x3D;&quot;data in datalist&quot;&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;li&gt;<br>        &lt;&#x2F;swiper&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        Vue.component(&quot;swiper&quot;, &#123;<br>            template: &#96;&lt;div&gt; &lt;ul&gt; &lt;slot&gt;&lt;&#x2F;slot&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&#96;<br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                datalist: [&quot;111&quot;, &quot;222&quot;, &quot;333&quot;]<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>vue-slot插槽的案例</strong></div><ol><li>插槽里的按钮控制的变量可以直接访问父组件的变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;!-- &lt;button @click&#x3D;&quot;isShow &#x3D; !isShow&quot;&gt;按钮&lt;&#x2F;button&gt; --&gt;<br>        &lt;navbar&gt;<br>            &lt;button @click&#x3D;&quot;isShow&#x3D;!isShow&quot;&gt;navbar&lt;&#x2F;button&gt;<br>        &lt;&#x2F;navbar&gt;<br>        &lt;sidebar v-show&#x3D;&quot;isShow&quot;&gt;&lt;&#x2F;sidebar&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        Vue.component(&quot;sidebar&quot;, &#123;<br>            template: &#96;&lt;div style&#x3D;&quot;background:red;&quot;&gt;&lt;ul&gt; &lt;li&gt;1111111&lt;&#x2F;li&gt;<br>                 &lt;li&gt;1111111&lt;&#x2F;li&gt; &lt;li&gt;1111111&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&#96;<br>        &#125;)<br><br>        Vue.component(&quot;navbar&quot;, &#123;<br>            template: &#96;&lt;div&gt; &lt;slot&gt;&lt;&#x2F;slot&gt; &lt;&#x2F;div&gt;&#96;,<br><br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                isShow: false<br>            &#125;,<br>            methods: &#123;<br><br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure></li></ol></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>具名插槽 slot</strong></div><ol><li>在组件里面给slot一个name<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">template: &#96;&lt;div&gt; &lt;slot name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;slot&gt; child &lt;slot name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;slot&gt; &lt;&#x2F;div&gt; &#96;<br></code></pre></td></tr></table></figure></li><li>在根组件中插槽里面给 slot=”name”来调用相应name的插槽<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;child&gt;<br>           &lt;div slot&#x3D;&quot;a&quot;&gt;aaaaaa&lt;&#x2F;div&gt;<br>           &lt;div slot&#x3D;&quot;b&quot;&gt;bbbbbb&lt;&#x2F;div&gt;<br>       &lt;&#x2F;child&gt;<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;child&gt;<br>            &lt;div slot&#x3D;&quot;a&quot;&gt;aaaaaa&lt;&#x2F;div&gt;<br>            &lt;div slot&#x3D;&quot;b&quot;&gt;bbbbbb&lt;&#x2F;div&gt;<br>        &lt;&#x2F;child&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        Vue.component(&quot;child&quot;, &#123;<br>            template: &#96;&lt;div&gt; &lt;slot name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;slot&gt; child &lt;slot name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;slot&gt; &lt;&#x2F;div&gt; &#96;<br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;&#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>Vue单个元素的过渡</strong></div><ol><li><p>.xxxx-enter-active ,.xxxx-leave-active<br>.bounceaa-enter-active<br>.bounceaa-leave-active</p></li><li><p><code>&lt;transition name=&quot;bounceaa&quot;&gt;</code> </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs plain"> &lt;style&gt;<br>        .bounceaa-enter-active &#123;<br>            animation: bounce-in 5s;<br>        &#125;<br><br>        .bounceaa-leave-active &#123;<br>            animation: bounce-in .5s reverse;<br>        &#125;<br><br>        @keyframes bounce-in &#123;<br>            0% &#123;<br>                transform: scale(0);<br>            &#125;<br><br>            50% &#123;<br>                transform: scale(1.5);<br>            &#125;<br><br>            100% &#123;<br>                transform: scale(1);<br>            &#125;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;button @click&#x3D;&quot;show &#x3D; !show&quot;&gt;Toggle show&lt;&#x2F;button&gt;<br>        &lt;transition name&#x3D;&quot;bounceaa&quot;&gt;<br>            &lt;p v-if&#x3D;&quot;show&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris facilisis enim libero, at<br>                lacinia diam fermentum id. Pellentesque habitant morbi tristique senectus et netus.&lt;&#x2F;p&gt;<br>        &lt;&#x2F;transition&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                show: true<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>vue-多个元素过渡(设置key)</strong></div><p>当有相同标签名的元素切换时，需要通过key特性设置唯一的值来标记以上Vue区分它们，否则Vue为了<br>效率只会替换相同标签内部的内容。<br>mode:in-out 先进来再走<br>mode:out-in 先走再进来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs plain"> &lt;style&gt;<br>        .slide-fade-enter-active &#123;<br>            transition: all .3s ease;<br>        &#125;<br>        .slide-fade-leave-active &#123;<br>            transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);<br>        &#125;<br>        .slide-fade-enter,<br>        .slide-fade-leave-to<br>        &#x2F;* .slide-fade-leave-active for below version 2.1.8 *&#x2F;<br>            &#123;<br>            transform: translateX(10px);<br>            opacity: 0;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;button @click&#x3D;&quot;show &#x3D; !show&quot;&gt;Toggle show&lt;&#x2F;button&gt;<br>        &lt;transition name&#x3D;&quot;slide-fade&quot; mode&#x3D;&quot;in-out&quot;&gt;<br>            &lt;p v-if&#x3D;&quot;show&quot; key&#x3D;&quot;1&quot;&gt;he1llo111111111111111111111&lt;&#x2F;p&gt;<br>            &lt;p v-else key&#x3D;&quot;2&quot;&gt;he1llo111111111111111111111&lt;&#x2F;p&gt;<br>        &lt;&#x2F;transition&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                show: true<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>多个组件的过渡</strong></div><ol><li>用法与单个组件或多个组件的用法差不多，只是在组件外包裹了一层 transition标签</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs plain"> &lt;style&gt;<br>        html,<br>        body &#123;<br>            overflow-y: hidden;<br>        &#125;<br>        .slide-fade-enter-active &#123;<br>            transition: all .3s ease;<br>        &#125;<br>        .slide-fade-leave-active &#123;<br>            transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);<br>        &#125;<br>        .slide-fade-enter,<br>        .slide-fade-leave-to<br><br>        &#x2F;* .slide-fade-leave-active for below version 2.1.8 *&#x2F;<br>            &#123;<br>            transform: translateX(10px);<br>            opacity: 0;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;!-- &lt;home&gt;&lt;&#x2F;home&gt; --&gt;<br>        &lt;transition name&#x3D;&quot;slide-fade&quot;&gt;<br>            &lt;keep-alive&gt;<br>                &lt;component :is&#x3D;&quot;who&quot;&gt;&lt;&#x2F;component&gt;<br>            &lt;&#x2F;keep-alive&gt;<br>        &lt;&#x2F;transition&gt;<br>        &lt;footer&gt;<br>            &lt;ul&gt;<br>                &lt;li&gt; &lt;a @click&#x3D;&quot;who&#x3D;&#39;home&#39;&quot;&gt;首页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>                &lt;li&gt; &lt;a @click&#x3D;&quot;who&#x3D;&#39;list&#39;&quot;&gt;商品页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>                &lt;li&gt; &lt;a @click&#x3D;&quot;who&#x3D;&#39;shopcar&#39;&quot;&gt;购物车&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>            &lt;&#x2F;ul&gt;<br>        &lt;&#x2F;footer&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                who: &quot;home&quot;<br>            &#125;,<br>            methods: &#123;&#125;,<br>            components: &#123;<br>                &quot;home&quot;: &#123;<br>                    template: &#96;&lt;div&gt;home &lt;input type&#x3D;&quot;text&quot; &#x2F;&gt; &lt;&#x2F;div&gt;&#96;<br>                &#125;,<br>                &quot;list&quot;: &#123;<br>                    template: &#96;&lt;div&gt;list&lt;&#x2F;div&gt;&#96;<br>                &#125;,<br>                &quot;shopcar&quot;: &#123;<br>                    template: &#96;&lt;div&gt;shopcar&lt;&#x2F;div&gt;&#96;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>列表过渡(设置key)</strong></div><p><code>&lt;transition-group&gt;</code>不同于 transition，它会以一个真实元素实现:<br>默认为一个 <code>&lt;span&gt;</code>。也可以通过tag 特性更换为其他元素。<br>提供唯一的key属性值</p><ol><li>key的值如果是index的删除的动画永远都是都是从最后开始，那是因为index是从0开始的，<br>我们需要给key 赋值为 id 或者 data<br><code>&lt;li v-for=&quot;(data,index) in datalist&quot; :key=&quot;data&quot;&gt;</code>    </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs plain"> &lt;style&gt;<br>        .bounceaa-enter-active &#123;<br>            animation: bounce-in 1s;<br>        &#125;<br><br>        .bounceaa-leave-active &#123;<br>            animation: bounce-in .5s reverse;<br>        &#125;<br><br>        @keyframes bounce-in &#123;<br>            0% &#123;<br>                transform: scale(0);<br>            &#125;<br><br>            50% &#123;<br>                transform: scale(1.5);<br>            &#125;<br><br>            100% &#123;<br>                transform: scale(1);<br>            &#125;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;mytext&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;&#123;&#123;mytext&#125;&#125;<br>        &lt;button @click&#x3D;&quot;handle&quot;&gt;add&lt;&#x2F;button&gt;<br>        &lt;transition-group tag&#x3D;&quot;ul&quot; name&#x3D;&quot;bounceaa&quot;&gt;<br>            &lt;li v-for&#x3D;&quot;(data,index) in datalist&quot; :key&#x3D;&quot;data&quot;&gt;<br>                &#123;&#123;data&#125;&#125;--&#123;&#123;index&#125;&#125;<br>                &lt;button @click&#x3D;&quot;handledel(index)&quot;&gt;del&lt;&#x2F;button&gt;<br>            &lt;&#x2F;li&gt;<br>        &lt;&#x2F;transition-group&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                mytext: &#39;&#39;,<br>                datalist: []<br>            &#125;,<br>            methods: &#123;<br>                handle() &#123;<br>                    this.datalist.push(this.mytext)<br>                &#125;,<br>                handledel(index) &#123;<br>                    console.log(index);<br>                    this.datalist.splice(index, 1)<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>生命周期</strong></div><ol><li>beforeCreate<br>类型：Function</li></ol><p>详细：</p><p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p><ol start="2"><li>created<br>类型：Function</li></ol><p>详细：</p><p>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，property 和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el property 目前尚不可用。</p><ol start="3"><li>beforeMount<br>类型：Function</li></ol><p>详细：</p><p>在挂载开始之前被调用：相关的 render 函数首次被调用。</p><p>该钩子在服务器端渲染期间不被调用</p><ol start="4"><li>mounted(重点掌握)<br>类型：Function</li></ol><p>详细：</p><p>实例被挂载后调用，这时 el 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。</p><p>注意 mounted 不会保证所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以在 mounted 内部使用 vm.$nextTick：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">mounted: function () &#123;<br>  this.$nextTick(function () &#123;<br>    &#x2F;&#x2F; Code that will run only after the<br>    &#x2F;&#x2F; entire view has been rendered<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>该钩子在服务器端渲染期间不被调用。</p><ol start="5"><li>beforeUpdate<br>类型：Function</li></ol><p>详细：</p><p>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。</p><p>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</p><ol start="6"><li>updated<br>类型：Function</li></ol><p>详细：</p><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p><p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。</p><p>注意 updated 不会保证所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以在 updated 里使用 vm.$nextTick：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">updated: function () &#123;<br>  this.$nextTick(function () &#123;<br>    &#x2F;&#x2F; Code that will run only after the<br>    &#x2F;&#x2F; entire view has been re-rendered<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>该钩子在服务器端渲染期间不被调用。</p><ol start="7"><li>activated<br>类型：Function</li></ol><p>详细：</p><p>被 keep-alive 缓存的组件激活时调用。</p><p>该钩子在服务器端渲染期间不被调用。</p><ol start="8"><li>deactivated<br>类型：Function</li></ol><p>详细：</p><p>被 keep-alive 缓存的组件停用时调用。</p><p>该钩子在服务器端渲染期间不被调用。</p><ol start="9"><li>beforeDestroy<br>类型：Function</li></ol><p>详细：</p><p>实例销毁之前调用。在这一步，实例仍然完全可用。</p><p>该钩子在服务器端渲染期间不被调用。</p><ol start="10"><li>destroyed<br>类型：Function</li></ol><p>详细：</p><p>实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p><p>该钩子在服务器端渲染期间不被调用。</p><ol start="11"><li>errorCaptured</li><li>5.0+ 新增</li></ol><p>类型：(err: Error, vm: Component, info: string) =&gt; ?boolean</p><p>详细：</p><p>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>vue-过滤器(详细解释过程待写)</strong></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;!-- &lt;h1 class&#x3D;&quot;animated hinge infinite&quot;&gt;1111111111111&lt;&#x2F;h1&gt; --&gt;<br><br>    &lt;div id&#x3D;&quot;box&quot;&gt;<br>      &lt;ul&gt;<br>        &lt;li v-for&#x3D;&quot;data in datalist&quot; :key&#x3D;&quot;data.id&quot;&gt;<br>          &lt;h3&gt;&#123;&#123;data.nm&#125;&#125;&lt;&#x2F;h3&gt;<br>          &lt;!-- &lt;img :src&#x3D;&quot;changepath(data.img)&quot;&#x2F;&gt; --&gt;<br><br>          &lt;img :src&#x3D;&quot;data.img | kerwinpath&quot; &#x2F;&gt;<br>        &lt;&#x2F;li&gt;<br>      &lt;&#x2F;ul&gt;<br>    &lt;&#x2F;div&gt;<br><br>    &lt;script&gt;<br>      Vue.filter(&quot;kerwinpath&quot;, function (data) &#123;<br>        return data.replace(&quot;w.h&quot;, &quot;128.180&quot;);<br>      &#125;);<br><br>      new Vue(&#123;<br>        el: &quot;#box&quot;,<br>        data: &#123;<br>          datalist: [],<br>        &#125;,<br>        mounted() &#123;<br>          axios.get(&quot;test.json&quot;).then((res) &#x3D;&gt; &#123;<br>            console.log(res.data);<br>            this.datalist &#x3D; res.data.movieList;<br>          &#125;);<br>        &#125;,<br><br>        methods: &#123;<br>          changepath(path) &#123;<br>            return path.replace(&quot;w.h&quot;, &quot;128.180&quot;);<br>          &#125;,<br>        &#125;,<br>      &#125;);<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>vue-swiper(复用性不好)</strong></div><ol><li>mounted() 状态更新完毕之后 ，未必dom创建完。<br>this.datalist = [“1111”, “2222”, “3333”]并不会立即渲染到页面。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;vue&#x2F;lib&#x2F;swiper.css&quot;&gt;<br>    &lt;script src&#x3D;&quot;..&#x2F;vue&#x2F;lib&#x2F;swiper.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;style&gt;<br>        .swiper-container &#123;<br>            width: 600px;<br>            height: 300px;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div class&#x3D;&quot;swiper-container a&quot;&gt;<br>            &lt;div class&#x3D;&quot;swiper-wrapper&quot;&gt;<br>                &lt;div class&#x3D;&quot;swiper-slide&quot; v-for&#x3D;&quot;data in datalist&quot;&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;div&gt;<br><br><br>            &lt;&#x2F;div&gt;<br>            &lt;!-- Add Pagination --&gt;<br>            &lt;div class&#x3D;&quot;swiper-pagination&quot;&gt;&lt;&#x2F;div&gt;<br>        &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                datalist: []<br>            &#125;,<br>            methods: &#123;&#125;,<br>            mounted() &#123;<br>                setTimeout(() &#x3D;&gt; &#123;<br>                    this.datalist &#x3D; [&quot;1111&quot;, &quot;2222&quot;, &quot;3333&quot;] &#x2F;&#x2F; 状态改完，异步更新dom<br><br>                &#125;, 2000)<br>            &#125;,<br>            updated() &#123;<br>                var swiper &#x3D; new Swiper(&#39;.a&#39;, &#123;<br>                    loop: true,<br>                    pagination: &#123;<br>                        el: &#39;.swiper-pagination&#39;,<br>                    &#125;,<br>                &#125;);<br>            &#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>vue-swiper组件封装</strong></div><ol><li><p>首先子组件的mounted会比父组件的mounted先触发。</p></li><li><p>swiper datalist.length的长度等于0，会依次进行子组件的mounted,父组件的mounted。<br>父组件的mounted把数组渲染完毕后，swiper datalist.length的长度等于3，会重新渲染swiper组件<br>依次进行子组件的mounted,父组件的mounted。这时候子组件的轮播图就可以实现效果了。</p></li><li><p>关键点在于:key=”datalist.length” 的变化，当key的值变化时，会重新创建swiper组件</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;vue&#x2F;lib&#x2F;swiper.css&quot;&gt;<br>    &lt;script src&#x3D;&quot;..&#x2F;vue&#x2F;lib&#x2F;swiper.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;style&gt;<br>        .swiper-container &#123;<br>            width: 600px;<br>            height: 300px;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br><br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;swiper :key&#x3D;&quot;datalist.length&quot;&gt;<br>            &lt;div class&#x3D;&quot;swiper-slide&quot; v-for&#x3D;&quot;data in datalist&quot;&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;div&gt;<br>        &lt;&#x2F;swiper&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        Vue.component(&quot;swiper&quot;, &#123;<br>            template: &#96; &lt;div class&#x3D;&quot;swiper-container a&quot;&gt;<br>            &lt;div class&#x3D;&quot;swiper-wrapper&quot;&gt;<br>              &lt;slot&gt;&lt;&#x2F;slot&gt;<br>            &lt;&#x2F;div&gt;<br>            &lt;!-- Add Pagination --&gt;<br>            &lt;div class&#x3D;&quot;swiper-pagination&quot;&gt;&lt;&#x2F;div&gt;<br>        &lt;&#x2F;div&gt;&#96;,<br>            mounted() &#123;<br>                var swiper &#x3D; new Swiper(&#39;.a&#39;, &#123;<br>                    loop: true,<br>                    pagination: &#123;<br>                        el: &#39;.swiper-pagination&#39;,<br>                    &#125;,<br>                &#125;);<br>            &#125;<br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                datalist: []<br>            &#125;,<br>            methods: &#123;&#125;,<br>            mounted() &#123;<br>                setTimeout(() &#x3D;&gt; &#123;<br>                    this.datalist &#x3D; [&quot;1111&quot;, &quot;2222&quot;, &quot;3333&quot;] &#x2F;&#x2F; 状态改完，异步更新dom<br><br>                &#125;, 2000)<br>            &#125;<br><br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>vue-自定义指令的用法</strong></div><p>自定义指令最核心的用法操作底层dom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br>        &lt;div v-hello&#x3D;&quot;&#39;red&#39;&quot;&gt;111&lt;&#x2F;div&gt;<br>        &lt;div v-hello&#x3D;&quot;&#39;yellow&#39;&quot;&gt;111&lt;&#x2F;div&gt;<br>        &lt;div v-hello&#x3D;&quot;mycolor&quot;&gt;111&lt;&#x2F;div&gt;<br><br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        Vue.directive(&quot;hello&quot;, &#123;<br>            inserted(el, bind) &#123;<br>                &#x2F;&#x2F; console.log(&#39;当前节点插入到父节点了&#39;);<br>                console.log(el, bind);<br>                el.style.background &#x3D; bind.value<br>            &#125;,<br>            &#x2F;&#x2F; 指令的生命周期函数<br>            update(el, bind) &#123;<br>                el.style.background &#x3D; bind.value<br>            &#125;<br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                mycolor: &quot;red&quot;<br>            &#125;,<br>            methods: &#123;&#125;<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>vue-指令轮播</strong></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;<br>    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;<br>    &lt;title&gt;Document&lt;&#x2F;title&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.2.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;vue&#x2F;lib&#x2F;swiper.css&quot;&gt;<br>    &lt;script src&#x3D;&quot;..&#x2F;vue&#x2F;lib&#x2F;swiper.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;style&gt;<br>        .swiper-container &#123;<br>            width: 600px;<br>            height: 300px;<br>        &#125;<br>    &lt;&#x2F;style&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;div id&#x3D;&quot;app&quot;&gt;<br><br>        &lt;div class&#x3D;&quot;swiper-container a&quot;&gt;<br>            &lt;div class&#x3D;&quot;swiper-wrapper&quot;&gt;<br>                &lt;div class&#x3D;&quot;swiper-slide&quot; v-for&#x3D;&quot;(data,index) in datalist&quot; v-swiper&#x3D;&quot;&#123;<br>                    index:index,<br>                    length:datalist.length<br><br>                &#125;&quot;&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;div&gt;<br>            &lt;&#x2F;div&gt;<br>            &lt;!-- Add Pagination --&gt;<br>            &lt;div class&#x3D;&quot;swiper-pagination&quot;&gt;&lt;&#x2F;div&gt;<br>        &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>    &lt;script&gt;<br>        Vue.directive(&quot;swiper&quot;, &#123;<br>            inserted(el, bind) &#123;<br>                console.log(el, bind.value);<br>                if (bind.value.index &#x3D;&#x3D; bind.value.length - 1) &#123;<br>                    var swiper &#x3D; new Swiper(&#39;.a&#39;, &#123;<br>                        loop: true,<br>                        pagination: &#123;<br>                            el: &#39;.swiper-pagination&#39;,<br>                        &#125;,<br>                    &#125;);<br>                &#125;<br>            &#125;<br>        &#125;)<br>        var vm &#x3D; new Vue(&#123;<br>            el: &#39;#app&#39;,<br>            data: &#123;<br>                datalist: []<br>            &#125;,<br>            methods: &#123;&#125;,<br>            mounted() &#123;<br>                setTimeout(() &#x3D;&gt; &#123;<br>                    this.datalist &#x3D; [&quot;1111&quot;, &quot;2222&quot;, &quot;3333&quot;] &#x2F;&#x2F; 状态改完，异步更新dom<br><br>                &#125;, 2000)<br>            &#125;,<br>        &#125;);<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>组件的属性验证</strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>组件的属性验证</strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>组件的属性验证</strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>组件的属性验证</strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>组件的属性验证</strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>组件的属性验证</strong></div></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>组件的属性验证</strong></div></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;VUE复习&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
VUE复习
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="VUE复习" scheme="https://wujun1234567.github.io/categories/VUE%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="VUE学习" scheme="https://wujun1234567.github.io/tags/VUE%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS总复习</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19if000dnkv4d5o8eobf/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19if000dnkv4d5o8eobf/</id>
    <published>2020-12-24T05:24:42.000Z</published>
    <updated>2021-02-01T03:18:49.558Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">CSS总复习</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">CSS总复习</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS的四种引入方式</strong>    <a href="#aa">容器的高度</a></div><p>CSS引入方式：行间样式、内部样式、外部样式、导入外部样式</p><ol><li><p>行间样式：直接在标签上书写样式</p><img src="/image/htmlSummary/20.png" style="width: 1360"></li><li><p>内部样式：在文件的内部书写样式</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;<br>样式内容<br>&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure><img src="/image/htmlSummary/21.png" style="width: 1360"><ol start="3"><li><p>外部样式：（1）先创建一个css文件；（2）再用link标签引入这个文件</p><img src="/image/htmlSummary/22.png" style="width: 1360"></li><li><p>导入外部样式：（1）先创建一个css文件； （2）在style标签中用import导入这个样式文件</p><img src="/image/htmlSummary/23.png" style="width: 1360"></li></ol><ul><li>以上四种CSS引入方式的区别</li></ul><p>行间样式只作用于当前标签；而内部样式作用于当前文件；外部样式可以被多个HTML文件引用<br>实际项目开发中，最好使用外部样式。</p><p>外部样式与import的区别<br><img src="/image/htmlSummary/24.png" style="width: 1360"></p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS选择器</strong></div><p>1) <code>*</code>: 匹配HTML中的所有元素（注意： <code>*</code>的性能差，因为它要匹配所有元素，所以在开发时，不建议使用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>* &#123;<br>color: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>2)标签选择器:用来匹配对应的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>span &#123;<br>font-size:12px;<br>&#125;<br></code></pre></td></tr></table></figure><p>3)类选择器:用来选择class命名的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>.box&#123;<br>color:skyblue<br>&#125;<br></code></pre></td></tr></table></figure><p>4）ID选择器:用来选择用id命名的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>#content &#123;<br>align:center;<br>&#125;<br></code></pre></td></tr></table></figure><p>5）派出选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>.content p &#123;<br>display: inline-block;<br>&#125;<br></code></pre></td></tr></table></figure><p>6）伪类选择器<br>7) 伪元素选择器</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS选择器的分组</strong></div><p>让多个选择器具有相同的样式，一般用于设置公共样式。用逗号隔开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>.box,p,div &#123;<br>background-color : green;<br>&#125;<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>选择器的继承</strong></div><p>子元素可以继承父元素的样式，反之不可以</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS优先级</strong></div><p>多重样式：如果外部样式、内部样式和内联样式同时应用于同一元素，就是使用多重样式的情况。一般<br>情况下，优先级如下：（外部样式）&lt;（内部样式）&lt;（内联样式）</p><p>优先值权：</p><ul><li>!important,加在样式属性值后，权重值为10000</li><li>内联样式，如: style=””,权重值为1000</li><li>ID选择器，如: #content,权重值为100</li><li>类、伪类选择器，属性选择器，如: .content、 :hover权重值为10</li><li>标签选择器，如: div、p权重值为1</li></ul></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS字体</strong></div><p>1）font-size:字号（px/%）<br>2）font-family:字体<br>3）font-style:字体样式(normal/italic/oblique)<br>4）font-weight:文字加粗(normal/bold/bolder/lighter/100-900)<br>5）line-height:行高(px/数字/em等)<br>6）color:文字的颜色(颜色的单词/rgb()/16进制)<br>7）text-decoration:文字修饰(none/underline/overline/line-through)<br>8）text-align:文本的对齐方式(left/right/center)<br>9）text-transform:字母大小写(capitalize/uppercase/lowercase/none)<br>10）text-indent:文本缩进(px/em/%/pt等)</p><p>Tip(技巧)<br>font复合属性：<br>font:font-style  font-variant font-weight font-size/line-height font-family;</p><p>注意:<br>1)属性值得位置顺序<br>2)除了font-size和font-family之外，其他任何一个属性值都可以省略<br>3)font-variant: normal/small-caps(让大写字母变得小一些)</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS背景</strong></div><p>1）background-color:背景色(transparent(透明色)/color)<br>2）background-image:背景图(none/url)<br>3）background-repeat:背景图像铺排方式(repeat/no-repeat/repeat-x/repeat-y)<br>4）background-positon:设置对象的背景图像位置({x-number |top|center|bottom} {y-number|left|center|right})<br>5）background-attachment:背景图像滚动位置(scroll/fixed)<br>6）background:设置背景的复合写法<br>background: color image repeat  attachment position</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS伪类元素选择器</strong></div><p>伪类:专门用来表示元素的一种特殊状态<br>常用的伪类选择器</p><p>1）a标签的伪类：<br>:link(初始a标签的显示)/:visited(a标签访问之后)/:hover(鼠标经过a标签)/:active(激活，也就是点击a标签)<br>2）:focus 获取焦点，常用于表单元素<br>3）:first-child/:last-child/:nth-child(number)</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>属性选择器</strong></div><p>属性选择器<br>[属性名]：包含有指定属性名的元素(常用)<br>[属性名=值]：属性名的值为指定值得元素(常用)<br>[属性名<code>~</code>=值]：属性名的值包含指定值得元素<br>[属性名^=值]：属性名的值以指定值的开头的元素<br>[属性名$=值]：属性名的值以指定值得结尾的元素</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>关系选择器</strong></div><p>1)空格: 后代选择器<br>2)&gt;: 只选择儿子元素<br><strong>3)+: 紧邻的兄弟选择器 (重要)</strong><br>2 的字体颜色为红色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;style&gt;<br>       ul li+p &#123;<br>           color: red;<br>       &#125;<br>   &lt;&#x2F;style&gt;<br><br>  &lt;ul&gt;<br>&lt;li&gt;1&lt;&#x2F;li&gt;<br>&lt;p&gt;2&lt;&#x2F;p&gt;<br>&lt;p&gt;3&lt;&#x2F;p&gt;<br>&lt;p&gt;4&lt;&#x2F;p&gt;<br>&lt;p&gt;5&lt;&#x2F;p&gt;<br> &lt;&#x2F;ul&gt;<br></code></pre></td></tr></table></figure><p><strong>3)~: 后面所有的兄弟选择器 (重要)</strong><br>2,3,4,5 的字体颜色为红色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;style&gt;<br>       ul li+p &#123;<br>           color: red;<br>       &#125;<br>   &lt;&#x2F;style&gt;<br><br>  &lt;ul&gt;<br>&lt;li&gt;1&lt;&#x2F;li&gt;<br>&lt;p&gt;2&lt;&#x2F;p&gt;<br>&lt;p&gt;3&lt;&#x2F;p&gt;<br>&lt;p&gt;4&lt;&#x2F;p&gt;<br>&lt;p&gt;5&lt;&#x2F;p&gt;<br> &lt;&#x2F;ul&gt;<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS伪元素选择器</strong></div><p>伪元素：<br>:before/:after/:first-letter(第一个字)/:first-line(第一行):前面可以是1一个冒号也可以是双冒号。<br>::selection/::placeholder/::backdrop :前面只能是双冒号</p><p>CSS伪元素和伪类的区别<br><img src="/image/htmlSummary/25.png" style="width: 1360"></p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS浮动以及清除浮动的三种方法</strong></div><ol><li><p>什么是浮动<br>浮动就是让块级标签不独占一行，目的(使用场景)：把块级标签元素可以排在一行上</p></li><li><p>浮动的原理<br>就是让元素脱离文档流，不占有标准流<br>解释一下什么叫标准流：</p></li><li><p>float的属性值<br>left:左浮动<br>right:右浮动<br>none:默认值，不浮动</p></li><li><p>浮动后，后面的元素不管是块级还是行级元素，不会显示在一行</p></li><li><p>清除浮动<br>目的：让后面的元素自动掉到下一行<br>方法：<br>1)添加空标签，并设置样式：clear:both;<br>clear:left;   清除左浮动<br>clear:right;  清除右浮动<br>clear:both;   清除左右浮动<br>clear:none;   左右浮动都不清除</p></li></ol><img src="/image/htmlSummary/26.png" style="width: 1360"><p>2)在要清除浮动的父级添加样式: overflow:hidden;<br>overflow:hidden;  超出部分隐藏，也可以用来实现清除浮动</p><img src="/image/htmlSummary/27.png" style="width: 1360"><p>3)在要清除浮动的父级添加伪类元素，并设定的样式:<br>父元素: after {<br>    content: “”;<br>    display: block;<br>    clear: both;<br>}</p><img src="/image/htmlSummary/28.png" style="width: 1360"><p><strong>在开发中我们常用 overflow: hidden;</strong></p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS盒子模型</strong></div><p>每一个元素都是一个盒子，一个盒子由margin（外边距），border(边框线)，padding(内边距)和content（内容）组成。</p><p>区别外边距和内边距是以边框为参照。</p><p>系统默认外边距为8px</p><p>1)外边距（margin）：指元素边框线之外的距离。<br>margin-left:左边距<br>margin-right:右边距<br>margin-top:上边距<br>margin-bottom:下边距</p><p>margin：可用来设置任意一个边的边距，可带1至4个参数</p><p>1个（apx）:表示上下左右都有这样的外边距apx<br>2个（apx bpx）:表示上下外边距为apx,左右外边距为bpx<br>3个（apx bpx cpx）:表示上外边距，下外边距cpx，左右外边距bpx<br>4个（apx bpx cpx dpx）:表示上为apx,右为bpx,下为cpx,左为dpx</p><p>2)内边距（padding）:指元素的文本内容与边框之间的距离<br>它的用法与margin完全一样</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>diplay属性</strong></div><p>display属性：用来设置元素的显示方式<br>属性值<br>none:不显示元素<br>block:块显示，在元素前后设置换行符。目的:将行级标签转换为块级标签（因为行级标签不识别宽高，<br>而块级标签识别，转换后，行级标签也可以设置宽高）<br>inline:行内显示，将块级标签转换为行级标签<br>inline-block:将块级或行级标签转换为行内块级标签</p><p><strong>display:table-cell的妙用</strong><br>我们想要实现这个垂直居中和水平居中的效果<br><img src="/image/htmlSummary/29.png" style="width: 1360"></p><p>实际代码<br><img src="/image/htmlSummary/30.png" style="width: 1360"></p><br/><strong>display:table和display:table-cell实现单行，多行文本垂直居中</strong><p>需要实现如下图所示的效果<br>一个栏目的信息标题有长有短，短的一行，长的两行，但都要求垂直居中<br><img src="/image/htmlSummary/31.png" style="width: 1360"><br><img src="/image/htmlSummary/32.png" style="width: 1360"></p><p>实际代码<br><img src="/image/htmlSummary/33.png" style="width: 1360"></p><p>如果父元素不加display:table，实际效果如图所示<br><img src="/image/htmlSummary/34.png" style="width: 1360"></p><div style="color: red; font-weight: 700">    发现一个小问题，如果一个元素写了display: table-cell;然后又写了 margin: 100px auto;这个 margin: 100px auto; 是不会有作用的</div></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>table样式</strong></div><p>table一般不用来布局，主要用于来格式化数据<br>属性：<br>width:宽度<br>height:高度<br>border-collapse:collapse; 单线边框<br>border:边框线</p><p>td,tr 属性:</p><p>width:宽度<br>height:高度<br>border:边框线<br>text-aligin:文本左右对齐（left（默认）/center/right）<br>vertical-align:文本垂直对齐（top/middle(默认)bottom）</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>列表样式</strong></div><p>列表样式：不是描述性的文本的任何内容都可以认为是列表。比如：菜单、商品列表等<br>1）列表类型<br>无序（ul）、有序（ol）和自定义列表（dl）。<br>ul和ol的列表项都是用li表示的，而dl是由一个dt和一个或者多个dd组成的。<br>dl一般用来设定一个定义，比如名词解释等。dt:标题，dd:描述，用来对dt的内容进行解释并说明的。<br>2）样式（用来修饰标识类型）<br>list-style-image:用图像表示标识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">list-style-image&#x2F;list-style: url(&quot;图片路径&quot;)<br>将li前面的小圆点变成图片<br></code></pre></td></tr></table></figure><p>list-style-position:标识的位置(inside/outside(默认值))</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">list-style-position&#x2F;list-style:outside  默认不变<br>list-style-position&#x2F;list-style:inside  小圆点离文字有点距离<br></code></pre></td></tr></table></figure><p>list-style-type:标识的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">list-style-type&#x2F;list-style:none  取消小圆点<br></code></pre></td></tr></table></figure><p>简写：list-type: list-style-image list-style-position list-style-type;<br>list-type的值可以按任意顺序列出，而且可以任意省略，只要提供一个值，其它的都自动默认。</p><p>list-style-type的属性值：<br>a）无序<br>disc(默认的)/circle/aquare</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">list-style-type&#x2F;list-style:disc 实心小圆点<br>list-style-type&#x2F;list-style:circle 空心小圆点<br></code></pre></td></tr></table></figure><p>b）有序<br>decimal（默认的1,2,3）/decimal-leading-zero（01,02,03）/lower-roman（小写罗马）/upper-roman（大写罗马）/lower-alpha（小写字母）/upper-alpha（大写字母）/<br>lower-greek/lower-latin/upper-latin</p><p>有序和无序：<br>none</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>轮播图</strong></div><p>轮播图<br>作用：主要用于产品或公司相关宣传。<br>组成：<br>1)轮播的组图（至少两张以上，不能太多）<br>2)控制器<br>3)计数器</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>CSS定位</strong></div><ol><li><p>定位(position)<br>设定元素在文档中的位置，会将标签(元素)转换为块级。</p></li><li><p>定位分类（属性值）</p></li></ol><p>1)static:静态定位</p><div style="text-indent:2em">    默认值，没有定位，不能设置偏移值(left/top/right/bottom)占用标准流(文档流)</div><p>2)relative:相对定位</p><div style="text-indent:2em">    占用标准流(文档流)，它会出现在文档流中它该出现的位置。可以通过设置偏移值改变其位置。它相对自身所占的位置做偏移。</div><p>3)absolute:绝对定位</p><div style="text-indent: 2em">    脱离文档流，相对于body做偏移绝对定位一般与相对定位结合使用，它相对的父级是relative定义的元素做偏移，relative的元素必须是absolute的父级。在项目开发中，一般使用relative+absolute结合使用。</div><p>4)fixed:固定定位</p><div style="text-indent: 2em">    脱离文档流，相对于浏览器窗口左上角（0,0）做偏移，它与relative设定的对象没有关系，也就是说它跟父级的定位没有任何的关系。一般在开发中用来固定导航栏。</div><ol start="3"><li>z-index<div style="text-indent:2em"> 当多个元素添加绝对定位，元素将会叠加在一起，使用z-index可以设置元素显示的层次。 文档流默认的z-index的值是0. 用在static和relative元素上是无效的。</div></li></ol></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>网站开发策略</strong></div><p>网站开发策略：先整体再局部，至顶向下，逐步细化</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>双飞翼布局</strong></div><p><strong>双飞翼布局：由三列组成，两端固定，中间自适应</strong></p><p>双飞翼布局的优点：<br>(1)兼容性好，兼容所有主流浏览器，包括万恶的IE6<br>(2)因为在DOM中center_panel在三列结构的最前面，因此可以实现主要内容的优先加载。</p><p>效果图展示<br><img src="/image/htmlSummary/01.gif" style="width: 1360"></p><p>实际代码<br><img src="/image/htmlSummary/35.png" style="width: 1360"></p><p>难理解的部分就是<br>margin-left=-100% ; margin-left=-300px<br>双飞翼布局的左右两侧是叠加到中间的部分上面的</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>圣杯布局</strong></div><p>圣杯布局：<br>由三列组成，两端固定，中间自适应。外观与双飞翼布局一样。<br>布局时与双飞翼比增加了定位和偏移设置。</p><p>效果图展示<br><img src="/image/htmlSummary/02.gif" style="width: 1360"></p><p>实际代码<br><img src="/image/htmlSummary/36.png" style="width: 1360"></p><p>难理解的部分就是<br>padding: 0 200px ; position:relative</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>两栏布局</strong></div><p>1)左侧固定，右侧自适应布局<br>效果图展示<br><img src="/image/htmlSummary/03.gif" style="width: 1360"></p><p>实际代码<br><img src="/image/htmlSummary/37.png" style="width: 1360"></p><p>难理解的部分：<br>  margin-right: -150px;<br>  position: relative;</p><p>2)左侧自适应，右侧固定</p><p>效果图展示<br><img src="/image/htmlSummary/04.gif" style="width: 1360"></p><p>实际代码<br><img src="/image/htmlSummary/38.png" style="width: 1360"></p><p>难理解的部分：<br> margin-left: -150px;</p><p>3)左侧固定，右侧固定</p><p>效果图展示<br><img src="/image/htmlSummary/05.gif" style="width: 1360"></p><p>实际代码<br><img src="/image/htmlSummary/39.png" style="width: 1360"></p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>三栏布局</strong></div><p>1)左右两侧固定，中间自适应的布局</p><p>效果图展示<br><img src="/image/htmlSummary/06.gif" style="width: 1360"></p><p>实际代码<br><img src="/image/htmlSummary/40.png" style="width: 1360"></p><p>2)左自适应的布局  右侧中间固定</p><p>效果图展示<br><img src="/image/htmlSummary/07.gif" style="width: 1360"></p><p>实际代码<br><img src="/image/htmlSummary/41.png" style="width: 1360"></p><p>难以理解的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain">.right &#123;<br>           float: right;<br>           height: 200px;<br>           width: 150px;<br>           line-height: 200px;<br>       &#125;<br><br>       .left &#123;<br>           width: 100%;<br>           float: left;<br>           margin-right: -300px;<br>           background-color: lightgreen;<br>       &#125;<br></code></pre></td></tr></table></figure><p>3)左侧中间固定，右侧适应的布局</p><p>效果图展示<br><img src="/image/htmlSummary/08.gif" style="width: 1360"></p><p>实际代码<br><img src="/image/htmlSummary/42.png" style="width: 1360"></p><p>难以理解的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain">.content &#123;<br>       margin-left: 400px;<br>   &#125;<br><br>   .right &#123;<br>       float: right;<br>       width: 100%;<br>       height: 200px;<br>       line-height: 150px;<br>       background-color: mediumblue;<br>       margin-left: -400px;<br>   &#125;<br></code></pre></td></tr></table></figure></p><hr><p id="aa"  style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>BFC规范</strong></div><p>5.BFC&amp;IFC<br>FC:Fomatting Context(格式上下文)。它是CSS2.1规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。分为:BFC和IFC。<br>1)BFC:块级格式上下文<br>a）形成BFC的条件<br>i)浮动元素（float除none以外的值)<br>ii）定位元素（position(absolute/fixed))<br>iii) display（值为inline-block/table-cell/table-caption时)<br>iv) overflow（值为hidden/auto/scroll时)</p><p>b）BFC特性<br>i)内部的盒子会在垂直方向上一个接一个的放置<br>ii)垂直方向上的距离会叠加，值由最大margin值决定（如果不要叠加，就需要将该盒子变成一个独立的盒子<br>iii)BFC的区域不会float元素区域重叠<br>iv)计算BFC的高度时，浮动元素也参与计算<br>v)BFO就是页面上的一个独立的容器，容器里面的子元素不会影响到外面的元素</p><p>c）BFC的作用<br>i)解决margin重叠的问题（添加独立BFC）<br>ii)解决浮动高度塌陷的问题（在父级添加overflow: hidden)<br>iii)解决侵占浮动元素的问题（添加overflow:hidden清除浮动)</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>IFC规范</strong></div><p>2) IFC:内联（行级）格式上下文<br>a）形成IFC的条件<br>i)font-size<br>ii)line-height<br>iii) height<br>iv)vertical-align<br>b）IFC特性（规则)<br>i)IFC的元素会在一行中从左至右排列<br>ii)在一行上的所有元素会在该区域形成一个行框<br>iii)行宽的高度为包含框的高度，高度为行框中最高元素的高度<br>iv)浮动的元素不会在行框中，并且浮动元素会压缩行框的宽度<br>v)行框的宽度容纳不下子元素时，子元素会换下一行显示，并且会产生新行框<br>vi)行框的元素内遵循text-align和vertical-align</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>容器的高度</strong></div><p>height = line-height  + vertical-align</p></p><hr></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;CSS总复习&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
CSS总复习
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="CSS复习" scheme="https://wujun1234567.github.io/categories/CSS%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="CSS学习" scheme="https://wujun1234567.github.io/tags/CSS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>HTML总复习</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19jq0013nkv4gqwz3i2j/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19jq0013nkv4gqwz3i2j/</id>
    <published>2020-12-22T08:14:08.000Z</published>
    <updated>2020-12-23T16:21:14.049Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">HTML总复习</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">HTML总复习</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>动态网页和静态网页</strong></div><ol><li>静态网页：HTML代码和内容书写完毕之后，页面的内容和显示效果基本就不会变化了。</li><li>动态网页：页面代码虽然没有变化，但是显示的内容却是可以随着时间、环境或者数据库操作的结果而发生改变的。</li></ol><p><strong>注意： 不要将动态网页和页面内容是否有动画效果混为一谈，比如网页中幻灯片效果，文字滚动效果。<br>如果内容本身没有发生变化，那么也属于静态网页。</strong></p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>五大主流浏览器</strong></div><ol><li>Internet Explorer (IE)</li><li>FireFox(火狐)</li><li>Chrome(谷歌)</li><li>Opera(欧朋)</li><li>Safari(苹果)</p></li></ol><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>HTML结构的样式</strong></div><img src="/image/htmlSummary/01.png" style="width: 1360"><img src="/image/htmlSummary/02.png" style="width: 1360"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>基本标签</strong></div><ol><li>div标签 <code>&lt;div&gt;&lt;/div&gt;</code></li><li>hx(x = 1-6)标题标签 <code>&lt;h1&gt;&lt;/h1&gt;</code></li><li>p段落标签 <code>&lt;p&gt;&lt;/p&gt;</code></li><li>br换行标签 <code>&lt;br&gt;</code></li><li>hr水平线标签,起修饰作用 <code>&lt;hr color=&quot;red&quot; width=&quot;50%&quot; height=&quot;2px&quot; align=&quot;center&quot;&gt;</code></li><li>a标签实现链接跳转<code>&lt;a href=&quot;&quot; title=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;</code></li><li>img加载外部图片<code>&lt;img src=&quot;&quot; alt=&quot;&quot; title=&quot;&quot;&gt;</code></li><li>span作用和div一样，用来布局，div是块级元素，span是行内元素（内联）</li><li>ul/ol列表标签，前者是无序的，后者是有序的。<code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code> <code>&lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt;</code></p></li></ol><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>标签属性</strong></div><ol><li>通常由属性名=”属性值”组成</li><li>起附加信息作用。</li><li>不是所有的标签都有属性，比如 br 标签<br><code>&lt;p title=&quot;段落&quot; class=&quot;content&quot; id=&quot;content&quot;&gt;&lt;/p&gt;</code></p></li></ol><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>文本格式化标签</strong></div><ol><li>b和strong:都有加粗的作用，都是行级标签，但是strong除了加粗还有强调作用。</li><li>i和em标签:使文字倾斜，都是行级标签，em具有<code>强调作用</code>，如果只是简单的倾斜效果用i标签就好了，比如添加图标等。</li><li>pre预格式化文本，保留换行和空格及宽度，文字的字号会小一号（块级标签）<code>&lt;pre&gt;&lt;/pre&gt;</code></li><li>small和big:分别让文字缩小一号，或者放大一号（行级标签）。big在HTML5中淘汰了，但是并没有删除，在开发中尽量不使用 <code>&lt;small&gt;&lt;/small&gt;</code>  <code>&lt;big&gt;&lt;/big&gt;</code></li><li>sub和sup:设置文本为下标和上标，用来调整文本正常现实的基线。且文字会自动小一号<br><code>&lt;sub&gt;&lt;/sub&gt;</code>  <code>&lt;sup&gt;&lt;/sup&gt;</code><br><code>注：强调主要用于SEO时，便于提升网站优化的排名</code></p></li></ol><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>单双标签</strong></div><ul><li><p>单标签(单标签后面加反斜杠，养成良好的习惯)<br>换行符: <code>&lt;br/&gt;</code><br>水平线: <code>&lt;hr/&gt;</code><br>图片标签: <code>&lt;img src=&quot;&quot;/&gt;</code><br>文本标签: <code>&lt;input type=&quot;&quot; name=&quot;&quot;/&gt;</code><br>link标签: <code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&quot;/&gt;</code><br>元信息标签: <code>&lt;meta charset=&quot;utf-8&quot;/&gt;</code></p></li><li><p>双标签<br><code>&lt;div&gt;&lt;/div&gt;</code><br><code>&lt;span&gt;&lt;/span&gt;</code><br><code>&lt;h1&gt;&lt;/h1&gt;</code><br><code>&lt;table&gt;&lt;/table&gt;</code><br><code>&lt;title&gt;&lt;/title&gt;</code><br><code>&lt;head&gt;&lt;/head&gt;</code></p></li></ul></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>HTML实体转义</strong></div>在HTML中，内容编辑时，如果是通过空格键编辑的多个空格，网页只会显示成一个，而小于号（<）和大于号(>)，网站则会认为是标签而无法直接显示在页面中。而这些都可以通过实体字符来解决。<table><thead><tr><th align="left">实体字符</th><th align="left">编译后字符</th></tr></thead><tbody><tr><td align="left"><code>&amp;lt;</code></td><td align="left">小于号(&lt;)</td></tr><tr><td align="left"><code>&amp;gt;</code></td><td align="left">大于号(&gt;)</td></tr><tr><td align="left"><code>&amp;amp;</code></td><td align="left">与号(&amp;)</td></tr><tr><td align="left"><code>&amp;nbsp;</code></td><td align="left">空格</td></tr><tr><td align="left"><code>&amp;copy;</code></td><td align="left">版权符号</td></tr><tr><td align="left"><code>&amp;times;</code></td><td align="left">乘号(x)</td></tr><tr><td align="left"><code>&amp;divide;</code></td><td align="left">除号</td></tr></tbody></table></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>块级元素和行内元素</strong></div><p>&lt;一&gt;块级元素（相当于执行了display:block;操作）<br>1）独占一行<br>2）宽度和高度是可控的，如果没有设置其宽度，将默认铺满整行<br>3）其内可以包括块级和行级元素<br><code>&lt;p style=&quot;width: 300px; height: 300px;display: line &quot;&gt;块级标签转行级标签&lt;/p&gt;</code></p><p>&lt;一&gt;行级元素（相当于执行了display:line;操作）<br>1）不会独占一行，与相邻的行级元素占同一行，知道行占满，会自动掉到下一行<br>2）宽度和高度是不可控的<br>3）其内可以包括行级元素</p><p><code>&lt;span style=&quot;width: 300px; height: 300px;display: block &quot;&gt;行级标签转块级标签&lt;/span&gt;</code></p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>W3C标准</strong></div><p>W3C又称万网联盟</p><p>W3C标准有结构标准、表现标准、形为标准三部分组成。</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>标签嵌套规则</strong></div><ol><li>块级元素可以包含内联元素或者某些块级元素，但是内联元素却不能包含块级元素，它只能包含内联元素。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>&lt;div&gt;&lt;h1&gt;&lt;&#x2F;h1&gt;&lt;p&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;------对<br>&lt;a href&#x3D;&quot;#&quot;&gt; &lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;---对<br> &lt;span&gt; &lt;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;span&gt;-------错<br></code></pre></td></tr></table></figure><ol start="2"><li>块级元素不能放在<code>&lt;p&gt;</code>里面</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>&lt;p&gt;&lt;ol&gt;&lt;li&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ol&gt;&lt;&#x2F;p&gt;--错<br>&lt;p&gt;&lt;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;---------错<br></code></pre></td></tr></table></figure><ol start="3"><li>有几个特殊的块级元素只能包含内嵌元素，不能再包含块级元素，这几个是：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain"> <br>h1 h2 h3 h4 h5 h6 p dt<br></code></pre></td></tr></table></figure><ol start="4"><li>块级元素和块级元素并列、内嵌元素与内嵌元素并列(XHTMLStrict中这样使用，HTML5中可以随便写的)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>&lt;div&gt;&lt;h1&gt;&lt;&#x2F;h1&gt;&lt;p&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;----------------对<br>&lt;div&gt; &lt;a href&#x3D;&quot;#&quot;&gt;&lt;&#x2F;a&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;--对<br>&lt;div&gt;&lt;h1&gt;&lt;&#x2F;h1&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;----------错<br></code></pre></td></tr></table></figure><p><strong>第四点需要注意:<br>XHTMLStrict是一个很严格的标准，现在不是很常用，甚至可以认为已经被弃用了。<br>目前主流的HTML5的规则是：随便写。</strong></p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>HTML语义化标签</strong></div><img src="/image/htmlSummary/03.png" style="width: 1360"><img src="/image/htmlSummary/04.png" style="width: 1360"><img src="/image/htmlSummary/05.png" style="width: 1360"><img src="/image/htmlSummary/06.png" style="width: 1360"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>文件命名规范</strong></div><table><thead><tr><th align="left">页面</th><th align="left">命名规范</th></tr></thead><tbody><tr><td align="left">首页</td><td align="left">index.html</td></tr><tr><td align="left">公司介绍</td><td align="left">about.html</td></tr><tr><td align="left">新闻列表</td><td align="left">news.html</td></tr><tr><td align="left">新闻详情页</td><td align="left">news_details.html</td></tr><tr><td align="left">产品列表</td><td align="left">product.html</td></tr><tr><td align="left">产品详情页</td><td align="left">pro_details.html</td></tr><tr><td align="left">联系我们</td><td align="left">contact.html</td></tr></tbody></table></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>标签通用属性</strong></div><ol><li><p>标签是由标签名、标签属性、和文本内容三部分组成（单标签没有文本内容）</p></li><li><p>标签属性是对标签的一种描述方式</p></li><li><p>标签属性分为通用属性、自有属性和自定义属性</p></li><li><p>通用属性:所有标签都具有的属性</p><pre style="color: skyblue">    通用属性有：       id：用来给标签取一个唯一的名称。id名称在一个网页必须是唯一的。       class：用来给标签取一个类名。       style：用来设置该标签的行内样式。       title: 当鼠标移到该标签，所显示的提示内容。</pre></li><li><p>自定义属性标签属性：通常用来传值或用于图片懒加载等方面<br>格式： data-*<br><code>&lt;img data-src=&quot;图片名&quot; alt=&quot;提示文本&quot;&gt;</code><br><code>&lt;p data-id=&quot;goodsid&quot;&gt;....&lt;/p&gt;</code></p></li></ol><hr><div style="text-align: center; color: red">    <strong>table标签</strong></div><ol start="6"><li>table主要用于呈现格式化数据。表格是由行和列组成<br>格式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>&lt;table&gt;<br>&lt;tr&gt;<br>&lt;th&gt;&lt;&#x2F;th&gt;  &#x2F;&#x2F; th:表头，主要用于对下面的内容起说明作用，th的内容会自动加粗和居中显示<br>&lt;td&gt;&lt;&#x2F;td&gt;<br>....<br>&lt;&#x2F;tr&gt;<br>.....<br>&lt;&#x2F;table&gt;<br></code></pre></td></tr></table></figure><ol start="7"><li>table属性<br>border：表格边框，默认单位是像素<br>width：表格宽度，默认单位是像素<br>align：表格的对齐方式（left(默认)/center/right）<br>cellpadding:单元格文本与边框的距离<br>cellspacing:单元格边框间距</li></ol></li></ol><img src="/image/htmlSummary/07.png" style="width: 1360"><ol start="8"><li>表格的rowspan和colspan合并单元格属性的使用</li></ol><p>rowspan：跨行合并（row：一行）<br>rowspan=”2” 合并单元格的个数<br>align:水平方向移动<br>valign:垂直方向移动 top/middle/bottom<br><img src="/image/htmlSummary/08.png" style="width: 1360"></p><p>  colspan：跨列合并<br>  colspan=”2” 合并单元格的个数<br>  valign:垂直方向移动 top/middle/bottom</p><img src="/image/htmlSummary/09.png" style="width: 1360"><ol start="9"><li><p>完整表格组成：caption（标题）、thead（表头）、tbody（标体）和tfoot（表尾）四部分组成</p></li><li><p>form表单标签是所有标签最核心标签之一。它是用来实现前后端交互的一个重要标签。<br>常用属性：<br>name：表单名称<br>action：表单数据提交的地方（通常是一个后台文件名(.jsp/.php)，或者网址）如果是#表示当前文件下。<br>method：前端提交数据到后端的方法，主要有：get和post，默认时get。</p></p></li></ol><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>input标签</strong></div><p>1）input类：主用于来输入，选择或发出指令。<br>type：text/password/radio/checkbox/file/button/image/submit/reset</p><p>a:text:单行文本输入框 type=”text”可以不写，默认值<br>属性： placeholder(提示)/name(命名)/minlength和maxlength(最少/多输入的字符个数)<br>/disable(失效)/readonly(只读)/value(默认值)/pattern(正则匹配)</p><p>b:password:密码框  属性与text一样</p><p>c:radio:单选按钮，通常是两项以上，多选一。常用属性有：name（必须要有）/value/checked(选中)<br>/disable(失效)/readonly(只读)</p><p>name的值要相同才可以多选一<br><img src="/image/htmlSummary/10.png" style="width: 1360"></p><p>d:checkbox:复选框，可以用来选择0选、1项或者多项。<br>常用属性有：name（必须要有/disable(失效)/readonly(只读)</p><p>name的值要相同才可以多选多<br><img src="/image/htmlSummary/11.png" style="width: 1360"></p><p>e:file:文件上传按钮<br><img src="/image/htmlSummary/12.png" style="width: 1360"></p><p>f:button:普通按钮，通常用它去调用脚本代码。<br>常用属性有：value（按钮的标题）/disable（失效）<br><img src="/image/htmlSummary/13.png" style="width: 1360"></p><p>g:image:图片按钮，用法与button一样。有一个特殊属性：src（用来加载提示图片，用它替换了value）<br>它有提交功能，与submit功能一样。<br><img src="/image/htmlSummary/14.png" style="width: 1360"></p><p>h:submit:提交按钮，用来将表单数据提交到后台。<br>常用属性有：value(按钮的标题)/disable(失效)<br><img src="/image/htmlSummary/15.png" style="width: 1360"></p><p>j:reset:重置按钮，将表单所有组件输入的内容全部清空，还原为初始状态。<br>常用属性有：value（按钮的标题）/disable(失效)<br><img src="/image/htmlSummary/16.png" style="width: 1360"></p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>textarea类</strong></div>文本域（也可以叫多行文本框），主要用于输入大批量的内容常用属性有：name/id/cols(列数)/rows(行数)/placeholder/minlength/maxlength/required(必须输入)/value<img src="/image/htmlSummary/17.png" style="width: 1360"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>select类</strong></div><p>下拉列表框，默认为用于单项选择，用于option呈现每一个选项<br>mltiple属性：表示可以多选，这时的下拉列表框变成了列表框<br>size：最多显示的行数</p><img src="/image/htmlSummary/18.png" style="width: 1360"></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>button类</strong></div>普通按钮，具有提交功能。可以单独使用，不写在form元素中；如果写在form中，有提交功能。<img src="/image/htmlSummary/19.png" style="width: 1360"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;HTML总复习&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
HTML总复习
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="HTML复习" scheme="https://wujun1234567.github.io/categories/HTML%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="HTML学习" scheme="https://wujun1234567.github.io/tags/HTML%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>ES6语法学习</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19je000unkv4gsr78i19/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19je000unkv4gsr78i19/</id>
    <published>2020-12-21T11:47:46.000Z</published>
    <updated>2021-01-31T13:21:32.713Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">ES6语法学习</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">ES6语法学习</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align:center; color: red">es6数组合并arr1 = [...arr1,...arr2] | push()</div><p>push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度，不是创建一个新的数组，而是在<code>原数组</code>上修改。<br>注意：该方法会改变数组的长度。<br>unshift() 方法可向数组的开头添加一个或多个元素。<br><a href="Array.prototype.push()">官方细解Array.prototype.push()</a></p><p>ES6方法 arr1 = […arr1,…arr2]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F;合并两个数组<br>var arr1&#x3D; [1,2,3]<br>var arr2&#x3D; [4,5,6]<br>arr1.push(...arr2) &#x3D;  arr1 &#x3D; [...arr1,...arr2]<br><br>arr1.push(...arr2)&#x2F;&#x2F;或者arr1 &#x3D; [...arr1,...arr2]<br></code></pre></td></tr></table></figure><hr><div style="text-align:center; color: red">es6数组去重Array.from()和new Set()的用法</div><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener">官方细解Array.from()</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener">官方细解Array.from()</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F;去重<br>let arr &#x3D; [12,12,45,97,9797,564,134,45642]<br>let set &#x3D; new Set(arr)   &#123;12,45,97,9797,564,134,4562&#125;  &#x2F;&#x2F;去重<br>console.log(Array.from(set))  &#x2F;&#x2F; [ 12, 45, 97, 9797, 564, 134, 45642 ]<br><br>let arr &#x3D; [12,12,45,97,9797,564,134,45642]<br>let arr3 &#x3D; Array.from(new Set(arr1))   &#x2F;&#x2F;let arr3 &#x3D; [...new Set(arr1)]<br></code></pre></td></tr></table></figure><p>Array.from()和new Set()的用法详解</p><p><code>Array.from()方法就是将一个类数组对象或者可遍历对象转换成一个真正的数组。</code><br>那么什么是类数组对象呢？所谓类数组对象，最基本的要求就是具有length属性的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">let arrayLike &#x3D; &#123;<br>    0: &#39;tom&#39;, <br>    1: &#39;65&#39;,<br>    2: &#39;男&#39;,<br>    3: [&#39;jane&#39;,&#39;john&#39;,&#39;Mary&#39;],<br>    &#39;length&#39;: 4<br>&#125;<br>let arr &#x3D; Array.from(arrayLike)<br>console.log(arr) &#x2F;&#x2F; [&#39;tom&#39;,&#39;65&#39;,&#39;男&#39;,[&#39;jane&#39;,&#39;john&#39;,&#39;Mary&#39;]]<br></code></pre></td></tr></table></figure><p>那么，如果将上面代码中length属性去掉呢？实践证明，答案会是一个长度为0的空数组。</p><p>这里将代码再改一下，就是具有length属性，但是对象的属性名不再是数字类型的，而是其他字符串型的，代码如下：<br>1、将类数组对象转换为真正数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">let arrayLike &#x3D; &#123;<br>    &#39;name&#39;: &#39;tom&#39;, <br>    &#39;age&#39;: &#39;65&#39;,<br>    &#39;sex&#39;: &#39;男&#39;,<br>    &#39;friends&#39;: [&#39;jane&#39;,&#39;john&#39;,&#39;Mary&#39;],<br>    length: 4<br>&#125;<br>let arr &#x3D; Array.from(arrayLike)<br>console.log(arr)  &#x2F;&#x2F; [ undefined, undefined, undefined, undefined ]<br></code></pre></td></tr></table></figure><p>会发现结果是长度为4，元素均为undefined的数组</p><p>由此可见，要将一个类数组对象转换为一个真正的数组，必须具备以下条件：</p><ul><li>1、该类数组对象必须具有length属性，用于指定数组的长度。如果没有length属性，那么转换后的数组是一个空数组。</li><li>2、该类数组对象的属性名必须为数值型或字符串型的数字</li><li>ps: 该类数组对象的属性名可以加引号，也可以不加引号</li></ul><p>2、将Set结构的数据转换为真正的数组：<br><code>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">let arr &#x3D; [12,12,45,97,9797,564,134,45642]<br>let set &#x3D; new Set(arr)   &#123;12,45,97,9797,564,134,4562&#125;  &#x2F;&#x2F;去重<br>console.log(Array.from(set))  &#x2F;&#x2F; [ 12, 45, 97, 9797, 564, 134, 45642 ]<br></code></pre></td></tr></table></figure><p>3.　Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">let arr &#x3D; [12,45,97,9797,564,134,45642]<br>let set &#x3D; new Set(arr)<br>console.log(Array.from(set, item &#x3D;&gt; item + 1)) &#x2F;&#x2F; [ 13, 46, 98, 9798, 565, 135, 45643 ]<br></code></pre></td></tr></table></figure><p>将字符串转换为数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain"> let  str &#x3D; &#39;hello world!&#39;;<br>console.log(Array.from(str)) &#x2F;&#x2F; [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot; &quot;, &quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;, &quot;!&quot;]<br></code></pre></td></tr></table></figure><p>4、Array.from参数是一个真正的数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">console.log(Array.from([12,45,47,56,213,4654,154]))<br></code></pre></td></tr></table></figure><p>像这种情况，Array.from会返回一个一模一样的新数组</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>let声明及声明特性</strong></div><p><strong>声明变量</strong><br>let a;<br>let b,d,f;<br>let h=100;<br>let m=100,c=’ninn’,w=[];</p><ol><li><p>let变量不能重复声明 var 可以<br>let star = ‘罗志祥’;<br>let star = ‘小猪’; </p></li><li><p>块级作用域 全局 函数 eval<br>if else while for<br>{<br> let girl = ‘女’;<br>}<br>console.log(girl); </p></li><li><p>不存在变量提升<br>console.log(a);<br>let a=100;</p></li><li><p>不影响作用域链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#123;<br> let school &#x3D; &quot;青学&quot;<br> function fn()&#123;<br>     console.log(schoo) &#x2F;&#x2F;打印青学<br>       &#125;<br>      fn();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>var 和 let 的区别</strong></p><p>var :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">for (var i &#x3D; 0; i &lt; 2; i++) &#123;<br>    items[i].onclick &#x3D; function () &#123;<br>        items[i].style.background &#x3D; &quot;pink&quot;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>var没有块级作用域相当于执行以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#123;<br>var i&#x3D;0<br>&#125;<br><br>&#123;<br>var i&#x3D;1<br>&#125;<br><br>&#123;<br>var i&#x3D;2<br> items[i].onclick &#x3D; function () &#123;<br>                items[i].style.background &#x3D; &quot;pink&quot;<br>            &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>let:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">for (let i &#x3D; 0; i &lt; 2; i++) &#123;<br>         items[i].onclick &#x3D; function () &#123;<br>             items[i].style.background &#x3D; &quot;pink&quot;<br>         &#125;<br>     &#125;<br></code></pre></td></tr></table></figure><p>let具有块级作用域相对于执行下列代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#123;<br>let i&#x3D;0<br> items[0].onclick &#x3D; function () &#123;<br>                items[0].style.background &#x3D; &quot;pink&quot;<br>            &#125;<br>&#125;<br><br>&#123;<br>let i&#x3D;1<br>items[1].onclick &#x3D; function () &#123;<br>                items[1].style.background &#x3D; &quot;pink&quot;<br>            &#125;<br><br>&#125;<br><br>&#123;<br>let i&#x3D;2<br> items[2].onclick &#x3D; function () &#123;<br>                items[2].style.background &#x3D; &quot;pink&quot;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>let防止循环变量变成全局变量<br>let具有块级作用域<br>let变量不能重复声明<br>let不存在变量提升</p><p>let声明的变量具有暂时性死区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plain"> &lt;script&gt;<br>   var num &#x3D; 10<br>   if (true) &#123;<br>     console.log(num);  &#x2F;&#x2F;打印报错<br>     let num &#x3D; 10;<br>   &#125;<br> &lt;&#x2F;script&gt;<br><br>&lt;script&gt;<br>   var num &#x3D; 10<br>   if (true) &#123;<br>     console.log(num);  &#x2F;&#x2F;打印10<br>     let a &#x3D; 10;<br>   &#125;<br> &lt;&#x2F;script&gt;<br><br>  &lt;script&gt;<br>   var num &#x3D; 10<br>   if (true) &#123;<br>     console.log(num);  &#x2F;&#x2F;打印10<br>   &#125;<br> &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><hr></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>const声明及声明特性</strong></div><p><strong>声明变量</strong></p><ul><li><p>具有块级作用域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  if (true) &#123;<br>    const num &#x3D; 10;<br>  &#125;<br>  console.log(num); &#x2F;&#x2F; undefined<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure></li><li><p>声明常量必须赋值</p></li><li><p>常量赋值后，值不能修改（声明常量。常量就是值（内存地址）不能变化的量）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">const PI &#x3D; 3.14<br>PI &#x3D; 100 ; &#x2F;&#x2F; 报错<br><br>const arr &#x3D; [100,200]<br>arr[0] &#x3D; &#39;a&#39;;<br>arr[1] &#x3D; &#39;b&#39;;<br>console.log(arr); &#x2F;&#x2F; [&#39;a&#39;,&#39;b&#39;] 没有报错是没有修改内存地址，<br>arr &#x3D; [&#39;a&#39;,&#39;b&#39;] &#x2F;&#x2F;报错，因为修改了内存地址<br></code></pre></td></tr></table></figure></li></ul></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>var let const 的总结</strong></div><p>var 不存在作用域 可以变量提升<br>let 存在作用域， 不可以变量提升 暂时性死区<br>const 具有作用域 声明变量必须赋值，常量赋值后不能修改</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>解构赋值</strong></div><p><strong>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</strong></p><p>数组解构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">let [a,b,c] &#x3D; [1,2,3]<br>console.log(a) &#x2F;&#x2F; 1<br>console.log(b) &#x2F;&#x2F; 2<br>console.log(c) &#x2F;&#x2F; 3<br></code></pre></td></tr></table></figure><p>如果解构不成功，变量的值为undefined</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">let [foo] &#x3D; []  <br>console.log(foo)  &#x2F;&#x2F; 打印 undefined<br><br>let [bar , foo] &#x3D; [1];<br>console.log(bar)&#x2F;&#x2F;打印 1 <br>console.log(foo)&#x2F;&#x2F;打印 undefined<br></code></pre></td></tr></table></figure><p>对象解构</p><p>对象解构允许我们使用变量的名字匹配对象的属性，匹配成功将对象属性的值赋值给变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plain">let person &#x3D; &#123;<br>name: &#39;zs&#39;,<br>age: 18,<br>sex: &#39;男&#39;<br> &#125;;<br>let &#123;name,age,sex&#125; &#x3D; person;<br>console.log(name)  &#x2F;&#x2F; 打印&#39;zs&#39;<br>console.log(age)   &#x2F;&#x2F;打印 18<br>console.log(sex)   &#x2F;&#x2F;打印 男<br><br><br>let person &#x3D; &#123;<br>name: &#39;zs&#39;,<br>age: 18,<br>sex: &#39;男&#39;<br> &#125;;<br>let &#123;name: myname,age: myage,sex: mysex&#125; &#x3D; person;<br>console.log(myname)  &#x2F;&#x2F; 打印&#39;zs&#39;<br>console.log(myage)   &#x2F;&#x2F;打印 18<br>console.log(mysex)   &#x2F;&#x2F;打印 男<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>箭头函数</strong></div><p><strong>箭头函数是用来简化函数定义语法的</strong></p><blockquote><p>()=&gt;{}<br>const fn = ()=&gt;{}</p></blockquote><p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">const sum &#x3D; (num1,num2)&#x3D;&gt; num1+num2;<br></code></pre></td></tr></table></figure><p>在箭头函数中，如果形参只有一个，形参外侧的小括号也是可以省略的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">const fn &#x3D; v&#x3D;&gt;&#123;<br>console.log(v) &#x2F;&#x2F;打印 20<br>&#125;<br>fn(20)<br></code></pre></td></tr></table></figure><p>箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">function fn ()&#123;<br>console.log(this); &#x2F;&#x2F;打印的是 &#123;name:&#39;zs&#39;&#125;<br>return ()&#x3D;&gt;&#123;<br>console.log(this)  &#x2F;&#x2F;打印的是 &#123;name:&#39;zs&#39;&#125;<br>&#125;<br>&#125;<br>const obj &#x3D; &#123;name: &#39;zs&#39;&#125;<br>fn.call(obj);<br></code></pre></td></tr></table></figure><p>箭头函数的面试题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plain">var obj &#123;<br>age : 20<br>say: ()&#x3D;&gt;&#123;<br>alert(this.age) &#x2F;&#x2F;弹出 undefined<br>&#125;<br>&#125;<br>obj.say()<br><br>对象是没有作用域的，所以箭头函数定义在全局作用域下，也就是window里面。<br><br>var age &#x3D; 100；<br>var obj &#123;<br>age : 20<br>say: ()&#x3D;&gt;&#123;<br>alert(this.age) &#x2F;&#x2F;弹出 100<br>&#125;<br>&#125;<br>obj.say()<br>window.age &#x3D; 100<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"> <div style="text-align: center; color: red">    <strong>剩余参数</strong></div><p><strong>剩余参数语法允许我们将一个不定数量的参数表示为一个数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">function sum (first, ...args)&#123;<br>console.log(first); &#x2F;&#x2F; 10<br>console.log(args); &#x2F;&#x2F; [20,30]<br>&#125;<br>sum(10,20,30)<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">const sum &#x3D; (...args)&#x3D;&gt;&#123;<br>let total &#x3D; 0;<br>args.forEach(item&#x3D;&gt;total+&#x3D;item);<br>return total;<br>&#125;<br><br><br>console.log(sum(10,20))<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>剩余参数和解构配合使用</strong></div><p><strong></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">let arr1 &#x3D; [&#39;zs&#39;,&#39;ww&#39;,&#39;ls&#39;]<br>let [a1,...a2 ] &#x3D; arr1<br>console.log(a1) &#x2F;&#x2F;打印 &#39;zs&#39;<br>console.log(a2) &#x2F;&#x2F;打印 [&#39;ww&#39;,&#39;ls&#39;]<br></code></pre></td></tr></table></figure></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>Array扩展的方法</strong></div><p><strong>扩展运算符可以将数组拆分成以逗号分隔的参数序列</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">let arr &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]<br>...arr &#x2F;&#x2F; &#39;a&#39;,&#39;b&#39;,&#39;c&#39;<br>console.log(...arr)  &#x2F;&#x2F; a b c<br>console.log(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) &#x2F;&#x2F; a b c<br></code></pre></td></tr></table></figure><p>扩展运算符可以应用于合并数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">方法一<br>let arr1 &#x3D; [1,2,3];<br>let arr2 &#x3D; [4,5,6];<br>let arr3 &#x3D; [...arr1,...arr2]; &#x2F;&#x2F; [1,2,3,4,5,6]<br><br>方法二<br>let arr1 &#x3D; [1,2,3];<br>let arr2 &#x3D; [4,5,6];<br>let arr1.push(...arr2)<br>console.log(arr1)  &#x2F;&#x2F; [1,2,3,4,5,6]<br></code></pre></td></tr></table></figure><p>将伪数组转换成真正的数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">var arr1 &#x3D; 伪数组<br>var ary &#x3D; [...arr1]<br>ary.push(&#39;a&#39;)<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>构造函数方法: Array.from()</strong></div><p><strong>将伪数组或可遍历对象转换为真正的数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  let obj &#x3D; &#123;<br>    0: &quot;a&quot;,<br>    1: &quot;b&quot;,<br>    length: 2,<br>  &#125;;<br>  let arr &#x3D; Array.from(obj);<br>  console.log(arr);  &#x2F;&#x2F;) [&quot;a&quot;, &quot;b&quot;]<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>Array.from()方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理。<br>将处理后的值放入返回的数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">var arr1 &#x3D; &#123;<br>&quot;0&quot;: 1,<br>&quot;1&quot;: 2,<br>&quot;length&quot;: 2<br>&#125;<br>var arr2 &#x3D; Array.from(arr1,item&#x3D;&gt;item*2)<br>console.log(arr2) &#x2F;&#x2F; [2,4]<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>Array的拓展方法：find方法</strong></div><p><strong>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">let ary &#x3D;[&#123;<br>id:1,<br>name:&#39;zs&#39;<br>&#125;,&#123;<br>id:2,<br>name:&#39;ls&#39;<br>&#125;]<br>let target &#x3D; ary.find((item,index)&#x3D;&gt;item.id &#x3D;&#x3D; 2  )<br>console.log(target)  &#x2F;&#x2F; object  &#123;id:2,name:&#39;ls&#39;&#125;<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>Array的拓展方法：findIndex方法</strong></div><p><strong>用于找出第一个符合条件的数组成员位置，如果没有找到返回-1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">let ary &#x3D; [1,5,10,15]<br>let index &#x3D; ary.findIndex((value,index)&#x3D;&gt;value&gt;9 )<br>console.log(index)  &#x2F;&#x2F; 2<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>Array的拓展方法：includes方法</strong></div><p><strong>表示某一个数组是否包含给定的值，返回布尔值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">[1,2,3].includes(2)  &#x2F;&#x2F; true<br>[1,2,3].includes(4)  &#x2F;&#x2F; false<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>String的扩展方法模板字符串</strong></div><p><strong>模板字符中可以解析变量</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">let name &#x3D; &#39;我的名字是&#39;<br>let names &#x3D; &#96;$&#123;name&#125;张三&#96;<br>console.log(names)<br></code></pre></td></tr></table></figure><p><strong>模板字符中可以换行</strong></p><p><strong>模板字符中可以调用函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">const fn &#x3D; ()&#x3D;&#123;<br>return &#39;我是函数&#39;<br>&#125;<br>let html &#x3D; &#96;我是模板字符串 $&#123;fn ()&#125;&#96;<br>console.log(html) &#x2F;&#x2F; 我是模板字符串 我是函数<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>String的扩展方法startsWith()和endsWith()</strong></div><strong>startsWith(): 表示参数字符串是否在原字符串的头部，返回布尔值    endsWith(): 表示参数字符串是否在原字符串的尾部，返回布尔值    </strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">let str &#x3D; &#39;Hello world!&#39;<br>str.startsWith(&#39;Hello&#39;) &#x2F;&#x2F; true<br>str.endsWith(&#39;!&#39;) &#x2F;&#x2F; true<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>String的扩展方法repeat()</strong></div><p><strong>repeat方法表示将原字符串重复n次，返回一个新的字符串</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#39;x&#39;.repeat(3) &#x2F;&#x2F; &#39;xxx&#39;<br>&#39;hello&#39;.repear(2) &#x2F;&#x2F; &#39;hellohello&#39;<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong>set数据结构</strong></div><p><strong>ES6提供了新的数据结构Set,它类似于数组，但是成员的值都是唯一的，没有重复的值。</strong><br>Set 本身是一个构造函数，用来生成Set数据结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">const s &#x3D; new Set()<br></code></pre></td></tr></table></figure><p>Set函数可以接受一个数组作为参数，用来初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">const set &#x3D; new Set([1,2,3,4,4,4,4])<br>console.log(set.size) &#x2F;&#x2F; 4<br></code></pre></td></tr></table></figure><p><strong>Set 数组去重的方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;script&gt;<br>  const set &#x3D; new Set([1, 2, 3, 4, 4, 4])<br>  let ary &#x3D; [...set]<br>  console.log(ary);   &#x2F;&#x2F; [1,2,3,4]<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p><strong>Set实例方法</strong></p><p>Set 是一个对象</p><ul><li>add(value): 添加某个值，返回Set结构本身</li><li>delete(value): 删除某个值，返回一个布尔值，表示删除是否成功</li><li>has(value): 返回一个布尔值，表示该值是否为Set的成员</li><li>clear(): 清除所有成员，没有返回值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">const s &#x3D; new Set();   <br>s.add(&#39;a&#39;).add(&#39;b&#39;).add(&#39;c&#39;); &#x2F;&#x2F;向set结构中添加值<br>s.delete(&#39;a&#39;)                &#x2F;&#x2F;删除set结构中的 &#39;a&#39;值<br>s.has(&#39;c&#39;)                  &#x2F;&#x2F;表示set结构是否有 &#39;c&#39; 返回布尔值<br>s.clear()                  &#x2F;&#x2F;清除set结构中的所有值<br></code></pre></td></tr></table></figure><p><strong>Set遍历</strong><br>Set结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">const s &#x3D; new Set([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]);<br>s.forEach(value&#x3D;&gt;&#123;<br>console.log(value)  &#x2F;&#x2F; a  b  c<br>&#125;)<br></code></pre></td></tr></table></figure></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong></strong></div><p><strong></strong></p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong></strong></div><p><strong></strong></p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center; color: red">    <strong></strong></div><p><strong></strong></p></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;ES6语法学习&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
ES6语法学习
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
      <category term="ES6语法学习" scheme="https://wujun1234567.github.io/categories/ES6%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ES6语法" scheme="https://wujun1234567.github.io/tags/ES6%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>黑马商城vue</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19rk00atnkv483m414js/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19rk00atnkv483m414js/</id>
    <published>2020-12-16T14:57:42.000Z</published>
    <updated>2020-12-17T08:09:06.566Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">黑马商城vue</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">黑马商城vue</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><h2 style="text-align: center">第一天学习内容</h2>1.项目的初始化 <br>2.项目初始化到远程仓库<br>3.项目托管到码云中<br>4.登录与退出功能的实现<br>5.登录前的预验证<br>6.根据预验证是否发起请求(token)<br>7.登录成功与登录失败的弹窗提示<br>8.路由导航守卫控制访问权限<br>9.退出功能实现原理<br>10.提交登录功能代码<hr><h3 style="text-align: center;">初始化到远程仓库</h3>1.操作流程如下图所示<img src="/image/git/01.png"><br><img src="/image/git/02.png"><br><img src="/image/git/03.png"><br><img src="/image/git/04.png"><br><img src="/image/git/05.png"><br><img src="/image/git/06.png"><br><img src="/image/git/07.png"><br><img src="/image/git/08.png"><br><img src="/image/git/09.png"><br><img src="/image/git/10.png"><br><img src="/image/git/11.png"><br><hr><h3 style="text-align: center;">提交登录功能代码</h3><h6 style="color: red">1.操作流程如下图所示<br>把源代码提交到云端仓储中进行保存，同时我们也将login分支保存到云端仓储中<br>今后只要是写的源代码经过测试之后没问题，一定要先合并到主分支，然后再将主分支提交到云端仓<br>库中，同时要将新建的子分支一并推送到云端的仓库中</h6><img src="/image/git/12.png"><br><img src="/image/git/13.png"><br><img src="/image/git/14.png"><br><img src="/image/git/15.png"><br><img src="/image/git/16.png"><br><img src="/image/git/17.png"><br><img src="/image/git/18.png"><br><img src="/image/git/19.png"><br> <img src="/image/git/20.png"><br><img src="/image/git/21.png"><br><img src="/image/git/22.png"><br></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;黑马商城vue&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
黑马商城vue
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>cookie-token-session</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19q6007rnkv49qh73vfc/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19q6007rnkv49qh73vfc/</id>
    <published>2020-12-16T06:01:39.000Z</published>
    <updated>2020-12-16T06:13:25.370Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">cookie-token-session</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">cookie-token-session</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p>HTTP是无状态的，无法识别用户的身份</p><ul><li>通过cookie在客户端记录状态</li><li>通过session在服务端记录状态</li><li>通过token方式维持状态</li></ul><p>1.不跨域时，我们可以通过cookie和session结合来识别用户的登录状态的<br>2.跨域处理时，通过token的方式来维持登录状态</p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p><b>token登录原理的分析图解</b><br><img src="/image/token/01.png"></p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;cookie-token-session&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
cookie-token-session
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>bootstrap项目的解析</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19q2007gnkv453gcbdrn/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19q2007gnkv453gcbdrn/</id>
    <published>2020-12-15T10:03:09.000Z</published>
    <updated>2020-12-21T12:19:15.119Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>bootstrap项目上传到码云</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19q5007pnkv4g3wka0bu/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19q5007pnkv4g3wka0bu/</id>
    <published>2020-12-15T09:43:26.000Z</published>
    <updated>2020-12-15T11:02:46.139Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1856413370,456944799&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">bootstrap项目上传到码云</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">第一个bootstrap的项目，最近完成并且上传到了码云，记录一下上传的路径。</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px">准备工作：  需要下载git软件    需要码云注册账号 <br>git 可以把我们的本地网站提交上传到远程仓库（码云 gitee）里面类似以前的ftp<br>码云就是远程仓库,类似服务器 <br></p><p style="text-indent: 2em;color: red;font-size: 13px"><b>1:码云创建新的仓库。   bootstrap项目</b><img src="/image/mayunpush/01.png"><br><br><br><br><b>2:点进来之后，如图操作 ，创建完创库后</b><img src="/image/mayunpush/02.png"><img src="/image/mayunpush/03.png"><br><br><br><br><b>3:利用git 提交 把本地网站提交到 码云新建的仓库里面</b><br>在网站根目录右键– Git Bash Here<img src="/image/mayunpush/04.png"><p><code>如果是第一次利用git提交，请配置好全局选项</code><br>在如下图所示的界面输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git config --global user.name &quot;用户名&quot;<br>git config --global user.email &quot;你的邮箱地址&quot;<br></code></pre></td></tr></table></figure><img src="/image/mayunpush/05.png"><ul><li><p>不是第一次的不话，依次输入以下命令符（第一次的话，输入上面的命令后，还需继续输入以下命令）</p></li><li><p>初始化仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git init<br></code></pre></td></tr></table></figure></li><li><p>把本地文件放到暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git add .<br></code></pre></td></tr></table></figure></li><li><p>把本地文件放到本地仓库里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git commit -m &#39;提交bootstarp项目&#39;<br></code></pre></td></tr></table></figure></li><li><p>链接远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git remote add origin 你新建的仓库地址<br></code></pre></td></tr></table></figure><p><code>你新建的仓库地址</code>在你创建仓库后会跳到这个界面有 <code>你新建的仓库地址</code><br>仓库地址在下图的位置</p><img src="/image/mayunpush/06.png"></li></ul><p>最后输入这个命令符</p><ul><li>把本地仓库的文件推送到远程仓库 push<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git push -u origin master<br></code></pre></td></tr></table></figure></li></ul><p>推送完毕后，我们在这个网页进行刷新<br><img src="/image/mayunpush/07.png"></p><p>可以看到所有的项目文件都上传到码云了<br><img src="/image/mayunpush/08.png"></p><p><strong>到这一步，我就把项目文件传送码云上面了</strong></p><hr><br><br><br><b>码云部署发布静态网站</b><br>在当前仓库中，点击  “服务”   菜单 选择 Gitee Pages<img src="/image/mayunpush/09.png">进来之后，我们可以点击启动即可<br><br><img src="/image/mayunpush/11.png"><p>会生成一个网址，我们进去网址就可以看到我们写的静态界面<br><br><br><br><br><img src="/image/mayunpush/10.png"></p><p><strong>但是，1个小时内，只能上传 20个以内的文件， 前端人员，git必备技能</strong></p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1856413370,456944799&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;bootstrap项目上传到码云&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
第一个bootstrap的项目，最近完成并且上传到了码云，记录一下上传的路径。
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue案例解说</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19qh008ankv46505041a/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19qh008ankv46505041a/</id>
    <published>2020-12-12T06:13:11.000Z</published>
    <updated>2020-12-19T13:57:46.687Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: #CCFF99;"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">vue案例解说</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">用来加强自己的vue学习</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p><strong>vue Tab栏切换案例</strong><br>具体效果如下图所示:<br><img src="/image/vueanli/01.gif"></p><p>具体代码如下<br><img src="/image/vueanli/01.png"></p><p>案例总结</p><div style="color: red"><ol><li>用到了v-for循环 list 的数组，:key=’item.id’</li><li>用到了@click=”change(index)” 把数组里面的 index 拿到，通过（index）传参给 点击函数</li><li>通过绑定类名属性 用三元表达式给 button 和 div 分别添加背景颜色和 display:block 的类名。</li><li>最重要的是 currentIndex 的设置，然后用change函数通过 this.currentIndex=index 重新赋值。</div></p></li></ol><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p><strong>vue 跑马灯案例</strong><br>具体效果如下图所示:<br><img src="/image/vueanli/02.gif"><br>具体代码如下<br><img src="/image/vueanli/02.png"></p><p>案例总结：</p><div style="color: red"><ol><li>用到了定时器函数 setInterval(function(){}，1000) </li><li>用到了substring()截图字符。</li><li>if (this.intervalId != null) return; 是为了防止<code>连续按下按钮</code>一直触发跑马灯（定时器函数）</li><li>this.intervalId = null; 是为了防止按下<code>低调的按钮</code>，停止跑马灯后，再次按下浪起来<br><code>跑马灯不继续跑起来</code>。</div></li></ol></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p><strong>vue 图书管理</strong><br>总体的具体效果如下图所示:<br><img src="/image/vueanli/03.gif"><br>在讲解案列之前我要写一些关于vue数组方法的笔记<br><strong>变更方法</strong><br>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：</p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><p><strong>替换数组</strong><br>变更方法，顾名思义，会变更调用了这些方法的原始数组。相比之下，也有非变更方法，例如 filter()、concat() 和 slice()。它们不会变更原始数组，而总是返回一个新数组。当使用非变更方法时，可以用新数组替换旧数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">example1.items &#x3D; example1.items.filter(function (item) &#123;<br>  return item.message.match(&#x2F;Foo&#x2F;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的启发式方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。<br><a href="https://cn.vuejs.org/v2/guide/list.html#变更方法" target="_blank" rel="noopener">VUE官方详情解释链接</a></p><p><strong>修改响应式数据</strong><br><img src="/image/vueanli/03.png"><br>这两个方法既可以修改数组也可以修改对象<br>具体代码如下图所示<br><img src="/image/vueanli/04.png"></p><p>具体功能实现：<br><strong>第一步添加图书的功能</strong><br>效果图如图所示:<br><img src="/image/vueanli/04.gif"><br>具体现实代码如图所示<br><img src="/image/vueanli/05.png"></p><p>案例总结：</p><div style="color: red"><ol><li>v-model的双向数据绑定 </li><li>v-for数组数据的循环</li><li>@click=’handle’点击事件的绑定</li><li>注意事项：<code>&lt;a href=&quot;&quot; @click.prevent&gt;</code>修改</a><br>   事件绑定时，可以只添加修饰符，而不绑定事件函数,防止点击 修改 页面刷新</li><li>点击提交按钮触发 methods </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">handle: function()&#123;<br>         &#x2F;&#x2F; 添加图书<br>         var book &#x3D; &#123;&#125;;<br>         book.id &#x3D; this.id;  &#x2F;&#x2F;将输入框输入的 ID 给 book对象<br>         book.name &#x3D; this.name; &#x2F;&#x2F;将输入框输入的 name 给 book对象<br>         book.date &#x3D; &#39;&#39;;  &#x2F;&#x2F; 日期暂时设为空<br>         this.books.push(book); &#x2F;&#x2F; 把对象book push 到books数组里面<br>         &#x2F;&#x2F; 添加图书后，然后清空输入框表单<br>         this.id &#x3D; &#39;&#39;;<br>         this.name &#x3D; &#39;&#39;;<br>       &#125;<br></code></pre></td></tr></table></figure><p><strong>JavaScript push() 方法</strong></p><p>实例<br>数组中添加新元素：<br><code>var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</code><br><code>fruits.push(&quot;Kiwi&quot;)</code><br>fruits 结果输出：<br><code>Banana,Orange,Apple,Mango,Kiwi</code></p><p>添加一个以上元素<br><code>var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</code><br><code>fruits.push(&quot;Kiwi&quot;,&quot;Lemon&quot;,&quot;Pineapple&quot;)</code><br>以上实例将输出<br><code>Banana,Orange,Apple,Mango,Kiwi,Lemon,Pineapple</code></p></div><div style="color: blue"><p>定义和用法<br>push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。<br>注意： 新元素将添加在数组的末尾。<br>注意： 此方法改变数组的长度。<br>提示： 在数组起始位置添加元素请使用 unshift() 方法。</p><p><strong>第二步修改图书的功能</strong><br>效果图如图所示:<br><img src="/image/vueanli/05.gif"><br>具体现实代码如图所示<br><img src="/image/vueanli/06.png"></p></div>案例总结：<div style="color: red"><ol><li>数组索引的传递  @click.prevent=’toEdit(item.id)</li><li>filter的使用</li><li>some的使用</li><li>flag配置disable禁用按钮的使用</li><li>箭头函数的this指向问题</div><div style="color: blue">filter() 方法创建一个新副本，其包含通过所提供的功能实现的测试的所有元素。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">const words &#x3D; [&#39;spray&#39;, &#39;limit&#39;, &#39;elite&#39;, &#39;exuberant&#39;, &#39;destruction&#39;, &#39;present&#39;];<br><br>const result &#x3D; words.filter(word &#x3D;&gt; word.length &gt; 6);<br><br>console.log(result);<br>&#x2F;&#x2F; expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]<br></code></pre></td></tr></table></figure><p>语法</p><blockquote><p>var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])</p></blockquote><p>参数<br>callback<br><code>返回true表示该元素通过测试，保留该元素，false则不保留。</code>它接受以下三个参数：<br>element<br>斑点中当前正在处理的元素。<br>index任选<br>正在处理的元素在细分中的索引。<br>array任选<br>称为了filter的本身。<br>thisArg任选<br>执行callback时，用于this的值。</p><p>返回值<br>一个新的，由通过测试的元素组成的副本，如果没有任何细分元素通过测试，则返回空数组。<br><a  style="color: red" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#返回值" target="_blank" rel="noopener">官方细解filter() 方法</a></p><p>Array.prototype.some（）</p><p>some() 方法测试枚中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个布尔类型的值</p><blockquote><p>注意：如果用一个空副本进行测试，在任何情况下它返回的都是false。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">const array &#x3D; [1, 2, 3, 4, 5];<br><br>&#x2F;&#x2F; checks whether an element is even<br>const even &#x3D; (element) &#x3D;&gt; element % 2 &#x3D;&#x3D;&#x3D; 0;<br><br>console.log(array.some(even));<br>&#x2F;&#x2F; expected output: true<br></code></pre></td></tr></table></figure><p>语法</p><blockquote><p>arr.some(callback(element[, index[, array]])[, thisArg])</p></blockquote><p>参数<br>callback<br>用来测试每​​个元素的函数，接受三个参数：<br>element<br>斑点中正在处理的元素。<br>index 任选<br>斑点中正在处理的元素的索引值。<br>array任选<br>some()被调用的副本。<br>thisArg任选<br>执行callback时使用的 this 值。</p><p>返回值<br>斑点中有至少一个元素通过替代函数的测试就会返回true；所有元素都没有通过串行函数的测试返回值才会为false</p><p><a  style="color: red" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">官方细解some() 方法</a></p><p><strong>第三步删除图书的功能</strong><br>效果图如图所示:<br><img src="/image/vueanli/06.gif"><br>具体现实代码如图所示<br><img src="/image/vueanli/07.png"></p></div>案例总结：<div style="color: red"><ol><li>findIndex（）方法的调用和splice结合进行删除数组。</li><li>filter() 方法的如果是true返回保留该元素。</li></ol></div><div style="color: blue">Array.prototype.findIndex（）该findIndex()方法返回满足提供的测试功能的数组中<b>第一个元素的索引</b>。否则，返回，表明没有元素通过测试。-1<p><code>const array1 = [5, 12, 8, 130, 44];</code><br><code>const isLargeNumber = (element) =&gt; element &gt; 13;</code><br><code>console.log(array1.findIndex(isLargeNumber));</code><br><code>// expected output: 3</code></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex" target="_blank" rel="noopener">官方细解findIndex() 方法</a></p><p>Array.prototype.find（）<br>该find()方法返回提供的数组中满足提供的测试功能的<b>第一个元素的值</b>。如果没有值满足测试功能，undefined则返回。</p><p><code>const array1 = [5, 12, 8, 130, 44];</code><br><code>const found = array1.find(element =&gt; element &gt; 10);</code><br><code>console.log(found);</code><br><code>// expected output: 12</code></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find" target="_blank" rel="noopener">官方细解find() 方法</a></p><p>Array.prototype.splice（）<br>该splice()方法通过删除或替换现有元素和/或在适当位置添加新元素来更改数组的内容。</p><p><code>const months = [&#39;Jan&#39;, &#39;March&#39;, &#39;April&#39;, &#39;June&#39;];</code><br><code>months.splice(1, 0, &#39;Feb&#39;);</code><br><code>// inserts at index 1</code><br><code>console.log(months);</code><br><code>// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</code></p><p><code>months.splice(4, 1, &#39;May&#39;);</code><br><code>// replaces 1 element at index 4</code><br><code>console.log(months);</code><br><code>// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</code></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">官方细解splice() 方法</a></p></div>    <p><strong>第四步计算图书数目，验证书名，时间过滤，自定义指令（焦点）的功能</strong><br>效果图如图所示:<br><img src="/image/vueanli/07.gif"><br>具体现实代码如图所示<br><img src="/image/vueanli/08.png"></p><p>案例总结：</p><div style="color: red"><ol><li>计算组件的computed使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;div class&#x3D;&quot;total&quot;&gt;<br>      &lt;span&gt;图书总数：&lt;&#x2F;span&gt;<br>      &lt;span&gt;&#123;&#123;total&#125;&#125;&lt;&#x2F;span&gt;<br>    &lt;&#x2F;div&gt;<br><br>    computed: &#123;<br>      total: function()&#123;<br>        &#x2F;&#x2F; 计算图书的总数<br>        return this.books.length; &#x2F;&#x2F; 计算数组的长度<br>      &#125;<br>    &#125;,<br></code></pre></td></tr></table></figure></li><li>过滤器是使用的一个封装的现成的方法。</li><li>监听器的使用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;label for&#x3D;&quot;name&quot;&gt;<br>              名称：<br>            &lt;&#x2F;label&gt;<br>            &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;name&quot; v-model&#x3D;&#39;name&#39;&gt;<br>            &lt;button @click&#x3D;&#39;handle&#39; :disabled&#x3D;&quot;submitFlag&quot;&gt;提交&lt;&#x2F;button&gt;<br><br><br><br>      var vm &#x3D; new Vue(&#123;<br>      el: &#39;#app&#39;,<br>      data: &#123;<br>        flag: false,<br>        submitFlag: false,<br>        id: &#39;&#39;,<br>        name: &#39;&#39;,<br>        books: []<br>      &#125;,<br>      watch: &#123;<br>      &#x2F;&#x2F;name 对应 data: &#123; name: &#39;&#39; &#125;; v-model&#x3D;&#39;name&#39; &#x3D;&#x3D; val  <br>         name: function(val) &#123;    <br>          &#x2F;&#x2F; 验证图书名称是否已经存在<br>          var flag &#x3D; this.books.some(function(item)&#123;<br>            return item.name &#x3D;&#x3D; val;<br>          &#125;);<br>          if(flag) &#123;<br>            &#x2F;&#x2F; 图书名称存在<br>            this.submitFlag &#x3D; true;<br>          &#125;else&#123;<br>            &#x2F;&#x2F; 图书名称不存在<br>            this.submitFlag &#x3D; false;<br>          &#125;<br>        &#125;<br>      &#125;,<br></code></pre></td></tr></table></figure></div></div></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: #CCFF99;&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;vue案例解说&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
用来加强自己的vue学习
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ES6模块化</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19io000inkv40h4i6i6t/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19io000inkv40h4i6i6t/</id>
    <published>2020-12-09T07:16:18.000Z</published>
    <updated>2020-12-09T07:16:18.495Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第三方模块nrm(第三方模块下载器的选择)</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19ri00apnkv46tgdb2nc/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19ri00apnkv46tgdb2nc/</id>
    <published>2020-12-08T14:22:21.000Z</published>
    <updated>2020-12-10T14:09:31.207Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: rgb(255, 251, 240);"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">第三方模块nrm</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">nrm用来选择第三方模块的下载路径。优先选择淘宝的模块。</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><img src="/image/nrm/01.png"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><img src="/image/nrm/02.png"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><img src="/image/nrm/03.png"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: rgb(255, 251, 240);&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;第三方模块nrm&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
nrm用来选择第三方模块的下载路径。优先选择淘宝的模块。
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>jsonp的请求原理</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19q8007xnkv443modr19/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19q8007xnkv443modr19/</id>
    <published>2020-12-08T08:14:03.000Z</published>
    <updated>2020-12-08T13:21:11.347Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: rgb(255, 251, 240);"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1500960775,766444135&fm=11&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">jsonp跨域原理解析</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">jsonp跨域原理解析细解</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p><strong>背景：</strong><br>由于浏览器同源策略的限制，非同源下的请求，都会产生跨域问题，jsonp即是为了解决这个问题出现的一种简便解决方案。</p><ul><li><p>同源策略即：同一协议，同一域名，同一端口号。当其中一个不满足时，我们的请求即会发生跨域问题。</p></li><li><p>同源政策的目的</p></li><li><p>同源政策是为了保证用户信息的安全，防止恶意的网站窃取数据。最初的同源政策是指 A</p></li><li><p>网站在客户端设置的 Cookie，B网站是不能访问的。</p></li></ul><p>举个简单的例子：</p><p><code>1.http://www.abc.com:3000到https://www.abc.com:3000的请求会出现跨域（域名、端口相同但协议不同）</code><br><code>2.http://www.abc.com:3000到http://www.abc.com:3001的请求会出现跨域（域名、协议相同但端口不同）</code><br><code>3.http://www.abc.com:3000到http://www.def.com:3000的请求会出现跨域（域名不同）</code><br><br><br><br><br><br><br><br></p><ul><li>突破同源策略限制：<br>现在知道了同源策略，那我们就来看下jsonp是如何突破同源策略的限制实现跨域的</li></ul><p>首先，不知道大家有没有注意，不管是我们的script标签的src还是img标签的src，或者说link标签的href他们没有被同源策略所限制，比如我们有可能使用一个网络上的图片，就可以请求得到。<br>我们拿到的图片是其他服务器给我们提供的，不是我们自己服务器里面的数据</p><p><code>&lt;img src=&quot;https://ss3.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/image/h%3D300/sign=6d0bf83bd215d9.jpg&quot;&gt;</code></p><p>src或href链接的静态资源，本质上来说也是一个get请求，拿csdn上的静态资源举例：<br><img src="/image/jsonp/01.png"></p><p>可以看到，确实是个get请求无疑。同理img标签的src和link标签的href也会发送一个get请求去请求静态资源。那么我们通过这点，是不是发现了点什么，这些标签的src和link属性，并没有受同源策略的限制。说到这里jsonp的实现原理就浮出水面了。</p><br><br><br><br><p><strong>jsonp就是使用同源策略这一“漏洞”，实现的跨域请求（<code>这也是jsonp跨域只能用get请求的原因所在</code>）。想象一下，既然是个get请求，那么服务端一定可以接收到，并做出反馈。ok，知道这两点之后，我们开始具体使用jsonp进行跨域请求。</strong></p><br><br><br><p><strong>JSONP跨域实现：</strong><br>根据上边所说的，我们要用过利用img、srcipt，link标签的src或href属性（到底使用那个标签无所谓）来实现，那么我们如何做呢，我们来看一段简单的代码，为了方便，我这里使用jQuery：</p><p><code>$(&#39;#btn&#39;).click(function(){</code><br>            <code>var frame = document.createElement(&#39;script&#39;);</code><br>            <code>frame.src = &#39;http://localhost:3000/article-list?name=leo&amp;age=30&amp;callback=func&#39;;</code><br>            <code>$(&#39;body&#39;).append(frame);</code><br>        <code>});</code></p><p>可以看到，让我们点击按钮的时候，创建了一个script标签(即会发送一个get请求到src指向的地址)，src地址是”localhost:3000/article-list”,这个src地址，就是我们请求的服务端接口。注意，这里我们有是那个参数，name,age和callback，name和age不说了，这跟我们平时普通的get请求参数无异。主要说下callback这个参数，callback参数就是核心所在。<code>为什么要定义callback呢？</code>首先我们知道，<code>这个get请求已经被发出去了，那么我们如何接口请求回来的数据呢，callback=func则可以帮我们做这件事。</code>我们继续看下边的代码 </p><p><code>&lt;button id=&quot;btn&quot;&gt;点击&lt;/button&gt;</code><br>  <code>&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;</code><br>  <code>&lt;script&gt;</code><br>    <code>$(&#39;#btn&#39;).click(function(){</code><br>            <code>var frame = document.createElement(&#39;script&#39;);</code><br>            <code>frame.src = &#39;http://localhost:3000/article-list?name=leo&amp;age=30&amp;callback=func&#39;;</code><br>            <code>$(&#39;body&#39;).append(frame);</code><br>        <code>});</code><br>        <code>function func(res){</code><br>            <code>alert(res.message+res.name+&#39;你已经&#39;+res.age+&#39;岁了&#39;);</code><br>        <code>}</code></p><p>这里可以看到，我们声明了一个func函数，但没有执行，你可以想一下，如果服务端接口到get请求，返回的是func({message:’hello’})，这样的话在服务端不就可以把数据通过函数执行传参的方式实现数据传递了吗。</p><p>服务端代码实现：<br>接下来，我们看服务端应该如何实现：<br><code>router.get(&#39;/article-list&#39;, (req, res) =&gt; {</code><br> <code>console.log(req.query, &#39;123&#39;);</code><br>  <code>let data = {</code><br>  <code>message: &#39;success!&#39;,</code><br>  <code>name: req.query.name,</code><br>   <code>age: req.query.age</code><br> <code>}</code><br> <code>data = JSON.stringify(data)</code><br> <code>res.end(&#39;func(&#39; + data + &#39;)&#39;);</code><br><code>});</code></p><p>ok，接下来当我们点击提交的时候，就获取到了服务端反回的数据。如下：</p><img src="/image/jsonp/02.png"><p>这样下来，就完成了实现jsonp的跨域</p><p><strong>总结：</strong><br>需要注意的是，callback参数定义的方法是需要前后端定义好的，具体什么名字，商讨好就可以了。其实jsonp的整个过程就类似于前端声明好一个函数，后端返回执行函数。执行函数参数中携带所需的数据<br>  </script></p><hr></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p><strong>callback参数定义的方法也是可以不需要前后端定义好的，只需要前端自己定义就好了。</strong><br>客户端代码<br><img src="/image/Ajax/74.png"></p><p>服务端代码实现：<br>接下来，我们看服务端应该如何实现：<br><img src="/image/Ajax/75.png"></p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: rgb(255, 251, 240);&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1500960775,766444135&amp;fm=11&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;jsonp跨域原理解析&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
jsonp跨域原理解析细解
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title> retun-ture和return-false的区别 </title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19qk008inkv43sg649js/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19qk008inkv43sg649js/</id>
    <published>2020-12-08T08:13:23.000Z</published>
    <updated>2020-12-15T10:46:05.949Z</updated>
    
    <content type="html"><![CDATA[<p><strong>retrun true； 返回正确的处理结果。把控制权返回给页面，页面默认事件继续执行。</strong><br><code>&lt;a href=&quot;http://www.baidu.com&quot; onclick=&quot;alert(11);return true;alert(22)&quot;&gt;链接&lt;/a&gt;</code><br>会执行alert（11）;再执行百度页面跳转</p><p><strong>return false;在大多数情况下,为事件处理函数返回false,可以防止默认的事件行为<br>相当于终止符，干了3件事，阻止默认行为，取消事件冒泡，以及停止回调执行立即返回；</strong><br><code>&lt;a href=&quot;http://www.baidu.com&quot; onclick=&quot;alert(11);return false;alert(22)&quot;&gt;链接&lt;/a&gt;</code><br>仅执行alert（11）后续命令不再执行；</p><p><strong>return：停止回调执行立即返回；</strong></p><p><strong>在阻止表单默认提交的时候，使用return false</strong><br><code>&lt;form action=&quot;http://www.baidu.com&quot; method=&quot;post&quot; onsubmit=&quot;return submitTest();&quot;&gt;</code><br>       <code>&lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;</code><br>    <code>&lt;/form&gt;</code><br>   <code>&lt;script type=&quot;text/javascript&quot;&gt;</code><br>      <code>function submitTest() {</code><br>           <code>alert(0)</code><br>            <code>return false;</code><br>       <code>}</code><br>   <code>&lt;/script&gt;</code></p><p>点击提交按钮，会弹出 0 ，不会刷新页面。（使用submit提交时会刷新页面的）</p><p><strong>return false和return true在一定使用上是类似的用法，但是return false有阻止默认行为的作用</strong></p><img src="/image/return/01.png"><p><strong>这个代码里面使用return true和return false 结果都是打印 ‘1111’,跳出了函数，直接执行函数外面的打印内容。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;retrun true； 返回正确的处理结果。把控制权返回给页面，页面默认事件继续执行。&lt;/strong&gt;&lt;br&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;http://www.baidu.com&amp;quot; onclick=&amp;quot;alert(11
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ES6模块化和webpack打包</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19j3000snkv4grzxay8b/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19j3000snkv4grzxay8b/</id>
    <published>2020-12-08T06:51:52.000Z</published>
    <updated>2020-12-09T07:57:44.731Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: rgb(255, 251, 240);"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">ES6模块化和webpack打包</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">ES6模块化和webpack打包</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><div style="text-align: center"><h2>ES6模块化</h2></div> <strong> ES6 模块化的基本语法</strong>1. 默认导出 与 默认导入<ul><li>默认导出语法 export default 默认导出的成员</li><li>默认导入语法 import 接收名称 from ‘模块标识符’</li></ul><div style="background-color: skyblue ; color: black">// 导出模块成员// 当前文件模块为 m1.js  <br>// 定义私有成员 a 和 c   <br>let a = 10  <br>let c = 20  <br>// 外界访问不到变量 d ,因为它没有被暴露出去<br>let d = 30<br>function show() {}<br>// 将本模块中的私有成员暴露出去，供其它模块使用<br>export default {<br> a,<br> c,<br> show<br>}<br></div><div style="background-color: skyblue; color: black"><p> // 导入模块成员<br> import m1 from ‘./m1.js’<br> console.log(m1)<br> // 打印输出的结果为：<br> // { a: 10, c: 20, show: [Function: show] }</p></div><div style="color: orange">注意：每个模块中，只允许使用唯一的一次 export default，否则会报错！</div><hr><ol start="2"><li>按需导出 与 按需导入</li></ol><ul><li>按需导出语法 export let s1 = 10</li><li>按需导入语法 import { s1 } from ‘模块标识符’</li></ul><div style="background-color: skyblue; color: black"><p>// 当前文件模块为 m1.js<br>// 向外按需导出变量 s1<br>export let s1 = ‘aaa’<br>// 向外按需导出变量 s2<br>export let s2 = ‘ccc’<br>// 向外按需导出方法 say<br>export function say = function() {}</p></div><div style="background-color: skyblue; color: black"><p>// 导入模块成员<br> import { s1, s2 as ss2, say } from ‘./m1.js’<br> console.log(s1) // 打印输出 aaa<br> console.log(ss2) // 打印输出 ccc<br> console.log(say) // 打印输出 [Function: say]</p></div><div style="color: orange">注意：每个模块中，可以使用多次按需导出</div><hr><img src="/image/ES6/01.png"><img src="/image/ES6/02.png" ><hr><ol start="3"><li>直接导入并执行模块代码</li></ol><p>有时候，我们<code>只想单纯执行某个模块中的代码，并不需要得到模块中向外暴露的成员</code>，此时，可以直接导入并执行模块代码。</p><div style="background-color: skyblue ; color: black"><p>// 当前文件模块为 m2.js<br>// 在当前模块中执行一个 for 循环操作<br>for(let i = 0; i &lt; 3; i++) {<br> console.log(i)<br>}</p></div><div style="background-color: skyblue; color: black"><p>// 直接导入并执行模块代码<br> import ‘./m2.js’</p><p>//控制台输出 0 1 2 </p></div><hr><div style="text-align: center"><h2>webpack</h2></div><p><strong>当前 Web 开发面临的困境</strong></p><ul><li>文件依赖关系错综复杂</li><li>静态资源请求效率低</li><li>模块化支持不友好</li><li>浏览器对高级 Javascript 特性兼容程度较低</li><li>etc…</li></ul><p><code>webpack</code> 是一个流行的<code>前端项目构建工具（打包工具</code>），可以解决当前 web 开发中所面临的困境。<br>webpack 提供了<code>友好的模块化支持</code>，以及<code>代码压缩混淆、处理 js 兼容问题、性能优化</code>等强大的功能，从而让程序员把<br>工作的重心放到具体的功能实现上，提高了开发效率和项目的可维护性。</p><p>目前绝大多数企业中的前端项目，都是基于 webpack 进行打包构建的。<br><img src="/image/webpack/01.png"></p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: rgb(255, 251, 240);&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;ES6模块化和webpack打包&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
ES6模块化和webpack打包
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CSS前端面试题讲解</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19ia000bnkv4a5n7bsn4/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19ia000bnkv4a5n7bsn4/</id>
    <published>2020-12-07T13:56:41.000Z</published>
    <updated>2020-12-07T14:01:00.433Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: rgb(255, 251, 240);"><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">CSS前端面试题讲解</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">加强CSS基础</div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p>CSS绘制三角形<br><img src="/image/cssProgress/01.png"></p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: rgb(255, 251, 240);&quot;&gt;
&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4112020308,3805275000&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;CSS前端面试题讲解&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
加强CSS基础
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue前后端交互</title>
    <link href="https://wujun1234567.github.io/2020/ckmbg19qi008dnkv4hz170y9s/"/>
    <id>https://wujun1234567.github.io/2020/ckmbg19qi008dnkv4hz170y9s/</id>
    <published>2020-12-06T07:49:25.000Z</published>
    <updated>2020-12-07T12:11:45.912Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color: rgb(255, 251, 240);"><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3647099666,2758135680&fm=26&gp=0.jpg" style="width: 162px ;height: 130px;margin-left: 0;margin-top: 15px;float: left;"><div style="float: left;margin:20px 15px;width: 500px;height: 137px"><h4 style="padding: 0;margin: 0;">VUE常用特性学习记录</h4><div style="padding: 0;margin: 0;font-size: 12px;line-height: 30px">这里不写笔记，只写VUE有哪些知识点<br></div></div><a id="more"></a><br><br><br><br><br><br><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p><strong>前后端交互概述与URL地址格式</strong><br>前后端交互<br>url地址格式</p><hr><p><strong>接口调用的方式</strong></p><h6>1.原生ajax</h6><h6>2.基于jQuery的ajax</h6><h6>3.Fetch</h6><h6>4.Promise</h6><hr><p><strong>url 地址格式</strong></p><h6>1.传统的url</h6> <img src="/image/vue/04/01.png"><img src="/image/vue/04/02.png"><hr><h6>2.Restful形式的url</h6><img src="/image/vue/04/03.png"><hr><p><strong>异步编程问题与Promise概述</strong><br>异步<br>promise</p><p><strong>jS中常见的异步调用</strong><br>定时任何 –<br>ajax<br>事件函数</p><img src="/image/vue/04/04.png"><p><strong>Promise解决了什么问题</strong><br>主要解决异步深层嵌套<br>语法更加简洁</p><hr><p><strong>Promise基本用法</strong><br><img src="/image/vue/04/05.png"><br><img src="/image/vue/04/06.png"></p><hr><p><strong>Promise发送Ajax请求并处理回调地狱问题</strong><br><img src="/image/vue/04/07.png"><br><strong>Promise发送多次Ajax请求并处理回调地狱问题</strong><br><img src="/image/vue/04/08.png"><br><img src="/image/vue/04/09.png"></p><hr><p><strong>Promise的then方法参数中的函数的返回值</strong><br>1.返回Promise实例对象</p><p>  返回的该实例对象会调用下一个then</p><p>2.返回普通值</p><p>  返回的普通值会直接传递给下一个then，通过then参数中函数的参数接收该值</p><img src="/image/vue/04/10.png"><hr><p><strong>Promise常用的API(实例对象)</strong><br>.then()<br>得到异步任务正确的结果<br>.catch()<br>获取异常信息<br>.finally()<br>成功与否都会执行（不是正式标准）</p><img src="/image/vue/04/11.png"><hr><p><strong>Promise常用的API(对象方法)</strong><br>.all()<br>Promise.all 方法接受一个数组作参数，数组中的对象（p1、p2、p3）均为promise实例（如果不是一个<br>promise，该项会被用 Promise.resolve 转换为一个promise)。它的状态由这三个promise实例决定</p><p>.race()<br>Promise.race 方法同样接受一个数组作参数。当p1, p2, p3中有一个实例的状态发生改变（变为 fulfilled<br>或 rejected ），p的状态就跟着改变。并把第一个改变状态的promise的返回值，传给p的回调函数</p><img src="/image/vue/04/12.png"><hr><p><strong>FetchAPI概述与基本使用</strong><br>fetch<br>Fetch API是新的ajax解决方案 Fetch会返回Promise<br>fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。<br><img src="/image/vue/04/13.png"></p><hr><p><strong>fetch请求参数</strong><br><strong>1.常用配置选项</strong></p><ul><li>method（String）:HTTP请求方法，默认GET（GET、POST、PUT、DELETE）</li><li>body（String）:HTTP请求方法</li><li>headers（Object）:HTTP请求头，默认为{}<img src="/image/vue/04/14.png"></li></ul><p><strong>2.GET请求方式的参数传递</strong><br><img src="/image/vue/04/15.png"><br>服务器路由设置<br><code>app.get(&#39;/books&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;传统的URL传递参数!&#39; + req.query.id)</code><br><code>})</code></p><p><code>app.get(&#39;/books/:id&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;Restful形式的URL传递参数!&#39; + req.params.id)</code><br><code>})</code></p><p><strong>3.DELETE请求方式的参数传递</strong><br><img src="/image/vue/04/16.png"><br>服务器路由设置<br><code>app.delete(&#39;/books/:id&#39;, (req, res) =&gt; {</code><br> <code>res.send(&#39;DELETE请求传递参数!&#39; + req.params.id)</code><br><code>})</code></p><p><strong>4.POST请求方式的参数传递</strong><br><img src="/image/vue/04/17.png"><br><img src="/image/vue/04/18.png"><br>服务器路由设置<br><code>app.post(&#39;/books&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;POST请求传递参数!&#39; + req.body.uname + &#39;---&#39; + req.body.pwd)</code><br><code>})</code></p><p><strong>5.PUT请求方式的参数传递</strong><br><img src="/image/vue/04/19.png"><br>服务器路由设置<br><code>app.put(&#39;/books/:id&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;PUT请求传递参数!&#39; + req.params.id + &#39;---&#39; + req.body.uname + &#39;---&#39; + req.body.pwd)</code><br><code>})</code></p><img src="/image/vue/04/20.png"><hr><p><strong>响应数据格式</strong></p><ul><li>text(): 将返回体处理成字符串类型</li><li>json(): 返回结果和JSON.parse(responseText)一样<img src="/image/vue/04/21.png"></li></ul><img src="/image/vue/04/22.png"><p>服务器路由设置<br><code>app.get(&#39;/json&#39;, (req, res) =&gt; {</code><br> <code>res.json({</code><br>    <code>uname: &#39;lisi&#39;,</code><br>   <code>age: 13,</code><br>   <code>gender: &#39;male&#39;</code><br> <code>});</code><br><code>})</code></p></p><hr><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"><p><strong>axios的基本用法</strong><br><img src="/image/vue/04/23.png"><br><img src="/image/vue/04/24.png"></p><p><code>app.get(&#39;/adata&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;Hello axios!&#39;)</code><br><code>})</code></p><p><strong>axios的常用API</strong></p><ul><li>get: 查询数据</li><li>post: 添加数据</li><li>put: 修改数据</li><li>delete: 删除数据</li></ul><p><strong>1.GET传递参数</strong></p><ul><li>通过URL传递参数</li><li>通过params 选项传递参数<img src="/image/vue/04/25.png"><img src="/image/vue/04/26.png"></li></ul><p>对应的三个服务器端的路由设置<br><code>app.get(&#39;/axios&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;axios get 传递参数&#39; + req.query.id)</code><br><code>})</code></p><p><code>app.get(&#39;/axios/:id&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;axios get (Restful) 传递参数&#39; + req.params.id)</code><br><code>})</code></p><p><code>app.get(&#39;/axios&#39;, (req, res) =&gt; {</code><br> <code>res.send(&#39;axios get 传递参数&#39; + req.query.id)</code><br><code>})</code></p><p><strong>2.DELETE传递参数</strong></p><ul><li>参数传递方式与GET类似<img src="/image/vue/04/28.png"></li></ul><img src="/image/vue/04/27.png">对应的三个服务器端的路由设置`app.delete('/axios', (req, res) => {`  `res.send('axios delete 传递参数' + req.query.id)``})`<p><code>app.delete(&#39;/axios/:id&#39;, (req, res) =&gt; {</code><br> <code>res.send(&#39;axios delete 传递参数&#39; + req.params.id)</code><br><code>})</code></p><p><code>app.delete(&#39;/axios&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;axios delete 传递参数&#39; + req.query.id)</code><br><code>})</code></p><p><strong>3.POST传递参数</strong></p><ul><li>通过选项传递参数（默认传递的是json格式的数据） <img src="/image/vue/04/29.png"><img src="/image/vue/04/30.png">对应的服务器端的路由设置</li></ul><p><code>app.post(&#39;/axios&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;axios post 传递参数&#39; + req.body.uname + &#39;---&#39; + req.body.age)</code><br><code>})</code></p><ul><li>通过URLSearchParams传递参数（application/x-www-form-urlencoded）<img src="/image/vue/04/31.png"><img src="/image/vue/04/32.png">对应的服务器端的路由设置</li></ul><p><code>app.post(&#39;/axios&#39;, (req, res) =&gt; {</code><br>  <code>res.send(&#39;axios post 传递参数&#39; + req.body.uname + &#39;---&#39; + req.body.age)</code><br><code>})</code></p><p><strong>4.PUT传递参数</strong></p><ul><li>参数传递方式与POST类似<img src="/image/vue/04/33.png"><img src="/image/vue/04/34.png"></li></ul><p>对应的服务器端的路由设置</p><p><code>app.put(&#39;/axios/:id&#39;, (req, res) =&gt; {</code><br> <code>res.send(&#39;axios put 传递参数&#39; + req.params.id + &#39;---&#39; + req.body.uname + &#39;---&#39; + req.body.pwd)</code><br><code>})</code></p><hr><p><strong>axios的响应结果</strong></p><ul><li>data：实际响应回来的数据</li><li>headers：响应头信息</li><li>status：响应状态码</li><li>statusText：响应状态信息<img src="/image/vue/04/35.png"></li></ul><p>对应的服务器端的路由设置</p><p><code>app.get(&#39;/axios-json&#39;, (req, res) =&gt; {</code><br>  <code>res.json({</code><br>   <code>uname: &#39;lisi&#39;,</code><br>   <code>age: 12</code><br> <code>});</code><br><code>})</code></p><p><strong>axios的全局配置</strong></p><ul><li>axios.defaults.timeout = 3000; //超时时间</li><li>axios.defaults.baseURL = ‘<a href="http://localhost:3000/app&#39;" target="_blank" rel="noopener">http://localhost:3000/app&#39;</a>; //默认地址</li><li>axios.defaults.headers[‘mytoken’] = ‘aqwerqwqw’ //设置请求头<img src="/image/vue/04/36.png"></li></ul><p>对应的服务器端的路由设置</p><p><code>app.get(&#39;/axios-json&#39;, (req, res) =&gt; {</code><br>  <code>res.json({</code><br>   <code>uname: &#39;lisi&#39;,</code><br>   <code>age: 12</code><br> <code>});</code><br><code>})</code></p><hr><p><strong>axios请求拦截器</strong><br><img src="/image/vue/04/37.png"></p><img src="/image/vue/04/38.png"><p><strong>axios响应拦截器</strong><br><img src="/image/vue/04/39.png"></p><img src="/image/vue/04/40.png"><ul><li>相当于进行下图的代码处理，两个打印的数据都是一样的。<img src="/image/vue/04/41.png"></li></ul><hr><p><strong>async/await 的基本用法</strong></p><ul><li>async/await是ES7引入的新语法，可以更加方便的进行异步操作</li><li>async关键字用于函数上 (async函数的返回值是Promise实例对象)</li><li>await关键字用于async函数当中 (await可以得到异步的结果)</li></ul><img src="/image/vue/04/42.png"><img src="/image/vue/04/43.png"><p><strong>async/await 处理多个异步请求</strong><br><img src="/image/vue/04/44.png"><br><img src="/image/vue/04/45.png"></p></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p><p style="text-indent: 2em;color: rgb(93, 93, 93);font-size: 13px"></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;background-color: rgb(255, 251, 240);&quot;&gt;
&lt;img src=&quot;https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3647099666,2758135680&amp;fm=26&amp;gp=0.jpg&quot; style=&quot;width: 162px ;height: 130px;margin-left: 0;
margin-top: 15px;float: left;&quot;&gt;
&lt;div style=&quot;float: left;margin:20px 15px;width: 500px;height: 137px&quot;&gt;
&lt;h4 style=&quot;padding: 0;margin: 0;&quot;&gt;VUE常用特性学习记录&lt;/h4&gt;
&lt;div style=&quot;padding: 0;margin: 0;font-size: 12px;line-height: 30px&quot;&gt;
这里不写笔记，只写VUE有哪些知识点
&lt;br&gt;
&lt;/div&gt;


&lt;/div&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
